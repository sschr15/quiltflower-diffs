gen_diffs.py pkg/TestEnumSwitchEmpty.java 1.9.0 1.10.0-20221220.042610-29
--- 1.9.0
+++ 1.10.0-20221220.042610-29
@@ -4,9 +4,34 @@
 
 public class TestEnumSwitchEmpty {
    public void test() {
-      ElementType et = ElementType.TYPE;
-      ElementType et2 = ElementType.TYPE;
-      int var10000 = null.$SwitchMap$java$lang$annotation$ElementType[et.ordinal()];
-      var10000 = null.$SwitchMap$java$lang$annotation$ElementType[et2.ordinal()];
+      // $QF: Couldn't be decompiled
+      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
+      // java.lang.NullPointerException: Cannot invoke "String.contains(java.lang.CharSequence)" because "text" is null
+      //  at org.jetbrains.java.decompiler.util.TextBuffer.addAllClassTokens(TextBuffer.java)
+      //  at org.jetbrains.java.decompiler.util.TextBuffer.appendAllClasses(TextBuffer.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.FieldExprent.toJava(FieldExprent.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.ArrayExprent.toJava(ArrayExprent.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent.toJava(AssignmentExprent.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.listToJava(ExprProcessor.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.BasicBlockStatement.toJava(BasicBlockStatement.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement.toJava(RootStatement.java)
+      //  at org.jetbrains.java.decompiler.main.ClassWriter.methodToJava(ClassWriter.java)
+      //
+      // Bytecode:
+      // 00: getstatic java/lang/annotation/ElementType.TYPE Ljava/lang/annotation/ElementType;
+      // 03: astore 1
+      // 04: getstatic java/lang/annotation/ElementType.TYPE Ljava/lang/annotation/ElementType;
+      // 07: astore 2
+      // 08: getstatic pkg/TestEnumSwitchEmpty$1.$SwitchMap$java$lang$annotation$ElementType [I
+      // 0b: aload 1
+      // 0c: invokevirtual java/lang/annotation/ElementType.ordinal ()I
+      // 0f: iaload
+      // 10: pop
+      // 11: getstatic pkg/TestEnumSwitchEmpty$1.$SwitchMap$java$lang$annotation$ElementType [I
+      // 14: aload 2
+      // 15: invokevirtual java/lang/annotation/ElementType.ordinal ()I
+      // 18: iaload
+      // 19: pop
+      // 1a: return
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestFieldSingleAccess.java 1.9.0 1.10.0-20221220.042610-29
--- 1.9.0
+++ 1.10.0-20221220.042610-29
@@ -4,9 +4,8 @@
    public Integer field;
 
    public final void test() {
-      Integer var10000 = this.field;
       if (this.field != null) {
-         System.out.println(var10000);
+         System.out.println(this.field);
       }
    }
 
gen_diffs.py pkg/TestFinallyThrow.java 1.9.0 1.10.0-20221220.042610-29
--- 1.9.0
+++ 1.10.0-20221220.042610-29
@@ -6,18 +6,14 @@
          try {
             System.out.println(1);
          } finally {
-            label97: {
-               try {
-                  if (!b) {
-                     break label97;
-                  }
-               } catch (Exception var22) {
-                  throw var22;
-               } finally {
-                  System.out.println(2);
+            try {
+               if (b) {
+                  return;
                }
-
-               return;
+            } catch (Exception var22) {
+               throw var22;
+            } finally {
+               System.out.println(2);
             }
          }
       }
gen_diffs.py pkg/TestGroovyClass.java 1.9.0 1.10.0-20221220.042610-29
--- 1.9.0
+++ 1.10.0-20221220.042610-29
@@ -91,9 +91,8 @@
    @Internal
    @Transient
    public MetaClass getMetaClass() {
-      MetaClass var10000 = this.metaClass;
       if (this.metaClass != null) {
-         return var10000;
+         return this.metaClass;
       } else {
          this.metaClass = this.$getStaticMetaClass();
          return this.metaClass;
@@ -231,9 +230,8 @@
       @Internal
       @Transient
       public MetaClass getMetaClass() {
-         MetaClass var10000 = this.metaClass;
          if (this.metaClass != null) {
-            return var10000;
+            return this.metaClass;
          } else {
             this.metaClass = this.$getStaticMetaClass();
             return this.metaClass;
@@ -354,9 +352,8 @@
       @Internal
       @Transient
       public MetaClass getMetaClass() {
-         MetaClass var10000 = this.metaClass;
          if (this.metaClass != null) {
-            return var10000;
+            return this.metaClass;
          } else {
             this.metaClass = this.$getStaticMetaClass();
             return this.metaClass;
gen_diffs.py pkg/TestGroovyTrait$Trait$Helper.java 1.9.0 1.10.0-20221220.042610-29
--- 1.9.0
+++ 1.10.0-20221220.042610-29
@@ -135,9 +135,8 @@
    @Internal
    @Transient
    public MetaClass getMetaClass() {
-      MetaClass var10000 = this.metaClass;
       if (this.metaClass != null) {
-         return var10000;
+         return this.metaClass;
       } else {
          this.metaClass = this.$getStaticMetaClass();
          return this.metaClass;
gen_diffs.py pkg/TestGroovyTryCatch.java 1.9.0 1.10.0-20221220.042610-29
--- 1.9.0
+++ 1.10.0-20221220.042610-29
@@ -77,9 +77,8 @@
    @Internal
    @Transient
    public MetaClass getMetaClass() {
-      MetaClass var10000 = this.metaClass;
       if (this.metaClass != null) {
-         return var10000;
+         return this.metaClass;
       } else {
          this.metaClass = this.$getStaticMetaClass();
          return this.metaClass;
gen_diffs.py pkg/TestMethodParamsNoLvt.java 1.9.0 1.10.0-20221220.042610-29
--- 1.9.0
+++ 1.10.0-20221220.042610-29
@@ -2,13 +2,13 @@
 
 public class TestMethodParamsNoLvt {
    public void foo(int param0, String param1) {
-      System.out.print(var1);
-      System.out.println(var2);
+      System.out.print(param0);
+      System.out.println(param1);
    }
 
    public static void bar(int param0, int param1, String param2, int var3) {
-      System.out.print(var0);
-      System.out.print(var1);
-      System.out.println(var2);
+      System.out.print(param0);
+      System.out.print(param1);
+      System.out.println(param2);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestObjectPhi.java 1.9.0 1.10.0-20221220.042610-29
--- 1.9.0
+++ 1.10.0-20221220.042610-29
@@ -2,30 +2,13 @@
 
 public class TestObjectPhi {
    public Object example(boolean bool) {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.RuntimeException: invalid constant type: Ljava/lang/Object;
-      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.ConstExprent.toJava(ConstExprent.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent.toJava(AssignmentExprent.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.listToJava(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.BasicBlockStatement.toJava(BasicBlockStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.IfStatement.toJava(IfStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.jmpWrapper(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.SequenceStatement.toJava(SequenceStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement.toJava(RootStatement.java)
-      //  at org.jetbrains.java.decompiler.main.ClassWriter.methodToJava(ClassWriter.java)
-      //
-      // Bytecode:
-      // 0: ldc ""
-      // 2: astore 2
-      // 3: iload 1
-      // 4: ifeq c
-      // 7: aconst_null
-      // 8: astore 2
-      // 9: goto e
-      // c: aconst_null
-      // d: astore 2
-      // e: aload 2
-      // f: areturn
+      Object value = "";
+      if (bool) {
+         value = null;
+      } else {
+         value = null;
+      }
+
+      return value;
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestStaticIterator.java 1.9.0 1.10.0-20221220.042610-29
--- 1.9.0
+++ 1.10.0-20221220.042610-29
@@ -15,29 +15,11 @@
    }
 
    public static void test() {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot read field "bytecode" because the return value of "org.jetbrains.java.decompiler.modules.decompiler.exps.InvocationExprent.getInstance()" is null
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.matchForEach(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoop(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoopsRec(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoopsRec(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoopsRec(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoops(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java)
-      //
-      // Bytecode:
-      // 00: invokestatic pkg/TestStaticIterator.iterator ()Ljava/util/Iterator;
-      // 03: astore 0
-      // 04: aload 0
-      // 05: invokeinterface java/util/Iterator.hasNext ()Z 1
-      // 0a: ifeq 1a
-      // 0d: aload 0
-      // 0e: invokeinterface java/util/Iterator.next ()Ljava/lang/Object; 1
-      // 13: checkcast pkg/TestStaticIterator
-      // 16: astore 1
-      // 17: goto 04
-      // 1a: return
+      Iterator iter = iterator();
+
+      while(iter.hasNext()) {
+         TestStaticIterator var1 = (TestStaticIterator)iter.next();
+      }
    }
 
    public static void test1() {
gen_diffs.py pkg/TestTryReturn.java 1.9.0 1.10.0-20221220.042610-29
--- 1.9.0
+++ 1.10.0-20221220.042610-29
@@ -223,7 +223,7 @@
             return;
          } catch (Exception var16) {
          } finally {
-            System.out.println(var4);
+            System.out.println(var15);
          }
       } finally {
          System.out.println(var3);
gen_diffs.py pkg/TestTryWithResourcesAfterSwitch.java 1.9.0 1.10.0-20221220.042610-29
--- 1.9.0
+++ 1.10.0-20221220.042610-29
@@ -25,97 +25,20 @@
    }
 
    public void test2() {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.RuntimeException: invalid constant type: Ljava/lang/Object;
-      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.ConstExprent.toJava(ConstExprent.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.SwitchStatement.toJava(SwitchStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.jmpWrapper(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.IfStatement.toJava(IfStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement.toJava(RootStatement.java)
-      //  at org.jetbrains.java.decompiler.main.ClassWriter.methodToJava(ClassWriter.java)
-      //
-      // Bytecode:
-      // 00: getstatic java/lang/annotation/ElementType.METHOD Ljava/lang/annotation/ElementType;
-      // 03: astore 1
-      // 04: aload 1
-      // 05: ifnull 10
-      // 08: new java/lang/RuntimeException
-      // 0b: dup
-      // 0c: invokespecial java/lang/RuntimeException.<init> ()V
-      // 0f: athrow
-      // 10: ldc "default"
-      // 12: astore 2
-      // 13: bipush -1
-      // 14: istore 3
-      // 15: aload 2
-      // 16: invokevirtual java/lang/String.hashCode ()I
-      // 19: lookupswitch 30 1 69262893 19
-      // 2c: aload 2
-      // 2d: ldc "HYxSY"
-      // 2f: invokevirtual java/lang/String.equals (Ljava/lang/Object;)Z
-      // 32: ifeq 37
-      // 35: bipush 0
-      // 36: istore 3
-      // 37: iload 3
-      // 38: lookupswitch 20 1 0 20
-      // 4c: new java/util/Scanner
-      // 4f: dup
-      // 50: getstatic java/lang/System.in Ljava/io/InputStream;
-      // 53: invokespecial java/util/Scanner.<init> (Ljava/io/InputStream;)V
-      // 56: astore 2
-      // 57: aconst_null
-      // 58: astore 3
-      // 59: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 5c: ldc "hi"
-      // 5e: invokevirtual java/io/PrintStream.println (Ljava/lang/String;)V
-      // 61: aload 2
-      // 62: ifnull ad
-      // 65: aload 3
-      // 66: ifnull 7b
-      // 69: aload 2
-      // 6a: invokevirtual java/util/Scanner.close ()V
-      // 6d: goto ad
-      // 70: astore 4
-      // 72: aload 3
-      // 73: aload 4
-      // 75: invokevirtual java/lang/Throwable.addSuppressed (Ljava/lang/Throwable;)V
-      // 78: goto ad
-      // 7b: aload 2
-      // 7c: invokevirtual java/util/Scanner.close ()V
-      // 7f: goto ad
-      // 82: astore 4
-      // 84: aload 4
-      // 86: astore 3
-      // 87: aload 4
-      // 89: athrow
-      // 8a: astore 5
-      // 8c: aload 2
-      // 8d: ifnull aa
-      // 90: aload 3
-      // 91: ifnull a6
-      // 94: aload 2
-      // 95: invokevirtual java/util/Scanner.close ()V
-      // 98: goto aa
-      // 9b: astore 6
-      // 9d: aload 3
-      // 9e: aload 6
-      // a0: invokevirtual java/lang/Throwable.addSuppressed (Ljava/lang/Throwable;)V
-      // a3: goto aa
-      // a6: aload 2
-      // a7: invokevirtual java/util/Scanner.close ()V
-      // aa: aload 5
-      // ac: athrow
-      // ad: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // b0: ldc "f"
-      // b2: invokevirtual java/io/PrintStream.println (Ljava/lang/String;)V
-      // b5: goto c5
-      // b8: astore 7
-      // ba: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // bd: ldc "f"
-      // bf: invokevirtual java/io/PrintStream.println (Ljava/lang/String;)V
-      // c2: aload 7
-      // c4: athrow
-      // c5: return
+      ElementType vvv3 = ElementType.METHOD;
+      if (vvv3 != null) {
+         throw new RuntimeException();
+      } else {
+         String vvv26 = "default";
+         switch(vvv26) {
+            case "HYxSY":
+            default:
+               try (Scanner vvv26x = new Scanner(System.in)) {
+                  System.out.println("hi");
+               } finally {
+                  System.out.println("f");
+               }
+         }
+      }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesFakeTrigger.java 1.9.0 1.10.0-20221220.042610-29
--- 1.9.0
+++ 1.10.0-20221220.042610-29
@@ -2,6 +2,7 @@
 
 import java.io.File;
 import java.io.FileNotFoundException;
+import java.util.NoSuchElementException;
 import java.util.Scanner;
 
 public class TestTryWithResourcesFakeTrigger {
@@ -38,14 +39,34 @@
    }
 
    public void testTrigger3(File file) throws FileNotFoundException {
-      try (Scanner scanner = new Scanner(file)) {
+      Scanner scanner = new Scanner(file);
+
+      try {
          scanner.next();
+      } catch (NoSuchElementException var6) {
+         try {
+            scanner.close();
+         } catch (IllegalStateException var5) {
+            var6.addSuppressed(var5);
+         }
+
+         throw var6;
       }
    }
 
    public void testTrigger4(File file) throws FileNotFoundException {
-      try (Scanner scanner = new Scanner(file)) {
+      Scanner scanner = new Scanner(file);
+
+      try {
          scanner.next();
+      } catch (Throwable var6) {
+         try {
+            scanner.close();
+         } catch (Throwable var5) {
+            var6.addSuppressed(var5);
+         }
+
+         throw var6;
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesManyJ9.java 1.9.0 1.10.0-20221220.042610-29
--- 1.9.0
+++ 1.10.0-20221220.042610-29
@@ -10,70 +10,54 @@
       Throwable var3 = null;
 
       try {
-         Scanner s2;
+         Scanner s2 = new Scanner(f);
+         Throwable var5 = null;
+
          try {
-            s2 = new Scanner(f);
-            Throwable var5 = null;
+            Scanner s3 = new Scanner(f);
+            Throwable var7 = null;
 
             try {
-               Scanner s3;
+               Scanner s4 = new Scanner(f);
+               Throwable var9 = null;
+
                try {
-                  s3 = new Scanner(f);
-                  Throwable var7 = null;
+                  Scanner s5 = new Scanner(f);
+                  Throwable var11 = null;
 
                   try {
-                     Scanner s4;
-                     try {
-                        s4 = new Scanner(f);
-                        Throwable var9 = null;
-
-                        try {
-                           Scanner s5;
-                           try {
-                              s5 = new Scanner(f);
-                              Throwable var11 = null;
-
-                              try {
-                                 System.out.println(s1.nextLine());
-                                 System.out.println(s2.nextLine());
-                                 System.out.println(s3.nextLine());
-                                 System.out.println(s4.nextLine());
-                                 System.out.println(s5.nextLine());
-                              } catch (Throwable var68) {
-                                 var11 = var68;
-                                 throw var68;
-                              } finally {
-                                 $closeResource(var11, s5);
-                              }
-                           } catch (Throwable var70) {
-                              s5 = var70;
-                              var9 = var70;
-                              throw var70;
-                           }
-                        } finally {
-                           $closeResource(var9, s4);
-                        }
-                     } catch (Throwable var72) {
-                        s4 = var72;
-                        var7 = var72;
-                        throw var72;
-                     }
+                     System.out.println(s1.nextLine());
+                     System.out.println(s2.nextLine());
+                     System.out.println(s3.nextLine());
+                     System.out.println(s4.nextLine());
+                     System.out.println(s5.nextLine());
+                  } catch (Throwable var68) {
+                     var11 = var68;
+                     throw var68;
                   } finally {
-                     $closeResource(var7, s3);
+                     $closeResource(var11, s5);
                   }
-               } catch (Throwable var74) {
-                  s3 = var74;
-                  var5 = var74;
-                  throw var74;
+               } catch (Throwable var70) {
+                  var9 = var70;
+                  throw var70;
+               } finally {
+                  $closeResource(var9, s4);
                }
+            } catch (Throwable var72) {
+               var7 = var72;
+               throw var72;
             } finally {
-               $closeResource(var5, s2);
+               $closeResource(var7, s3);
             }
-         } catch (Throwable var76) {
-            s2 = var76;
-            var3 = var76;
-            throw var76;
+         } catch (Throwable var74) {
+            var5 = var74;
+            throw var74;
+         } finally {
+            $closeResource(var5, s2);
          }
+      } catch (Throwable var76) {
+         var3 = var76;
+         throw var76;
       } finally {
          $closeResource(var3, s1);
       }
gen_diffs.py pkg/TestUnknownCast.java 1.9.0 1.10.0-20221220.042610-29
--- 1.9.0
+++ 1.10.0-20221220.042610-29
@@ -1,8 +1,6 @@
 package pkg;
 
 public class TestUnknownCast {
-   // $QF: Could not properly define all variable types!
-   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    public void test() {
       boolean vvv1 = true;
       boolean vvv2 = false;
@@ -17,9 +15,9 @@
          ;
       }
 
-      boolean var8 = (<unknown>)vvv2;
+      vvv1 = vvv2;
 
-      for(Object vvv34 = null; vvv34 != null; var8 = var8) {
+      for(Object vvv34 = null; vvv34 != null; vvv1 = vvv1) {
          System.out.println(vvv34);
       }
    }
