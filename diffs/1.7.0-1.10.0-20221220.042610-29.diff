gen_diffs.py ext/Direction.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -8,7 +8,7 @@
    UP,
    DOWN;
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static Direction[] $values() {
       return new Direction[]{NORTH, SOUTH, EAST, WEST, UP, DOWN};
    }
gen_diffs.py pkg/Option2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -78,17 +78,17 @@
    public Object productElement(final int n) {
       double var10000;
       switch(n) {
-      case 0:
-         var10000 = this._1();
-         break;
-      case 1:
-         var10000 = this._2();
-         break;
-      case 2:
-         var10000 = this._3();
-         break;
-      default:
-         throw new IndexOutOfBoundsException(BoxesRunTime.boxToInteger(n).toString());
+         case 0:
+            var10000 = this._1();
+            break;
+         case 1:
+            var10000 = this._2();
+            break;
+         case 2:
+            var10000 = this._3();
+            break;
+         default:
+            throw new IndexOutOfBoundsException(BoxesRunTime.boxToInteger(n).toString());
       }
 
       return BoxesRunTime.boxToDouble(var10000);
@@ -97,17 +97,17 @@
    public String productElementName(final int n) {
       String var10000;
       switch(n) {
-      case 0:
-         var10000 = "x";
-         break;
-      case 1:
-         var10000 = "y";
-         break;
-      case 2:
-         var10000 = "z";
-         break;
-      default:
-         throw new IndexOutOfBoundsException(BoxesRunTime.boxToInteger(n).toString());
+         case 0:
+            var10000 = "x";
+            break;
+         case 1:
+            var10000 = "y";
+            break;
+         case 2:
+            var10000 = "z";
+            break;
+         default:
+            throw new IndexOutOfBoundsException(BoxesRunTime.boxToInteger(n).toString());
       }
 
       return var10000;
gen_diffs.py pkg/Option3$.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -29,6 +29,6 @@
    }
 
    public Option3 fromProduct(final scala.Product x$0) {
-      return new Option3((List)x$0.productElement(0));
+      return new Option3((List<String>)x$0.productElement(0));
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestAccidentalSwitchExpression.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,15 +3,15 @@
 public class TestAccidentalSwitchExpression {
    public void test(Object a) {
       switch(10000) {
-      case 320:
-         break;
-      default:
-         Object vvv26 = null;
+         case 320:
+            break;
+         default:
+            Object vvv26 = null;
 
-         while(vvv26 == null) {
-         }
-      case -79:
-         long var4 = -5851592879203823622L;
+            while(vvv26 == null) {
+            }
+         case -79:
+            long var4 = -5851592879203823622L;
       }
 
       if (a == null) {
gen_diffs.py pkg/TestAmbiguousCall.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -28,7 +28,6 @@
       } else {
          this.m2(value.toString());
       }
-
    }
 
    void test3(Object value) {
@@ -37,6 +36,5 @@
       } else {
          this.m2(value.toString());
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestAnonymousClass.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -22,31 +22,27 @@
          int b = 5;
       }
    };
-   private final TestAnonymousClass.InnerRecursive y = new TestAnonymousClass.InnerRecursive(
-      new TestAnonymousClass.InnerRecursive((TestAnonymousClass.InnerRecursive)null) {
-         @Override
-         void foo() {
-            int a = 5;
-            int b = 5;
-            int g = 5;
-         }
+   private final TestAnonymousClass.InnerRecursive y = new TestAnonymousClass.InnerRecursive(new TestAnonymousClass.InnerRecursive(null) {
+      @Override
+      void foo() {
+         int a = 5;
+         int b = 5;
+         int g = 5;
       }
-   ) {
+   }) {
       int v = 5;
       int t = 5;
       int j = 5;
       int o = 5;
    };
-   private final TestAnonymousClass.InnerRecursive x = new TestAnonymousClass.InnerRecursive(
-      new TestAnonymousClass.InnerRecursive((TestAnonymousClass.InnerRecursive)null) {
-         @Override
-         void foo() {
-            int a = 5;
-            int b = 5;
-            int g = 5;
-         }
+   private final TestAnonymousClass.InnerRecursive x = new TestAnonymousClass.InnerRecursive(new TestAnonymousClass.InnerRecursive(null) {
+      @Override
+      void foo() {
+         int a = 5;
+         int b = 5;
+         int g = 5;
       }
-   ) {
+   }) {
       int v = 5;
       int t = 5;
       int j = 5;
@@ -67,15 +63,14 @@
          int x = 5;
          System.out.println(5);
       }
-
    }
 
    void bar() {
-      ((<undefinedtype>)(new Object() {
+      (new Object() {
          public void foo(String s) {
             System.out.println(s);
          }
-      })).foo("Hello world");
+      }).foo("Hello world");
    }
 
    void boo() {
gen_diffs.py pkg/TestAnonymousClassConstructor.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,62 +2,62 @@
 
 class TestAnonymousClassConstructor {
    void innerPrivateString() {
-      TestAnonymousClassConstructor.InnerPrivateString var10001 = new TestAnonymousClassConstructor.InnerPrivateString("text") {
+      new TestAnonymousClassConstructor.InnerPrivateString("text") {
       };
    }
 
    void innerPrivate() {
-      TestAnonymousClassConstructor.InnerPrivate var10001 = new TestAnonymousClassConstructor.InnerPrivate(3L, 4) {
+      new TestAnonymousClassConstructor.InnerPrivate(3L, 4) {
       };
    }
 
    void innerStaticPrivateString() {
-      TestAnonymousClassConstructor.InnerStaticPrivateString var10001 = new TestAnonymousClassConstructor.InnerStaticPrivateString("text") {
+      new TestAnonymousClassConstructor.InnerStaticPrivateString("text") {
       };
    }
 
    void innerStaticPrivate() {
-      TestAnonymousClassConstructor.InnerStaticPrivate var10001 = new TestAnonymousClassConstructor.InnerStaticPrivate(3L, 4) {
+      new TestAnonymousClassConstructor.InnerStaticPrivate(3L, 4) {
       };
    }
 
    static void innerStaticPrivateStringStatic() {
-      TestAnonymousClassConstructor.InnerStaticPrivateString var10001 = new TestAnonymousClassConstructor.InnerStaticPrivateString("text") {
+      new TestAnonymousClassConstructor.InnerStaticPrivateString("text") {
       };
    }
 
    static void innerStaticPrivateStatic() {
-      TestAnonymousClassConstructor.InnerStaticPrivate var10001 = new TestAnonymousClassConstructor.InnerStaticPrivate(3L, 4) {
+      new TestAnonymousClassConstructor.InnerStaticPrivate(3L, 4) {
       };
    }
 
    void innerPublicString() {
-      TestAnonymousClassConstructor.InnerPublicString var10001 = new TestAnonymousClassConstructor.InnerPublicString("text") {
+      new TestAnonymousClassConstructor.InnerPublicString("text") {
       };
    }
 
    void innerPublic() {
-      TestAnonymousClassConstructor.InnerPublic var10001 = new TestAnonymousClassConstructor.InnerPublic(3L, 4) {
+      new TestAnonymousClassConstructor.InnerPublic(3L, 4) {
       };
    }
 
    void innerStaticPublicString() {
-      TestAnonymousClassConstructor.InnerStaticPublicString var10001 = new TestAnonymousClassConstructor.InnerStaticPublicString("text") {
+      new TestAnonymousClassConstructor.InnerStaticPublicString("text") {
       };
    }
 
    void innerStaticPublic() {
-      TestAnonymousClassConstructor.InnerStaticPublic var10001 = new TestAnonymousClassConstructor.InnerStaticPublic(3L, 4) {
+      new TestAnonymousClassConstructor.InnerStaticPublic(3L, 4) {
       };
    }
 
    static void innerStaticPublicStringStatic() {
-      TestAnonymousClassConstructor.InnerStaticPublicString var10001 = new TestAnonymousClassConstructor.InnerStaticPublicString("text") {
+      new TestAnonymousClassConstructor.InnerStaticPublicString("text") {
       };
    }
 
    static void innerStaticPublicStatic() {
-      TestAnonymousClassConstructor.InnerStaticPublic var10001 = new TestAnonymousClassConstructor.InnerStaticPublic(3L, 4) {
+      new TestAnonymousClassConstructor.InnerStaticPublic(3L, 4) {
       };
    }
 
gen_diffs.py pkg/TestAnonymousClassJ16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,12 +1,14 @@
 package pkg;
 
 public class TestAnonymousClassJ16 {
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    public void testNamelessTypeVirtual() {
-      <undefinedtype> printer = (<undefinedtype>)((<undefinedtype>)(new Object() {
+      <undefinedtype> printer = (<undefinedtype>)(new Object() {
          void println(String s) {
             System.out.println(s);
          }
-      }));
+      });
       printer.println("goodbye, world!");
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestAnonymousObject.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,7 +2,7 @@
 
 public class TestAnonymousObject {
    public void test() {
-      Object var10000 = new Object() {
+      new Object() {
          {
             System.out.println("Hi");
          }
gen_diffs.py pkg/TestArrayAssign.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,22 +3,18 @@
 public class TestArrayAssign {
    public void test(TestArrayAssign.Holder holder, int i, double inc) {
       for(int j = 0; j < i; ++j) {
-         double[] var10000 = holder.get();
-         var10000[j] += inc;
+         holder.get()[j] += inc;
       }
-
    }
 
    public void test1(TestArrayAssign.Holder holder, int i, double inc) {
-      double[] var10000 = holder.get();
-      var10000[i] += inc;
+      holder.get()[i] += inc;
    }
 
    public void test2(TestArrayAssign.Holder holder, int i, double inc) {
       for(int j = 0; j < i; ++j) {
          holder.a[j] += inc;
       }
-
    }
 
    public double test3(TestArrayAssign.Holder holder, int i) {
gen_diffs.py pkg/TestArrayAssign2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,7 +3,7 @@
 public class TestArrayAssign2 {
    public Object test(boolean b, Object[] s) {
       if (b) {
-         s = this.method(s);
+         s = (Object[])this.method(s);
       }
 
       return s;
gen_diffs.py pkg/TestArrayCopy.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,14 +6,7 @@
       int[] c = new int[len];
       int i = 0;
 
-      while(true) {
-         int var10001 = c[i];
-         int var10000 = i + c[i];
-         i += var10001;
-         if (var10000 >= len) {
-            return;
-         }
-
+      while((i += c[i]) < len) {
          System.arraycopy(c, i, a, len, len - i);
       }
    }
gen_diffs.py pkg/TestArrayDoWhile.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -8,8 +8,7 @@
       do {
          array[i - 1] = i;
          array[array.length - i] = i * 4;
-         ++i;
-      } while(i < array.length);
+      } while(++i < array.length);
 
       return array;
    }
gen_diffs.py pkg/TestArrayFieldAccess.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -33,13 +33,11 @@
       if (this.array[this.index]++ == 3) {
          System.out.println(this.array[this.index]);
       }
-
    }
 
    public void test6() {
       if (++this.array[this.index] == 3) {
          System.out.println(this.array[this.index]);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestArrayFieldAccess1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,10 +6,7 @@
    private int value;
 
    public void test() {
-      int var10002 = this.index + 5;
-      int var10004 = this.array[this.index + 5];
-      this.array[var10002] = this.array[this.index + 5] + 1;
-      this.value = var10004;
+      this.value = this.array[this.index + 5]++;
    }
 
    public void test1() {
@@ -17,10 +14,7 @@
    }
 
    public void test2() {
-      int var10002 = this.index + 5;
-      int var10004 = this.array[this.index + 5];
-      this.array[var10002] = this.array[this.index + 5] + 1;
-      this.value = var10004;
+      this.value = this.array[this.index + 5]++;
       if (this.value != 2) {
          System.out.println(this.value);
       }
@@ -36,26 +30,18 @@
    }
 
    public void test5() {
-      int var10001 = this.index + 5;
-      int var10003 = this.array[this.index + 5];
-      this.array[var10001] = this.array[this.index + 5] + 1;
-      if (var10003 == 3) {
+      if (this.array[this.index + 5]++ == 3) {
          System.out.println(this.array[this.index + 5]);
       }
-
    }
 
    public void test6() {
       if (++this.array[this.index + 5] == 3) {
          System.out.println(this.array[this.index + 5]);
       }
-
    }
 
    public void test7() {
-      int var10002 = this.index | 12;
-      int var10004 = this.array[this.index | 12];
-      this.array[var10002] = this.array[this.index | 12] + 1;
-      this.value = var10004;
+      this.value = this.array[this.index | 12]++;
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestArrayForeach.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -7,6 +7,5 @@
       for(int i : array) {
          System.out.println(i);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestArrayInitializations.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -12,7 +12,9 @@
    }
 
    public int[] test3(Random r) {
-      return new int[]{r.nextInt(10), r.nextInt(20)};
+      int[] ints = new int[]{0, r.nextInt(20)};
+      ints[0] = r.nextInt(10);
+      return ints;
    }
 
    public Object[] test4(Random r) {
@@ -78,6 +80,8 @@
    }
 
    public int[] test16(Random r) {
-      return new int[]{r.nextInt(10), r.nextInt(20), 30};
+      int[] ints = new int[]{0, r.nextInt(20), 30};
+      ints[0] = r.nextInt(10);
+      return ints;
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestArrayNewAccess.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,15 +2,15 @@
 
 public class TestArrayNewAccess {
    public void test() {
-      (new int[]{0, 1})[2] = 1;
+      new int[]{0, 1}[2] = 1;
    }
 
    public void test1() {
-      System.out.println((new int[]{0, 1})[2]);
+      System.out.println(new int[]{0, 1}[2]);
    }
 
    public void test2() {
-      System.out.println((new int[]{0, 1})[2] = 1);
+      System.out.println(new int[]{0, 1}[2] = 1);
    }
 
    public void test3() {
gen_diffs.py pkg/TestArrayPPMM.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,26 +2,19 @@
 
 public class TestArrayPPMM {
    public void test(int[] array, int i) {
-      ++i;
-      System.out.println(array[i]);
+      System.out.println(array[++i]);
    }
 
    public void test1(int[] array, int i) {
-      ++i;
-      int var10001 = array[i];
-      ++i;
-      this.accept(var10001, array[i]);
+      this.accept(array[++i], array[++i]);
    }
 
    public void test2(int[] array, int i) {
-      int var10001 = array[i];
-      ++i;
-      this.accept(var10001, array[i]);
+      this.accept(array[i], array[++i]);
    }
 
    public void test3(int[] array, int i) {
-      ++i;
-      this.accept(array[i], array[i]);
+      this.accept(array[++i], array[i]);
    }
 
    public void test4(int[] array, int i) {
@@ -41,9 +34,7 @@
    }
 
    public void test8(int[] array, int i) {
-      int var10001 = array[i++];
-      ++i;
-      this.accept(var10001, array[i]);
+      this.accept(array[i++], array[++i]);
    }
 
    private void accept(int i, int j) {
gen_diffs.py pkg/TestArrayPPMM1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,32 +2,20 @@
 
 public class TestArrayPPMM1 {
    public int[] test(int i) {
-      int[] var10000 = new int[1];
-      ++i;
-      var10000[0] = i;
-      return var10000;
+      return new int[]{++i};
    }
 
    public int[] test1(int i) {
       int[] var10000 = new int[]{i, 0};
-      ++i;
-      var10000[1] = i;
+      var10000[1] = ++i;
       return var10000;
    }
 
    public int[] test2(int i) {
-      int[] var10000 = new int[2];
-      ++i;
-      var10000[0] = i;
-      var10000[1] = i;
-      return var10000;
+      return new int[]{++i, i};
    }
 
    public int[] test3(int i) {
-      int[] var10000 = new int[2];
-      ++i;
-      var10000[0] = i++;
-      var10000[1] = i;
-      return var10000;
+      return new int[]{++i, ++i};
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestAssertConst.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,7 +3,6 @@
 public class TestAssertConst {
    public void test() {
       assert false;
-
    }
 
    public void test1() {
gen_diffs.py pkg/TestAssertJ16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,6 +3,5 @@
 public class TestAssertJ16 {
    public void test(int i) {
       assert i == 0;
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestAssertMerge.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,7 +1,7 @@
 package pkg;
 
 public class TestAssertMerge {
-   // $FF: synthetic field
+   // $QF: synthetic field
    static final boolean $assertionsDisabled = !TestAssertMerge.class.desiredAssertionStatus();
 
    public void test(int i, int j) {
gen_diffs.py pkg/TestAssertSwitchExpression.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,19 +1,11 @@
 package pkg;
 
 public class TestAssertSwitchExpression {
-   // $FF: synthetic field
-   static final boolean $assertionsDisabled = !TestAssertSwitchExpression.class.desiredAssertionStatus();
-
    public void test(int i, String s) {
-      if (!$assertionsDisabled) {
-         if (!s.equals(switch(i) {
-            case 1 -> "1";
-            case 2 -> "2";
-            default -> "Unknown";
-         })) {
-            throw new AssertionError();
-         }
-      }
-
+      assert s.equals(switch(i) {
+         case 1 -> "1";
+         case 2 -> "2";
+         default -> "Unknown";
+      });
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestAssignmentInDoWhile.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -27,13 +27,7 @@
       int[] array = new int[100];
       int x = 3;
 
-      while(x < 50) {
-         int var10001 = array[x];
-         int var10000 = x + array[x];
-         x += var10001;
-         if (var10000 >= 100) {
-            break;
-         }
+      while(x < 50 && (x = x + array[x]) < 100) {
       }
 
       System.out.println("Hi");
@@ -53,13 +47,7 @@
       int[] array = new int[100];
       int x = 3;
 
-      while(x < 50) {
-         int var10001 = array[x];
-         int var10000 = x + array[x];
-         x += var10001;
-         if (var10000 >= 100 || x <= 10) {
-            break;
-         }
+      while(x < 50 && (x = x + array[x]) < 100 && x > 10) {
       }
 
       System.out.println("Hi");
@@ -69,13 +57,7 @@
       int[] array = new int[100];
       int x = 3;
 
-      while(x < 50) {
-         int var10001 = array[x];
-         int var10000 = x + array[x];
-         x += var10001;
-         if (var10000 >= 100 && x <= 10) {
-            break;
-         }
+      while(x < 50 && ((x = x + array[x]) < 100 || x > 10)) {
       }
 
       System.out.println("Hi");
gen_diffs.py pkg/TestAssignmentInLoop.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -12,9 +12,8 @@
          System.out.println(i);
       }
 
-      for(int j = 0; j < 10; j += get()) {
+      for(int j = 0; j < 10; j = ++j + get()) {
          System.out.println(j);
-         ++j;
       }
 
       while((i = get()) == 0) {
@@ -24,7 +23,6 @@
       for(int j = 0; j < 3; j = get()) {
          System.out.println(j);
       }
-
    }
 
    private static int get() {
gen_diffs.py pkg/TestAssignmentSwitchExpression6.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -8,20 +8,20 @@
          --i;
          String var4 = directionStr.toLowerCase();
          switch(var4) {
-         case "north":
-         case "south":
-            var10000 = "y";
-            break;
-         case "east":
-         case "west":
-            var10000 = "x";
-            break;
-         case "up":
-         case "down":
-            var10000 = "z";
-            break;
-         default:
-            throw new IllegalStateException("Unexpected value: " + directionStr);
+            case "north":
+            case "south":
+               var10000 = "y";
+               break;
+            case "east":
+            case "west":
+               var10000 = "x";
+               break;
+            case "up":
+            case "down":
+               var10000 = "z";
+               break;
+            default:
+               throw new IllegalStateException("Unexpected value: " + directionStr);
          }
       }
 
gen_diffs.py pkg/TestBackwardsExceptionHandler.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,8 +4,7 @@
    static void testExtraReturn(int var0) {
       while(true) {
          try {
-            ++var0;
-            test(var0);
+            test(++var0);
             return;
          } catch (Exception var1) {
             var1.printStackTrace();
@@ -13,21 +12,14 @@
       }
    }
 
-   static void test(int param0) {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot read field "id" because "to" is null
-      //  at org.jetbrains.java.decompiler.code.cfg.ControlFlowGraph.setExceptionEdges(ControlFlowGraph.java)
-      //  at org.jetbrains.java.decompiler.code.cfg.ControlFlowGraph.buildBlocks(ControlFlowGraph.java)
-      //  at org.jetbrains.java.decompiler.code.cfg.ControlFlowGraph.<init>(ControlFlowGraph.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 0: goto 6
-      // 3: invokevirtual java/lang/Exception.printStackTrace ()V
-      // 6: iinc 0 1
-      // 9: iload 0
-      // a: invokestatic pkg/TestBackwardsExceptionHandler.test (I)V
-      // d: return
+   static void test(int var0) {
+      while(true) {
+         try {
+            test(++var0);
+            return;
+         } catch (Exception var1) {
+            var1.printStackTrace();
+         }
+      }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestBooleanSwitchExpression1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,20 +3,20 @@
 public class TestBooleanSwitchExpression1 {
    public void test(int x, int y) {
       switch(x) {
-      case 1:
-         if (y >= 0) {
-            return;
-         }
-         break;
-      case 2:
-         if (y <= 0) {
-            return;
-         }
-         break;
-      default:
-         if (y != 0) {
-            return;
-         }
+         case 1:
+            if (y >= 0) {
+               return;
+            }
+            break;
+         case 2:
+            if (y <= 0) {
+               return;
+            }
+            break;
+         default:
+            if (y != 0) {
+               return;
+            }
       }
 
       System.out.println("Nice");
@@ -26,20 +26,20 @@
       label20: {
          label19: {
             switch(x) {
-            case 1:
-               if (y < 0) {
-                  break label19;
-               }
-               break;
-            case 2:
-               if (y > 0) {
-                  break label19;
-               }
-               break;
-            default:
-               if (y == 0) {
-                  break label19;
-               }
+               case 1:
+                  if (y < 0) {
+                     break label19;
+                  }
+                  break;
+               case 2:
+                  if (y > 0) {
+                     break label19;
+                  }
+                  break;
+               default:
+                  if (y == 0) {
+                     break label19;
+                  }
             }
 
             System.out.println("Sad");
gen_diffs.py pkg/TestBooleanSwitchExpression2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,20 +3,20 @@
 public class TestBooleanSwitchExpression2 {
    public void test(String x, int y) {
       switch(x) {
-      case "a":
-         if (y >= 0) {
-            return;
-         }
-         break;
-      case "b":
-         if (y <= 0) {
-            return;
-         }
-         break;
-      default:
-         if (y != 0) {
-            return;
-         }
+         case "a":
+            if (y >= 0) {
+               return;
+            }
+            break;
+         case "b":
+            if (y <= 0) {
+               return;
+            }
+            break;
+         default:
+            if (y != 0) {
+               return;
+            }
       }
 
       System.out.println("Nice");
@@ -25,38 +25,38 @@
    public void test1(String x, int y) {
       byte var4 = -1;
       switch(x.hashCode()) {
-      case 97:
-         if (x.equals("a")) {
-            var4 = 0;
-         }
-         break;
-      case 98:
-         if (x.equals("b")) {
-            var4 = 1;
-         }
+         case 97:
+            if (x.equals("a")) {
+               var4 = 0;
+            }
+            break;
+         case 98:
+            if (x.equals("b")) {
+               var4 = 1;
+            }
       }
 
-      label31: {
-         label30: {
+      label30: {
+         label29: {
             switch(var4) {
-            case 0:
-               if (y < 0) {
-                  break label30;
-               }
-               break;
-            case 1:
-               if (y > 0) {
-                  break label30;
-               }
-               break;
-            default:
-               if (y == 0) {
-                  break label30;
-               }
+               case 0:
+                  if (y < 0) {
+                     break label29;
+                  }
+                  break;
+               case 1:
+                  if (y > 0) {
+                     break label29;
+                  }
+                  break;
+               default:
+                  if (y == 0) {
+                     break label29;
+                  }
             }
 
             System.out.println("Sad");
-            break label31;
+            break label30;
          }
 
          System.out.println("Nice");
gen_diffs.py pkg/TestBooleanSwitchExpression3.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,20 +3,20 @@
 public class TestBooleanSwitchExpression3 {
    public void test(String x, int y) {
       switch(x) {
-      case "BB":
-         if (y >= 0) {
-            return;
-         }
-         break;
-      case "Aa":
-         if (y <= 0) {
-            return;
-         }
-         break;
-      default:
-         if (y != 0) {
-            return;
-         }
+         case "BB":
+            if (y >= 0) {
+               return;
+            }
+            break;
+         case "Aa":
+            if (y <= 0) {
+               return;
+            }
+            break;
+         default:
+            if (y != 0) {
+               return;
+            }
       }
 
       System.out.println("Nice");
@@ -25,35 +25,35 @@
    public void test1(String x, int y) {
       byte var4 = -1;
       switch(x.hashCode()) {
-      case 2112:
-         if (x.equals("Aa")) {
-            var4 = 1;
-         } else if (x.equals("BB")) {
-            var4 = 0;
-         }
+         case 2112:
+            if (x.equals("Aa")) {
+               var4 = 1;
+            } else if (x.equals("BB")) {
+               var4 = 0;
+            }
       }
 
-      label31: {
-         label30: {
+      label30: {
+         label29: {
             switch(var4) {
-            case 0:
-               if (y < 0) {
-                  break label30;
-               }
-               break;
-            case 1:
-               if (y > 0) {
-                  break label30;
-               }
-               break;
-            default:
-               if (y == 0) {
-                  break label30;
-               }
+               case 0:
+                  if (y < 0) {
+                     break label29;
+                  }
+                  break;
+               case 1:
+                  if (y > 0) {
+                     break label29;
+                  }
+                  break;
+               default:
+                  if (y == 0) {
+                     break label29;
+                  }
             }
 
             System.out.println("Sad");
-            break label31;
+            break label30;
          }
 
          System.out.println("Nice");
gen_diffs.py pkg/TestBooleanSwitchExpression4.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,68 +2,19 @@
 
 public class TestBooleanSwitchExpression4 {
    public void test(int x, int y, int z) {
-      label37:
+      label35:
       switch(x) {
-      case 0:
-         if (y >= 0) {
-            return;
-         }
-         break;
-      case 1:
-         switch(y) {
          case 0:
-            break label37;
-         case 1:
-            return;
-         case 2:
-            while(z > 0) {
-               int var4;
-               z -= var4 = x / 2;
-               x = var4 + y;
-               y += z;
-               if (y % z == 0) {
-                  if (x >= 100) {
-                     return;
-                  }
-                  break label37;
-               }
-            }
-
-            if (z != 0) {
+            if (y >= 0) {
                return;
             }
-            break label37;
-         default:
-            if (y != z) {
-               return;
-            }
-            break label37;
-         }
-      default:
-         if (y != 0) {
-            return;
-         }
-      }
-
-      System.out.println("Nice");
-   }
-
-   public void test1(int x, int y, int z) {
-      label41: {
-         label40: {
-            label39:
-            switch(x) {
-            case 0:
-               if (y < 0) {
-                  break label40;
-               }
-               break;
-            case 1:
-               switch(y) {
+            break;
+         case 1:
+            switch(y) {
                case 0:
-                  break label40;
+                  break label35;
                case 1:
-                  break label39;
+                  return;
                case 2:
                   while(z > 0) {
                      int var4;
@@ -71,31 +22,80 @@
                      x = var4 + y;
                      y += z;
                      if (y % z == 0) {
-                        if (x < 100) {
-                           break label40;
+                        if (x >= 100) {
+                           return;
                         }
-                        break label39;
+                        break label35;
                      }
                   }
 
-                  if (z == 0) {
-                     break label40;
+                  if (z != 0) {
+                     return;
                   }
-                  break label39;
+                  break label35;
                default:
-                  if (y == z) {
-                     break label40;
+                  if (y != z) {
+                     return;
                   }
-                  break label39;
-               }
-            default:
-               if (y == 0) {
-                  break label40;
-               }
+                  break label35;
+            }
+         default:
+            if (y != 0) {
+               return;
+            }
+      }
+
+      System.out.println("Nice");
+   }
+
+   public void test1(int x, int y, int z) {
+      label39: {
+         label38: {
+            label37:
+            switch(x) {
+               case 0:
+                  if (y < 0) {
+                     break label38;
+                  }
+                  break;
+               case 1:
+                  switch(y) {
+                     case 0:
+                        break label38;
+                     case 1:
+                        break label37;
+                     case 2:
+                        while(z > 0) {
+                           int var4;
+                           z -= var4 = x / 2;
+                           x = var4 + y;
+                           y += z;
+                           if (y % z == 0) {
+                              if (x < 100) {
+                                 break label38;
+                              }
+                              break label37;
+                           }
+                        }
+
+                        if (z == 0) {
+                           break label38;
+                        }
+                        break label37;
+                     default:
+                        if (y == z) {
+                           break label38;
+                        }
+                        break label37;
+                  }
+               default:
+                  if (y == 0) {
+                     break label38;
+                  }
             }
 
             System.out.println("Sad");
-            break label41;
+            break label39;
          }
 
          System.out.println("Nice");
gen_diffs.py pkg/TestBooleanSwitchExpression5.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,43 +4,43 @@
    public void test(int x, int y, int z) {
       int a;
       switch(x) {
-      case 0:
-         if (y >= 0) {
-            return;
-         }
-
-         a = 5;
-         if (5 >= z) {
-            return;
-         }
-         break;
-      case 1:
-         if ((y > 0 ? (a = 17) : (a = -1)) >= z) {
-            return;
-         }
-         break;
-      case 2:
-         if (y > 0) {
-            a = 17;
-            if (17 >= z && 7 <= z) {
-               return;
-            }
-         } else {
-            if (3 >= z) {
+         case 0:
+            if (y >= 0) {
                return;
             }
 
-            a = -1;
-            if (-1 != a) {
+            a = 5;
+            if (5 >= z) {
                return;
             }
-         }
-         break;
-      default:
-         a = y;
-         if (y != 0) {
-            return;
-         }
+            break;
+         case 1:
+            if ((y > 0 ? (a = 17) : (a = -1)) >= z) {
+               return;
+            }
+            break;
+         case 2:
+            if (y > 0) {
+               a = 17;
+               if (17 >= z && 7 <= z) {
+                  return;
+               }
+            } else {
+               if (3 >= z) {
+                  return;
+               }
+
+               a = -1;
+               if (-1 != a) {
+                  return;
+               }
+            }
+            break;
+         default:
+            a = y;
+            if (y != 0) {
+               return;
+            }
       }
 
       System.out.println(a);
@@ -51,37 +51,37 @@
          int a;
          label39: {
             switch(x) {
-            case 0:
-               if (y < 0) {
-                  a = 5;
-                  if (5 < z) {
+               case 0:
+                  if (y < 0) {
+                     a = 5;
+                     if (5 < z) {
+                        break label39;
+                     }
+                  }
+                  break;
+               case 1:
+                  if ((y > 0 ? (a = 17) : (a = -1)) < z) {
                      break label39;
                   }
-               }
-               break;
-            case 1:
-               if ((y > 0 ? (a = 17) : (a = -1)) < z) {
-                  break label39;
-               }
-               break;
-            case 2:
-               if (y > 0) {
-                  a = 17;
-                  if (17 < z || 7 > z) {
+                  break;
+               case 2:
+                  if (y > 0) {
+                     a = 17;
+                     if (17 < z || 7 > z) {
+                        break label39;
+                     }
+                  } else if (3 < z) {
+                     a = -1;
+                     if (-1 == a) {
+                        break label39;
+                     }
+                  }
+                  break;
+               default:
+                  a = y;
+                  if (y == 0) {
                      break label39;
                   }
-               } else if (3 < z) {
-                  a = -1;
-                  if (-1 == a) {
-                     break label39;
-                  }
-               }
-               break;
-            default:
-               a = y;
-               if (y == 0) {
-                  break label39;
-               }
             }
 
             System.out.println("Sad");
gen_diffs.py pkg/TestCastObjectToPrimitive.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,17 +2,17 @@
 
 public class TestCastObjectToPrimitive {
    static Object object1 = null;
-   boolean castObject = object1;
-   boolean negatedObject = !object1;
-   boolean booleanXor = object1 ^ object1;
-   boolean isObjectTrue = object1;
-   boolean isObjectFalse = !object1;
-   boolean isObject6 = object1 == 6;
-   boolean booleanOr = object1 || object1;
-   int integerXor = object1 ^ 5;
-   short shorXor = (short)(object1 ^ 58);
-   long longXor = 8L ^ object1;
-   boolean integerGe = object1 <= 48;
+   boolean castObject = (Boolean)object1;
+   boolean negatedObject = !((Boolean)object1);
+   boolean booleanXor = (boolean)((Boolean)object1 ^ (Boolean)object1);
+   boolean isObjectTrue = (Boolean)object1;
+   boolean isObjectFalse = !((Boolean)object1);
+   boolean isObject6 = (Integer)object1 == 6;
+   boolean booleanOr = (Boolean)object1 || (Boolean)object1;
+   int integerXor = (Integer)object1 ^ 5;
+   short shorXor = (short)((Short)object1 ^ 58);
+   long longXor = 8L ^ (Long)object1;
+   boolean integerGe = (Integer)object1 <= 48;
 
    public void method() {
       if (object1) {
@@ -26,6 +26,5 @@
       while(object1) {
          System.out.println("Test3");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestClassSimpleBytecodeMapping.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -27,7 +27,6 @@
       } finally {
          System.out.println("Finally");
       }
-
    }
 
    void run(Runnable r) {
gen_diffs.py pkg/TestClassSwitch.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,46 +3,46 @@
 public class TestClassSwitch {
    public void testCaseOrder(int a) {
       switch(a) {
-      case 5:
-         System.out.println(5);
-      default:
-         return;
-      case 13:
-         System.out.println(13);
+         case 5:
+            System.out.println(5);
+         default:
+            return;
+         case 13:
+            System.out.println(13);
       }
    }
 
    public void testFallThrough(int a, int b) {
       int x = 17;
       switch(a) {
-      case 6:
-      case 7:
-      case 8:
-      case 9:
-      case 10:
-      case 11:
-      case 12:
-      case 14:
-      case 15:
-      case 16:
-      default:
-         break;
-      case 13:
-         System.out.println(13);
-      case 5:
-         System.out.println(5);
-         x += 17;
-         break;
-      case 17:
-         System.out.println(17);
-         if (b > 0) {
-            x = 5000;
-         }
-      case 18:
-      case 19:
-      case 20:
-         System.out.println("hi");
-         x += 170000;
+         case 6:
+         case 7:
+         case 8:
+         case 9:
+         case 10:
+         case 11:
+         case 12:
+         case 14:
+         case 15:
+         case 16:
+         default:
+            break;
+         case 13:
+            System.out.println(13);
+         case 5:
+            System.out.println(5);
+            x += 17;
+            break;
+         case 17:
+            System.out.println(17);
+            if (b > 0) {
+               x = 5000;
+            }
+         case 18:
+         case 19:
+         case 20:
+            System.out.println("hi");
+            x += 170000;
       }
 
       System.out.println(x);
gen_diffs.py pkg/TestClassTypes.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -16,7 +16,6 @@
       if (var7 == 1) {
          System.out.println();
       }
-
    }
 
    public boolean testBit(int var0) {
@@ -25,17 +24,16 @@
 
    public void testSwitchConsts(int a) {
       switch(a) {
-      case 88:
-         System.out.println("1");
-         break;
-      case 656:
-         System.out.println("2");
-         break;
-      case 65201:
-      case 65489:
-         System.out.println("3");
+         case 88:
+            System.out.println("1");
+            break;
+         case 656:
+            System.out.println("2");
+            break;
+         case 65201:
+         case 65489:
+            System.out.println("3");
       }
-
    }
 
    public void testAssignmentType(List list) {
gen_diffs.py pkg/TestClassVar.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -12,10 +12,8 @@
             if (this.field_boolean) {
                System.out.println();
             }
-
          }
       }
-
    }
 
    public Long testFieldSSAU1() {
@@ -36,6 +34,5 @@
             System.out.println();
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestCodeConstructs.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,7 +4,7 @@
    private int count = 0;
 
    void expressions() {
-      (new String()).hashCode();
+      new String().hashCode();
    }
 
    Integer fieldIncrement() {
gen_diffs.py pkg/TestComplexCondy.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -17,7 +17,7 @@
    }
 
    public static VarHandle testPrimitiveVarHandle() {
-      // $FF: Couldn't be decompiled
+      // $QF: Couldn't be decompiled
       // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
       // java.lang.NullPointerException: Cannot invoke "String.length()" because "signature" is null
       //  at org.jetbrains.java.decompiler.struct.gen.VarType.<init>(VarType.java)
gen_diffs.py pkg/TestComplexIfElseChain.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,80 +6,56 @@
    public void test() {
       Random randy = new Random();
       int result = randy.nextInt(11);
-      if (result != 0 && result != 1) {
-         if (result != 2 && result != 3) {
-            if (result != 4 && result != 5) {
-               if (result != 6 && result != 7) {
-                  if (result == 8 || result == 9) {
-                     System.out.println("e");
-                  }
-               } else {
-                  System.out.println("d");
-               }
-            } else {
-               System.out.println("c");
+      if (result == 0 || result == 1) {
+         System.out.println("a");
+      } else if (result == 2 || result == 3) {
+         System.out.println("b");
+      } else if (result == 4 || result == 5) {
+         System.out.println("c");
+      } else if (result == 6 || result == 7) {
+         System.out.println("d");
+      } else if (result == 8 || result == 9) {
+         System.out.println("e");
+      }
+   }
+
+   public void testInLoop() {
+      Random randy = new Random();
+      int result = randy.nextInt(11);
+
+      for(int i = 0; i < 10; ++i) {
+         if (result == 0 || result == 1) {
+            System.out.println("a");
+         } else if (result == 2 || result == 3) {
+            System.out.println("b");
+         } else if (result == 4 || result == 5) {
+            System.out.println("c");
+         } else if (result == 6 || result == 7) {
+            System.out.println("d");
+         } else if (result == 8 || result == 9) {
+            System.out.println("e");
+         }
+      }
+   }
+
+   public void testInLoop1() {
+      Random randy = new Random();
+
+      while(true) {
+         int result = randy.nextInt(11);
+         if (result == 0 || result == 1) {
+            System.out.println("a");
+         } else if (result == 2 || result == 3) {
+            System.out.println("b");
+         } else if (result == 4 || result == 5) {
+            System.out.println("c");
+         } else if (result != 6 && result != 7) {
+            if (result == 8 || result == 9) {
+               System.out.println("e");
+               return;
             }
          } else {
-            System.out.println("b");
-         }
-      } else {
-         System.out.println("a");
-      }
-
-   }
-
-   public void testInLoop() {
-      Random randy = new Random();
-      int result = randy.nextInt(11);
-
-      for(int i = 0; i < 10; ++i) {
-         if (result != 0 && result != 1) {
-            if (result != 2 && result != 3) {
-               if (result != 4 && result != 5) {
-                  if (result != 6 && result != 7) {
-                     if (result == 8 || result == 9) {
-                        System.out.println("e");
-                     }
-                  } else {
-                     System.out.println("d");
-                  }
-               } else {
-                  System.out.println("c");
-               }
-            } else {
-               System.out.println("b");
-            }
-         } else {
-            System.out.println("a");
-         }
-      }
-
-   }
-
-   public void testInLoop1() {
-      Random randy = new Random();
-
-      while(true) {
-         int result = randy.nextInt(11);
-         if (result != 0 && result != 1) {
-            if (result != 2 && result != 3) {
-               if (result != 4 && result != 5) {
-                  if (result != 6 && result != 7) {
-                     if (result == 8 || result == 9) {
-                        System.out.println("e");
-                        return;
-                     }
-                  } else {
-                     System.out.println("d");
-                  }
-               } else {
-                  System.out.println("c");
-               }
-            } else {
-               System.out.println("b");
-            }
-         } else {
-            System.out.println("a");
+            System.out.println("d");
          }
       }
    }
@@ -114,7 +90,6 @@
             System.out.println("a");
          }
       }
-
    }
 
    public void testInLoop3() {
@@ -122,16 +97,14 @@
 
       while(true) {
          int result = randy.nextInt(11);
-         if (result != 0 && result != 1) {
-            if (result != 2 && result != 3) {
-               if (result == 4 || result == 5 || result == 6 || result == 7 || result == 8 || result == 9) {
-                  return;
-               }
-            } else {
-               System.out.println("b");
+         if (result == 0 || result == 1) {
+            System.out.println("a");
+         } else if (result != 2 && result != 3) {
+            if (result == 4 || result == 5 || result == 6 || result == 7 || result == 8 || result == 9) {
+               return;
             }
          } else {
-            System.out.println("a");
+            System.out.println("b");
          }
       }
    }
@@ -142,59 +115,42 @@
       do {
          ++i;
          int result = randy.nextInt(11);
-         if (result != 0 && result != 1) {
-            if (result != 2 && result != 3) {
-               if (result != 4 && result != 5) {
-                  if (result != 6 && result != 7) {
-                     if (result == 8 || result == 9) {
-                        System.out.println("e");
-                     }
-                  } else {
-                     System.out.println("d");
-                  }
-               } else {
-                  System.out.println("c");
-               }
-            } else {
-               System.out.println("b");
-            }
-         } else {
-            System.out.println("a");
+         if (result == 0 || result == 1) {
+            System.out.println("a");
+         } else if (result == 2 || result == 3) {
+            System.out.println("b");
+         } else if (result == 4 || result == 5) {
+            System.out.println("c");
+         } else if (result == 6 || result == 7) {
+            System.out.println("d");
+         } else if (result == 8 || result == 9) {
+            System.out.println("e");
          }
       } while(i > 3);
-
    }
 
    public void testSwitch(int i) {
       Random randy = new Random();
       int result = randy.nextInt(11);
       switch(i) {
-      case 0:
-         System.out.println(1);
-         break;
-      case 1:
-         if (result != 0 && result != 1) {
-            if (result != 2 && result != 3) {
-               if (result != 4 && result != 5) {
-                  if (result != 6 && result != 7) {
-                     if (result == 8 || result == 9) {
-                        System.out.println("e");
-                     }
-                  } else {
-                     System.out.println("d");
-                  }
-               } else {
-                  System.out.println("c");
-               }
-            } else {
-               System.out.println("b");
-            }
-         } else {
-            System.out.println("a");
-         }
-         break;
-      case 2:
-         System.out.println(2);
+         case 0:
+            System.out.println(1);
+            break;
+         case 1:
+            if (result == 0 || result == 1) {
+               System.out.println("a");
+            } else if (result == 2 || result == 3) {
+               System.out.println("b");
+            } else if (result == 4 || result == 5) {
+               System.out.println("c");
+            } else if (result == 6 || result == 7) {
+               System.out.println("d");
+            } else if (result == 8 || result == 9) {
+               System.out.println("e");
+            }
+            break;
+         case 2:
+            System.out.println(2);
       }
 
       System.out.println("hi");
@@ -204,12 +160,13 @@
       Random randy = new Random();
       int result = randy.nextInt(11);
       switch(i) {
-      case 0:
-         System.out.println(1);
-         break;
-      case 1:
-         if (result != 0 && result != 1) {
-            if (result != 2 && result != 3) {
+         case 0:
+            System.out.println(1);
+            break;
+         case 1:
+            if (result == 0 || result == 1) {
+               System.out.println("a");
+            } else if (result != 2 && result != 3) {
                if (result == 4 || result == 5) {
                   System.out.println("c");
                   break;
@@ -227,14 +184,11 @@
             } else {
                System.out.println("b");
             }
-         } else {
-            System.out.println("a");
-         }
-
-         System.out.println(3);
-         break;
-      case 2:
-         System.out.println(2);
+
+            System.out.println(3);
+            break;
+         case 2:
+            System.out.println(2);
       }
 
       System.out.println("hi");
@@ -247,28 +201,18 @@
       try {
          System.out.println("try");
       } finally {
-         if (result != 0 && result != 1) {
-            if (result != 2 && result != 3) {
-               if (result != 4 && result != 5) {
-                  if (result != 6 && result != 7) {
-                     if (result == 8 || result == 9) {
-                        System.out.println("e");
-                     }
-                  } else {
-                     System.out.println("d");
-                  }
-               } else {
-                  System.out.println("c");
-               }
-            } else {
-               System.out.println("b");
-            }
-         } else {
-            System.out.println("a");
-         }
-
-      }
-
+         if (result == 0 || result == 1) {
+            System.out.println("a");
+         } else if (result == 2 || result == 3) {
+            System.out.println("b");
+         } else if (result == 4 || result == 5) {
+            System.out.println("c");
+         } else if (result == 6 || result == 7) {
+            System.out.println("d");
+         } else if (result == 8 || result == 9) {
+            System.out.println("e");
+         }
+      }
    }
 
    public void testFinally1() {
@@ -278,48 +222,30 @@
       try {
          System.out.println("try");
       } finally {
-         if (result != 0 && result != 1) {
-            if (result != 2 && result != 3) {
-               if (result != 4 && result != 5) {
-                  if (result != 6 && result != 7) {
-                     if (result == 8 || result == 9) {
-                        System.out.println("e");
-                     }
-                  } else {
-                     System.out.println("d");
-                  }
-               } else {
-                  System.out.println("c");
-               }
-            } else {
-               System.out.println("b");
-            }
-         } else {
-            System.out.println("a");
-         }
-
-      }
-
-      if (result != 0 && result != 1) {
-         if (result != 2 && result != 3) {
-            if (result != 4 && result != 5) {
-               if (result != 6 && result != 7) {
-                  if (result == 8 || result == 9) {
-                     System.out.println("e");
-                  }
-               } else {
-                  System.out.println("d");
-               }
-            } else {
-               System.out.println("c");
-            }
-         } else {
-            System.out.println("b");
-         }
-      } else {
+         if (result == 0 || result == 1) {
+            System.out.println("a");
+         } else if (result == 2 || result == 3) {
+            System.out.println("b");
+         } else if (result == 4 || result == 5) {
+            System.out.println("c");
+         } else if (result == 6 || result == 7) {
+            System.out.println("d");
+         } else if (result == 8 || result == 9) {
+            System.out.println("e");
+         }
+      }
+
+      if (result == 0 || result == 1) {
          System.out.println("a");
-      }
-
+      } else if (result == 2 || result == 3) {
+         System.out.println("b");
+      } else if (result == 4 || result == 5) {
+         System.out.println("c");
+      } else if (result == 6 || result == 7) {
+         System.out.println("d");
+      } else if (result == 8 || result == 9) {
+         System.out.println("e");
+      }
    }
 
    public void testFinally2() {
@@ -329,47 +255,37 @@
       try {
          System.out.println("try");
       } finally {
-         if (result != 0 && result != 1) {
-            if (result != 2 && result != 3) {
-               if (result != 4 && result != 5) {
-                  if (result != 6 && result != 7) {
-                     if (result == 8 || result == 9) {
-                        try {
-                           System.out.println("e");
-                        } finally {
-                           System.out.println("e1");
-                        }
-                     }
-                  } else {
-                     try {
-                        System.out.println("d");
-                     } finally {
-                        System.out.println("d1");
-                     }
-                  }
-               } else {
-                  try {
-                     System.out.println("c");
-                  } finally {
-                     System.out.println("c1");
-                  }
-               }
-            } else {
-               try {
-                  System.out.println("b");
-               } finally {
-                  System.out.println("b1");
-               }
-            }
-         } else {
+         if (result == 0 || result == 1) {
             try {
                System.out.println("a");
             } finally {
                System.out.println("a1");
             }
-         }
-
-      }
-
+         } else if (result == 2 || result == 3) {
+            try {
+               System.out.println("b");
+            } finally {
+               System.out.println("b1");
+            }
+         } else if (result == 4 || result == 5) {
+            try {
+               System.out.println("c");
+            } finally {
+               System.out.println("c1");
+            }
+         } else if (result == 6 || result == 7) {
+            try {
+               System.out.println("d");
+            } finally {
+               System.out.println("d1");
+            }
+         } else if (result == 8 || result == 9) {
+            try {
+               System.out.println("e");
+            } finally {
+               System.out.println("e1");
+            }
+         }
+      }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestCondy.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -10,15 +10,15 @@
    public static final TestCondy selfField = null;
 
    public static String testNull() {
-      return (String)ConstantBootstraps.nullConstant<"null">();
+      return /* $QF: constant dynamic */ null;
    }
 
    public static FakeEnum testEnum() {
-      return (FakeEnum)ConstantBootstraps.enumConstant<"FOO">();
+      return /* $QF: constant dynamic */ FakeEnum.FOO;
    }
 
    public static Class testPrimitiveClass() {
-      return (Class)ConstantBootstraps.primitiveClass<"V">();
+      return /* $QF: constant dynamic */ void.class;
    }
 
    public static Class testWrongPrimitiveClass() {
@@ -26,11 +26,11 @@
    }
 
    public static Class testGetStaticFinal() {
-      return (Integer)ConstantBootstraps.getStaticFinal<"field",TestCondy>();
+      return /* $QF: constant dynamic */ field;
    }
 
    public static Class testGetSelfStaticFinal() {
-      return (TestCondy)ConstantBootstraps.getStaticFinal<"selfField">();
+      return /* $QF: constant dynamic */ selfField;
    }
 
    public static VarHandle testStaticVarHandle() {
gen_diffs.py pkg/TestConstructorInvoc.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -5,6 +5,6 @@
    }
 
    public void test() {
-      (new TestConstructorInvoc()).m(10);
+      new TestConstructorInvoc().m(10);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestConstructorSwitchExpression2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,8 +3,8 @@
 public class TestConstructorSwitchExpression2 {
    public TestConstructorSwitchExpression2(int i) {
       switch(i) {
-      default:
-         this((String)null);
+         default:
+            this(null);
       }
    }
 
gen_diffs.py pkg/TestConstructorSwitchExpression3.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -11,15 +11,15 @@
    }
 
    private static int get() {
-      return (new Random()).nextInt(3);
+      return new Random().nextInt(3);
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static TestConstructorSwitchExpression3[] $values() {
       return new TestConstructorSwitchExpression3[]{T1, T2};
    }
 
-   // $FF: Failed to inline enum fields
+   // $QF: Failed to inline enum fields
    // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    static {
       T1 = new TestConstructorSwitchExpression3(switch(get()) {
gen_diffs.py pkg/TestConstType.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,13 +6,12 @@
 
    public void setLineBreak(char os) {
       switch(os) {
-      case 'u':
-         this.lineBreak = '\r';
-         break;
-      case 'w':
-         this.lineBreak = '\n';
+         case 'u':
+            this.lineBreak = '\r';
+            break;
+         case 'w':
+            this.lineBreak = '\n';
       }
-
    }
 
    public void init() {
@@ -75,23 +74,23 @@
    public int getTypeMaxValue(char type) {
       int maxValue;
       switch(type) {
-      case 'B':
-         maxValue = 127;
-         break;
-      case 'C':
-         maxValue = 65535;
-         break;
-      case 'S':
-         maxValue = 32767;
-         break;
-      case 'X':
-         maxValue = 128;
-         break;
-      case 'Y':
-         maxValue = 32768;
-         break;
-      default:
-         maxValue = Integer.MAX_VALUE;
+         case 'B':
+            maxValue = 127;
+            break;
+         case 'C':
+            maxValue = 65535;
+            break;
+         case 'S':
+            maxValue = 32767;
+            break;
+         case 'X':
+            maxValue = 128;
+            break;
+         case 'Y':
+            maxValue = 32768;
+            break;
+         default:
+            maxValue = Integer.MAX_VALUE;
       }
 
       return maxValue;
gen_diffs.py pkg/TestDefiniteAssignment.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -8,7 +8,6 @@
       if (v > 0 && (k = System.in.read()) >= 0) {
          System.out.println(k);
       }
-
    }
 
    void testExample16$1$$2(int n) {
@@ -41,9 +40,11 @@
    }
 
    void testAssignments(int n, boolean bool) {
-      int a;
-      if (bool && (n > 0 || (a = -n) > 100)) {
-         System.out.println(a);
+      if (bool) {
+         int a = n;
+         if (n > 0 || (a = -n) > 100) {
+            System.out.println(a);
+         }
       }
 
       int b;
@@ -53,17 +54,13 @@
          System.out.println("b");
       }
 
-      double cFake;
-      label38: {
-         cFake = 0.01;
-         System.out.println(cFake);
-         if ((double)n < 1.0 - (double)n && (cFake = (double)(n + 5)) > cFake * cFake - cFake / 2.0
-            ? !((double)n > cFake)
-            : !((double)n < 5.0 - (cFake = (double)n))) {
-            cFake += 5.0;
-         }
-         break label38;
-
+      double cFake = 0.01;
+      System.out.println(cFake);
+      if ((double)n < 1.0 - (double)n && (cFake = (double)(n + 5)) > cFake * cFake - cFake / 2.0
+         ? !((double)n > cFake)
+         : !((double)n < 5.0 - (cFake = (double)n))) {
+         cFake += 5.0;
+      } else {
          System.out.println(cFake);
          cFake += 2.0;
       }
@@ -73,7 +70,6 @@
       if ((d = (double)n) > 0.0) {
          System.out.println(d);
       }
-
    }
 
    void testBooleanNormalness(int n) {
gen_diffs.py pkg/TestDoubleBraceInitializersJ17.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -27,17 +27,17 @@
 
    public static enum TestEnum {
       A {
-         private {
+         {
             System.out.println("A");
          }
       },
       B {
-         private {
+         {
             System.out.println("B");
          }
       };
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       private static TestDoubleBraceInitializersJ17.TestEnum[] $values() {
          return new TestDoubleBraceInitializersJ17.TestEnum[]{A, B};
       }
@@ -45,13 +45,13 @@
 
    public static enum TestEnum1 {
       A {
-         private {
+         {
             System.out.println("A");
             this.field = 1;
          }
       },
       B {
-         private {
+         {
             System.out.println("B");
             this.field = 2;
          }
@@ -59,7 +59,7 @@
 
       public int field;
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       private static TestDoubleBraceInitializersJ17.TestEnum1[] $values() {
          return new TestDoubleBraceInitializersJ17.TestEnum1[]{A, B};
       }
gen_diffs.py pkg/TestDoublePopAfterJump.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,129 +1,58 @@
 package pkg;
 
+import java.io.PrintStream;
+
 public final class TestDoublePopAfterJump {
-   public static final double phiApproximation(int param0, int param1, int param2) {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.IndexOutOfBoundsException: Index -1 out of bounds for length 0
-      //   at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100)
-      //   at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106)
-      //   at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302)
-      //   at java.base/java.util.Objects.checkIndex(Objects.java:385)
-      //   at java.base/java.util.ArrayList.get(ArrayList.java:427)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.processBlock(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.processStatement(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: iload 0
-      // 01: iload 1
-      // 02: iload 2
-      // 03: bipush 0
-      // 04: dup2
-      // 05: if_icmple 13
-      // 08: dup2_x2
-      // 09: pop2
-      // 0a: dup_x1
-      // 0b: iadd
-      // 0c: dup2_x2
-      // 0d: pop2
-      // 0e: bipush 1
-      // 0f: iadd
-      // 10: goto 04
-      // 13: pop
-      // 14: pop
-      // 15: i2d
-      // 16: swap
-      // 17: i2d
-      // 18: ddiv
-      // 19: dreturn
+   public static final double phiApproximation(int var0, int var1, int var2) {
+      int var10000 = var0;
+      int var10001 = var1;
+      int var10002 = var2;
+
+      for(int var10003 = 0; var10002 > var10003; var10003 += 1) {
+         int var10004 = var10000 + var10001;
+         var10000 = var10001;
+         var10001 = var10004;
+      }
+
+      return (double)var10001 / (double)var10000;
    }
 
    public static final void fizzBuzz() {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.IndexOutOfBoundsException: Index -1 out of bounds for length 0
-      //   at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100)
-      //   at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106)
-      //   at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302)
-      //   at java.base/java.util.Objects.checkIndex(Objects.java:385)
-      //   at java.base/java.util.ArrayList.get(ArrayList.java:427)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.processBlock(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.processStatement(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 03: bipush 0
-      // 04: dup
-      // 05: bipush 100
-      // 07: isub
-      // 08: ifgt 4c
-      // 0b: bipush 1
-      // 0c: iadd
-      // 0d: dup
-      // 0e: bipush 3
-      // 0f: irem
-      // 10: ifne 1c
-      // 13: swap
-      // 14: dup
-      // 15: ldc "Fizz"
-      // 17: invokevirtual java/io/PrintStream.print (Ljava/lang/String;)V
-      // 1a: swap
-      // 1b: ineg
-      // 1c: dup
-      // 1d: ifgt 21
-      // 20: ineg
-      // 21: dup
-      // 22: bipush 5
-      // 23: irem
-      // 24: ifne 30
-      // 27: swap
-      // 28: dup
-      // 29: ldc "Buzz"
-      // 2b: invokevirtual java/io/PrintStream.print (Ljava/lang/String;)V
-      // 2e: swap
-      // 2f: ineg
-      // 30: dup
-      // 31: ifgt 3e
-      // 34: ineg
-      // 35: swap
-      // 36: dup
-      // 37: invokevirtual java/io/PrintStream.println ()V
-      // 3a: swap
-      // 3b: goto 04
-      // 3e: dup_x1
-      // 3f: invokestatic java/lang/Integer.toString (I)Ljava/lang/String;
-      // 42: invokevirtual java/io/PrintStream.println (Ljava/lang/String;)V
-      // 45: getstatic pkg/TestDoublePopAfterJump.java/lang/System/out Ljava/io/PrintStream;
-      // 48: swap
-      // 49: goto 04
-      // 4c: pop
-      // 4d: pop
-      // 4e: return
+      PrintStream var10000 = System.out;
+      int var10001 = 0;
+
+      while(var10001 - 100 <= 0) {
+         var10001 += 1;
+         if (var10001 % 3 == 0) {
+            var10000.print("Fizz");
+            var10001 = -var10001;
+         }
+
+         if (var10001 <= 0) {
+            var10001 = -var10001;
+         }
+
+         if (var10001 % 5 == 0) {
+            var10000.print("Buzz");
+            var10001 = -var10001;
+         }
+
+         if (var10001 <= 0) {
+            int var11 = -var10001;
+            var10000.println();
+            var10001 = var11;
+         } else {
+            var10000.println(Integer.toString(var10001));
+            var10000 = java/lang/System/out;
+         }
+      }
    }
 
    public static final void fizzBuzzReduced() {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.IndexOutOfBoundsException: Index -1 out of bounds for length 0
-      //   at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100)
-      //   at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106)
-      //   at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302)
-      //   at java.base/java.util.Objects.checkIndex(Objects.java:385)
-      //   at java.base/java.util.ArrayList.get(ArrayList.java:427)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.processBlock(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.processStatement(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 0: bipush 0
-      // 1: bipush 0
-      // 2: dup
-      // 3: ifgt 9
-      // 6: goto 2
-      // 9: pop
-      // a: pop
-      // b: return
+      boolean var10000 = false;
+      byte var10001 = 0;
+
+      while(var10001 <= 0) {
+      }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestDoWhileMerge.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,15 +3,14 @@
 public class TestDoWhileMerge {
    public void test(boolean b, int j) {
       for(int i = 0; i < j; ++i) {
-         System.out.println(i);
-         ++i;
-         if (i == 30) {
-            return;
-         }
+         do {
+            System.out.println(i);
+            if (++i == 30) {
+               return;
+            }
+         } while(b && i < 40);
 
-         if (!b || i >= 40) {
-            System.out.println("test");
-         }
+         System.out.println("test");
       }
 
       System.out.println("after");
@@ -21,17 +20,12 @@
       for(int i = 0; i < j; ++i) {
          System.out.println(1);
 
-         while(true) {
+         do {
             System.out.println(i);
-            ++i;
-            if (i == 30) {
+            if (++i == 30) {
                return;
             }
-
-            if (!b || i >= 40) {
-               break;
-            }
-         }
+         } while(!b || i >= 40);
       }
 
       System.out.println("after");
@@ -43,8 +37,7 @@
 
          while(true) {
             System.out.println(i);
-            ++i;
-            if (i == 30) {
+            if (++i == 30) {
                return;
             }
 
@@ -55,6 +48,5 @@
             System.out.println(j);
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestDoWhileTrue.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,9 +4,7 @@
    public void test() {
       int x = 0;
 
-      do {
-         ++x;
-      } while(x < 100);
-
+      while(++x < 100) {
+      }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestDuplicateLocals.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -53,12 +53,12 @@
    }
 
    public static Integer test7(int var0) {
-      return (new HashMap<Integer, Integer>()).computeIfAbsent(var0, var0x -> var0x + 1);
+      return new HashMap<Integer, Integer>().computeIfAbsent(var0, var0x -> var0x + 1);
    }
 
    public class Inner {
       public Integer test7(int var1) {
-         return (new HashMap<Integer, Integer>()).computeIfAbsent(var1, var1x -> var1x + TestDuplicateLocals.this.i);
+         return new HashMap<Integer, Integer>().computeIfAbsent(var1, var1x -> var1x + TestDuplicateLocals.this.i);
       }
    }
 
gen_diffs.py pkg/TestDuplicateSwitchLocals.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,27 +3,28 @@
 public class TestDuplicateSwitchLocals {
    void test(int foo) {
       switch(foo) {
-      case 0:
-         int x = 10;
+         case 0:
+            int x = 10;
 
-         for(int i = 0; i < x; ++i) {
-            System.out.println(i);
+            for(int i = 0; i < x; ++i) {
+               System.out.println(i);
+            }
+            break;
+         case 1:
+            int y = 11;
+
+            for(int i = 0; i < y; ++i) {
+               System.out.println(i);
+            }
+            break;
+         case 2: {
+            int z = 2;
+            System.out.println(z);
          }
-         break;
-      case 1:
-         int y = 11;
-
-         for(int i = 0; i < y; ++i) {
-            System.out.println(i);
+         case 3: {
+            int z = 3;
+            System.out.println(z);
          }
-         break;
-      case 2:
-         int z = 2;
-         System.out.println(z);
-      case 3:
-         int z = 3;
-         System.out.println(z);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestEmptyBlocks.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -15,11 +15,10 @@
          ++i;
       }
 
-      while((new Random()).nextBoolean()) {
+      while(new Random().nextBoolean()) {
       }
 
-      if ((new Random()).nextBoolean()) {
+      if (new Random().nextBoolean()) {
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestEnhancedForLoops.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -9,20 +9,17 @@
       for(int number : numbers) {
          System.out.println(number);
       }
-
    }
 
    public void forItterator() {
       for(String string : new ArrayList()) {
          System.out.println(string);
       }
-
    }
 
    public void forItteratorUnboxing() {
       for(int i : new ArrayList()) {
          System.out.println("Value: " + i);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestEnum.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -20,7 +20,7 @@
    }
 
    private TestEnum() {
-      this("?", (TestEnum.Type)null);
+      this("?", null);
    }
 
    private TestEnum(@Deprecated String s, TestEnum.Type t) {
@@ -29,23 +29,22 @@
 
    private void testSwitch() {
       switch(this) {
-      case E1:
-         System.out.println("E1");
-         break;
-      case E2:
-         System.out.println("E2");
-         break;
-      case E3:
-         System.out.println("E3");
-         break;
-      case E4:
-         System.out.println("E4");
+         case E1:
+            System.out.println("E1");
+            break;
+         case E2:
+            System.out.println("E2");
+            break;
+         case E3:
+            System.out.println("E3");
+            break;
+         case E4:
+            System.out.println("E4");
       }
 
       switch(TestEnum.Type.ODD) {
-      case ODD:
-         System.out.println("ODD");
-      default:
+         case ODD:
+            System.out.println("ODD");
       }
    }
 
gen_diffs.py pkg/TestEnumArrayStaticInit.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -19,6 +19,5 @@
       for(TestEnumArrayStaticInit e : values) {
          VALUES[e.v] = e;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestEnumStaticField.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,7 +1,7 @@
 package pkg;
 
 public enum TestEnumStaticField {
-   public static Integer field;
    TEST_1,
    TEST_2;
+   public static Integer field;
 }
\ No newline at end of file
gen_diffs.py pkg/TestEnumStaticField2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,8 +1,7 @@
 package pkg;
 
 public enum TestEnumStaticField2 {
-   TEST_1;
-
+   TEST_1,
+   TEST_2;
    public static Integer field;
-   TEST_2;
 }
\ No newline at end of file
gen_diffs.py pkg/TestEnumSwitchEmpty.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,9 +4,34 @@
 
 public class TestEnumSwitchEmpty {
    public void test() {
-      ElementType et = ElementType.TYPE;
-      ElementType et2 = ElementType.TYPE;
-      int var10000 = null.$SwitchMap$java$lang$annotation$ElementType[et.ordinal()];
-      var10000 = null.$SwitchMap$java$lang$annotation$ElementType[et2.ordinal()];
+      // $QF: Couldn't be decompiled
+      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
+      // java.lang.NullPointerException: Cannot invoke "String.contains(java.lang.CharSequence)" because "text" is null
+      //  at org.jetbrains.java.decompiler.util.TextBuffer.addAllClassTokens(TextBuffer.java)
+      //  at org.jetbrains.java.decompiler.util.TextBuffer.appendAllClasses(TextBuffer.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.FieldExprent.toJava(FieldExprent.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.ArrayExprent.toJava(ArrayExprent.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent.toJava(AssignmentExprent.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.listToJava(ExprProcessor.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.BasicBlockStatement.toJava(BasicBlockStatement.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement.toJava(RootStatement.java)
+      //  at org.jetbrains.java.decompiler.main.ClassWriter.methodToJava(ClassWriter.java)
+      //
+      // Bytecode:
+      // 00: getstatic java/lang/annotation/ElementType.TYPE Ljava/lang/annotation/ElementType;
+      // 03: astore 1
+      // 04: getstatic java/lang/annotation/ElementType.TYPE Ljava/lang/annotation/ElementType;
+      // 07: astore 2
+      // 08: getstatic pkg/TestEnumSwitchEmpty$1.$SwitchMap$java$lang$annotation$ElementType [I
+      // 0b: aload 1
+      // 0c: invokevirtual java/lang/annotation/ElementType.ordinal ()I
+      // 0f: iaload
+      // 10: pop
+      // 11: getstatic pkg/TestEnumSwitchEmpty$1.$SwitchMap$java$lang$annotation$ElementType [I
+      // 14: aload 2
+      // 15: invokevirtual java/lang/annotation/ElementType.ordinal ()I
+      // 18: iaload
+      // 19: pop
+      // 1a: return
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestExceptionElse.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -8,24 +8,19 @@
 
       while(!numbers.isEmpty()) {
          Number number = numbers.removeFirst();
-         if (!(number instanceof Integer)) {
-            if (numbers.size() != 4 || !(number instanceof Long)) {
-               if (!(number instanceof Double)) {
-                  if (numbers.size() != 3 || !(number instanceof Float)) {
-                     throw new RuntimeException("Not a valid number");
-                  }
+         if (number instanceof Integer) {
+            System.out.println(1);
+         } else if (numbers.size() == 4 && number instanceof Long) {
+            System.out.println(2);
+         } else if (!(number instanceof Double)) {
+            if (numbers.size() != 3 || !(number instanceof Float)) {
+               throw new RuntimeException("Not a valid number");
+            }
 
-                  System.out.println("here");
-               } else {
-                  System.out.println(3);
-               }
-            } else {
-               System.out.println(2);
-            }
+            System.out.println("here");
          } else {
-            System.out.println(1);
+            System.out.println(3);
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestExtendsList.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,10 +2,10 @@
 
 public class TestExtendsList {
    static <T extends Comparable<? super T>> T m1(T t) {
-      return (T)null;
+      return null;
    }
 
    static <T extends Object & Comparable<? super T>> T m2(T t) {
-      return (T)null;
+      return null;
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestFieldSingleAccess.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,11 +4,9 @@
    public Integer field;
 
    public final void test() {
-      Integer var10000 = this.field;
       if (this.field != null) {
-         System.out.println(var10000);
+         System.out.println(this.field);
       }
-
    }
 
    public final void test1() {
gen_diffs.py pkg/TestFinallyBlockVariableUse.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,38 +1,25 @@
 package pkg;
 
 public class TestFinallyBlockVariableUse {
-   // $FF: Could not verify finally blocks. A semaphore variable has been added to preserve control flow.
-   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    public int test(String s, int i, int j) {
       System.out.println("a");
-      boolean var10 = false;
 
       int e;
       try {
-         var10 = true;
          System.out.println("b");
 
          try {
             i = Integer.parseInt(s) - j;
             e = i;
-            var10 = false;
-         } catch (NumberFormatException var11) {
+         } catch (NumberFormatException var10) {
             i = j;
-            throw var11;
+            throw var10;
          }
       } finally {
-         if (var10) {
-            int id = i - j;
-            if (id > 0) {
-               this.accept(new Object[]{id, s, i, j});
-            }
-
+         int id = i - j;
+         if (id > 0) {
+            this.accept(new Object[]{id, s, i, j});
          }
-      }
-
-      int id = i - j;
-      if (id > 0) {
-         this.accept(new Object[]{id, s, i, j});
       }
 
       return e;
gen_diffs.py pkg/TestFinallyThrow.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,20 +6,15 @@
          try {
             System.out.println(1);
          } finally {
-            label127: {
-               try {
-                  if (!b) {
-                     break label127;
-                  }
-               } catch (Exception var22) {
-                  throw var22;
-               } finally {
-                  System.out.println(2);
+            try {
+               if (b) {
+                  return;
                }
-
-               return;
+            } catch (Exception var22) {
+               throw var22;
+            } finally {
+               System.out.println(2);
             }
-
          }
       }
    }
gen_diffs.py pkg/TestFloatInvertedIfConditionEarlyExit.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -13,6 +13,5 @@
             System.out.println("Hello " + f);
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestForContinue.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -7,6 +7,5 @@
             System.out.println(i);
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestForCyclicVarDef.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -8,18 +8,16 @@
             var3 = var9 - -15.01F;
             System.out.println("Hi");
          }
-
       }
    }
 
    public void test1() {
       boolean var9 = true;
 
-      for(float var9 = 22.22F; var9 > 133.07F; var9 = var3 * 29.43F) {
-         var3 = var9 - -15.01F;
+      for(float var9x = 22.22F; var9x > 133.07F; var9x = var3 * 29.43F) {
+         var3 = var9x - -15.01F;
          System.out.println("Hi");
       }
-
    }
 
    public void testOk() {
@@ -28,6 +26,5 @@
          var9 -= -15.01F;
          System.out.println("Hi");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestForeachCrash.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -5,25 +5,20 @@
 public class TestForeachCrash {
    public void test() {
       int[][] vvv1 = new int[0][];
-      int[][] var2 = vvv1;
-      int var3 = vvv1.length;
-      int var4 = 0;
 
-      while(var4 < var3) {
-         int[] var10000 = var2[var4];
+      for(int[] vvv2 : vvv1) {
          switch(1) {
-         case 0:
-            try {
-               ElementType vvv8 = ElementType.METHOD;
-            } catch (Exception var10) {
-               int var10002 = vvv1[0][0]++;
-            } finally {
-               ;
-            }
-         default:
-            ++var4;
+            case 0:
+               try {
+                  ElementType vvv8 = ElementType.METHOD;
+               } catch (Exception var10) {
+               } finally {
+                  ;
+               }
+            default:
+               int var4;
+               ++var4;
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestForeachMultiDimensionalArray.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -5,25 +5,20 @@
 public class TestForeachMultiDimensionalArray {
    public void test() {
       int[][] vvv1 = new int[0][];
-      int[][] var2 = vvv1;
-      int var3 = vvv1.length;
-      int var4 = 0;
 
-      while(var4 < var3) {
-         int[] var10000 = var2[var4];
+      for(int[] vvv2 : vvv1) {
          switch(1) {
-         case 0:
-            try {
-               ElementType vvv8 = ElementType.METHOD;
-            } catch (Exception var10) {
-               int var10002 = vvv1[0][0]++;
-            } finally {
-               ;
-            }
-         default:
-            ++var4;
+            case 0:
+               try {
+                  ElementType vvv8 = ElementType.METHOD;
+               } catch (Exception var10) {
+               } finally {
+                  ;
+               }
+            default:
+               int var4;
+               ++var4;
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestForeachMultipleLoops.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -9,41 +9,27 @@
       if (a != null) {
          System.out.println(a);
       } else {
-         Iterator var4 = map.entrySet().iterator();
-
-         while(true) {
-            while(true) {
-               Entry<Integer, String> entry;
-               while(true) {
-                  if (!var4.hasNext()) {
-                     return;
-                  }
-
-                  entry = (Entry)var4.next();
-                  String s = entry.getValue();
-                  if (a == null) {
-                     (new StringBuilder()).append(s).append(s).toString();
-                     break;
-                  }
-
-                  if (s == null) {
-                     s = "hello";
-                     break;
-                  }
+         for(Entry<Integer, String> entry : map.entrySet()) {
+            String s = entry.getValue();
+            if (a == null) {
+               s = s + s;
+            } else {
+               if (s != null) {
+                  continue;
                }
 
-               Object v = entry.getValue();
-               if (v == null) {
-                  if (i == 3) {
-                     continue;
-                  }
+               s = "hello";
+            }
 
-                  System.out.println("if");
-                  break;
+            Object v = entry.getValue();
+            if (v == null) {
+               if (i == 3) {
+                  continue;
                }
 
+               System.out.println("if");
+            } else {
                System.out.println("else");
-               break;
             }
 
             try {
@@ -72,7 +58,7 @@
                   entry = (Entry)var4.next();
                   String s = entry.getValue();
                   if (a == null) {
-                     (new StringBuilder()).append(s).append(s).toString();
+                     s = s + s;
                      break;
                   }
 
gen_diffs.py pkg/TestForeachVardef.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,12 +1,16 @@
 package pkg;
 
+import java.util.Iterator;
 import java.util.List;
 
 public class TestForeachVardef {
    public String test(List<String> s) {
       String t = null;
       if (s.size() > 10) {
-         for(t : s) {
+         Iterator<String> iterator = s.iterator();
+
+         while(iterator.hasNext()) {
+            t = iterator.next();
             System.out.println(t);
          }
       } else {
@@ -19,7 +23,10 @@
    public int testArray(int[] a) {
       int t = 0;
       if (a.length > 10) {
-         for(t : a) {
+         int l = a.length;
+
+         for(int i = 0; i < l; ++i) {
+            t = a[i];
             System.out.println(t);
          }
       } else {
gen_diffs.py pkg/TestGenericCastCall.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -30,7 +30,7 @@
 
    public class Inner2<T> extends TestGenericCastCall.Inner<T> {
       T val() {
-         return (T)null;
+         return null;
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestGenericCasts.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -7,7 +7,7 @@
 
 public class TestGenericCasts {
    public void test1(Consumer<String> c) {
-      c.accept((String)null);
+      c.accept(null);
    }
 
    public void test2(Function<String, List<String>> f) {
@@ -22,7 +22,6 @@
             System.out.println(s);
          }
       }
-
    }
 
    public void test4(Collection<String> c) {
gen_diffs.py pkg/TestGenericCastSuper.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -12,7 +12,7 @@
       }
 
       public TestGenericCastSuper<T>.Inner<? extends TestGenericCastSuper<T>> get() {
-         return (TestGenericCastSuper.Inner)super.get();
+         return (TestGenericCastSuper<T>.Inner<? extends TestGenericCastSuper<T>>)super.get();
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestGenericMap.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -7,7 +7,7 @@
    public Map<String, TestGenericMap.Inner<?>> field = new HashMap<>();
 
    public <T extends Number> TestGenericMap.Inner<T> get(String s) {
-      return this.field.get(s);
+      return (TestGenericMap.Inner<T>)this.field.get(s);
    }
 
    public <T extends Number> TestGenericMap.Inner<?> get1(String s) {
@@ -24,7 +24,7 @@
 
    public class Inner<T> {
       T get() {
-         return (T)null;
+         return null;
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestGenericMapEntireClasspath.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -7,7 +7,7 @@
    public Map<String, TestGenericMapEntireClasspath.Inner<?>> field = new HashMap<>();
 
    public <T extends Number> TestGenericMapEntireClasspath.Inner<T> get(String s) {
-      return this.field.get(s);
+      return (TestGenericMapEntireClasspath.Inner<T>)this.field.get(s);
    }
 
    public <T extends Number> TestGenericMapEntireClasspath.Inner<?> get1(String s) {
@@ -24,7 +24,7 @@
 
    public class Inner<T> {
       T get() {
-         return (T)null;
+         return null;
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestGenericMapInput.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -8,6 +8,5 @@
       for(N item : source) {
          map.put(item.toString(), item);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestGenerics.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -12,7 +12,7 @@
    A[] aArray = (A[])(new Object[10]);
 
    public void genericAllocation() {
-      this.aArray = (A[])((A[])(new Object[20]));
+      this.aArray = (A[])(new Object[20]);
    }
 
    public static void genericInference() {
@@ -33,14 +33,12 @@
       for(String s : field.keySet()) {
          System.out.println(s);
       }
-
    }
 
    public void genericForEachWithCast() {
       for(String s : llstring.get(0)) {
          System.out.println(s);
       }
-
    }
 
    public <T extends Number> void genericSuperUp() {
@@ -49,7 +47,6 @@
       for(Number number : bytes) {
          list.add((T)number);
       }
-
    }
 
    public static class Maps {
gen_diffs.py pkg/TestGenericsHierarchy.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -14,10 +14,10 @@
          list2 = list;
       }
 
-      V v1 = (V)((V)((Number)list.get(0)));
+      V v1 = list.get(0);
       T v2 = list2.get(0);
       list3.add(list2.get(0));
-      this.field = (T)(T)v;
+      this.field = (T)v;
       this.setField((T)v);
    }
 
gen_diffs.py pkg/TestGenericsInvocUnchecked.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,7 +2,7 @@
 
 public class TestGenericsInvocUnchecked<T extends Number> {
    public void test(int i, TestGenericsInvocUnchecked<?> other) {
-      (new TestGenericsInvocUnchecked.Inner()).testInner(i, this, other);
+      new TestGenericsInvocUnchecked.Inner().testInner(i, this, other);
    }
 
    public void test1(Class<?> c, String s) {
gen_diffs.py pkg/TestGenericsQualified.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,12 +6,12 @@
 import java.util.stream.Stream;
 
 public class TestGenericsQualified {
-   public Comparator<String> field = Comparator.comparing(s -> s.length()).thenComparing(i -> i.toString());
-   public CompletableFuture<String> field2 = CompletableFuture.supplyAsync(() -> "").thenCompose(s -> CompletableFuture.supplyAsync(() -> s + "2"));
+   public Comparator<String> field = Comparator.<String, Integer>comparing(s -> s.length()).thenComparing(i -> i.toString());
+   public CompletableFuture<String> field2 = CompletableFuture.<String>supplyAsync(() -> "").thenCompose(s -> CompletableFuture.supplyAsync(() -> s + "2"));
    public Optional<String> field3 = Optional.of("").map(s -> s + "3");
-   public Stream<String> field4 = Stream.of("1", "2").sorted(Comparator.comparing(s -> s.length()).thenComparing(i -> i.toString()));
+   public Stream<String> field4 = Stream.of("1", "2").sorted(Comparator.<String, Integer>comparing(s -> s.length()).thenComparing(i -> i.toString()));
    public Comparator<String> field5 = Comparator.comparing(String::length).thenComparing(i -> i.toString());
-   public Comparator<TestGenericsQualified> field6 = Comparator.comparing(TestGenericsQualified::get).reversed();
+   public Comparator<TestGenericsQualified> field6 = Comparator.<TestGenericsQualified, Integer>comparing(TestGenericsQualified::get).reversed();
 
    public int get() {
       return 0;
@@ -22,6 +22,6 @@
    }
 
    public Comparator<String> method() {
-      return Comparator.comparing(s -> s.length()).thenComparing(i -> i.toString());
+      return Comparator.<String, Integer>comparing(s -> s.length()).thenComparing(i -> i.toString());
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestGenericsTernary.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -8,7 +8,7 @@
 
    public T test(int i) {
       T t = this.list.get(i);
-      return (T)(this.accept(t) ? t : null);
+      return this.accept(t) ? t : null;
    }
 
    public boolean accept(T t) {
gen_diffs.py pkg/TestGenericSuperCast.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,13 +2,13 @@
 
 public class TestGenericSuperCast {
    public <T> Class<T> test(TestGenericSuperCast.Inner<T> inner) {
-      Class<T> t = inner.get();
-      return inner.get();
+      Class<T> t = (Class<T>)inner.get();
+      return (Class<T>)inner.get();
    }
 
    public <T> Class<? extends T> test1(TestGenericSuperCast.Inner<T> inner) {
-      Class<? extends T> t = inner.get();
-      return inner.get();
+      Class<? extends T> t = (Class<? extends T>)inner.get();
+      return (Class<? extends T>)inner.get();
    }
 
    public class Inner<T> {
gen_diffs.py pkg/TestGroovyClass.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -21,13 +21,13 @@
    private final TestGroovyClass.Inner i;
    private final Runnable r;
    private final Callable<String> c;
-   // $FF: synthetic field
+   // $QF: synthetic field
    private static ClassInfo $staticClassInfo;
-   // $FF: synthetic field
+   // $QF: synthetic field
    public static transient boolean __$stMC;
-   // $FF: synthetic field
+   // $QF: synthetic field
    private transient MetaClass metaClass;
-   // $FF: synthetic field
+   // $QF: synthetic field
    private static SoftReference $callSiteArray;
 
    @Generated
@@ -46,7 +46,7 @@
       this.metaClass = var6;
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    public Object this$dist$invoke$1(String name, Object args) {
       CallSite[] var3 = $getCallSiteArray();
       return ScriptBytecodeAdapter.invokeMethodOnCurrentN(
@@ -57,7 +57,7 @@
       );
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    public void this$dist$set$1(String name, Object value) {
       CallSite[] var3 = $getCallSiteArray();
       ScriptBytecodeAdapter.setGroovyObjectProperty(
@@ -65,7 +65,7 @@
       );
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    public Object this$dist$get$1(String name) {
       CallSite[] var2 = $getCallSiteArray();
       return ScriptBytecodeAdapter.getGroovyObjectProperty(
@@ -73,7 +73,7 @@
       );
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    protected MetaClass $getStaticMetaClass() {
       if (this.getClass() != TestGroovyClass.class) {
          return ScriptBytecodeAdapter.initMetaClass(this);
@@ -91,9 +91,8 @@
    @Internal
    @Transient
    public MetaClass getMetaClass() {
-      MetaClass var10000 = this.metaClass;
       if (this.metaClass != null) {
-         return var10000;
+         return this.metaClass;
       } else {
          this.metaClass = this.$getStaticMetaClass();
          return this.metaClass;
@@ -126,20 +125,20 @@
       return this.c;
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static void $createCallSiteArray_1(String[] var0) {
       var0[0] = "<$constructor$>";
       var0[1] = "<$constructor$>";
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static CallSiteArray $createCallSiteArray() {
       String[] var0 = new String[2];
       $createCallSiteArray_1(var0);
       return new CallSiteArray(TestGroovyClass.class, var0);
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static CallSite[] $getCallSiteArray() {
       CallSiteArray var0;
       if ($callSiteArray == null || (var0 = (CallSiteArray)$callSiteArray.get()) == null) {
@@ -151,13 +150,13 @@
    }
 
    public class Inner implements GroovyObject {
-      // $FF: synthetic field
+      // $QF: synthetic field
       private static ClassInfo $staticClassInfo;
-      // $FF: synthetic field
+      // $QF: synthetic field
       public static transient boolean __$stMC;
-      // $FF: synthetic field
+      // $QF: synthetic field
       private transient MetaClass metaClass;
-      // $FF: synthetic field
+      // $QF: synthetic field
       private static SoftReference $callSiteArray;
 
       @Generated
@@ -168,13 +167,13 @@
          this.metaClass = var4;
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       public Object methodMissing(String name, Object args) {
          CallSite[] var3 = $getCallSiteArray();
          return TestGroovyClass.this.this$dist$invoke$1(name, args);
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       public static Object $static_methodMissing(String name, Object args) {
          CallSite[] var2 = $getCallSiteArray();
          return ScriptBytecodeAdapter.invokeMethodN(
@@ -185,27 +184,27 @@
          );
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       public void propertyMissing(String name, Object value) {
          CallSite[] var3 = $getCallSiteArray();
          TestGroovyClass.this.this$dist$set$1(name, value);
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       public static void $static_propertyMissing(String name, Object value) {
          CallSite[] var2 = $getCallSiteArray();
          ScriptBytecodeAdapter.setProperty(
-            value, (Class)null, TestGroovyClass.class, ShortTypeHandling.castToString(new GStringImpl(new Object[]{name}, new String[]{"", ""}))
-         );
-      }
-
-      // $FF: synthetic method
+            value, null, TestGroovyClass.class, ShortTypeHandling.castToString(new GStringImpl(new Object[]{name}, new String[]{"", ""}))
+         );
+      }
+
+      // $QF: synthetic method
       public Object propertyMissing(String name) {
          CallSite[] var2 = $getCallSiteArray();
          return TestGroovyClass.this.this$dist$get$1(name);
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       public static Object $static_propertyMissing(String name) {
          CallSite[] var1 = $getCallSiteArray();
          return ScriptBytecodeAdapter.getProperty(
@@ -213,7 +212,7 @@
          );
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       protected MetaClass $getStaticMetaClass() {
          if (this.getClass() != TestGroovyClass.Inner.class) {
             return ScriptBytecodeAdapter.initMetaClass(this);
@@ -231,9 +230,8 @@
       @Internal
       @Transient
       public MetaClass getMetaClass() {
-         MetaClass var10000 = this.metaClass;
          if (this.metaClass != null) {
-            return var10000;
+            return this.metaClass;
          } else {
             this.metaClass = this.$getStaticMetaClass();
             return this.metaClass;
@@ -246,13 +244,13 @@
          this.metaClass = var1;
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       private static CallSiteArray $createCallSiteArray() {
          String[] var0 = new String[0];
          return new CallSiteArray(TestGroovyClass.Inner.class, var0);
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       private static CallSite[] $getCallSiteArray() {
          CallSiteArray var0;
          if ($callSiteArray == null || (var0 = (CallSiteArray)$callSiteArray.get()) == null) {
@@ -265,13 +263,13 @@
    }
 
    public static class Nested implements GroovyObject {
-      // $FF: synthetic field
+      // $QF: synthetic field
       private static ClassInfo $staticClassInfo;
-      // $FF: synthetic field
+      // $QF: synthetic field
       public static transient boolean __$stMC;
-      // $FF: synthetic field
+      // $QF: synthetic field
       private transient MetaClass metaClass;
-      // $FF: synthetic field
+      // $QF: synthetic field
       private static SoftReference $callSiteArray;
 
       @Generated
@@ -282,7 +280,7 @@
          this.metaClass = var2;
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       public Object methodMissing(String name, Object args) {
          CallSite[] var3 = $getCallSiteArray();
          return ScriptBytecodeAdapter.invokeMethodN(
@@ -293,7 +291,7 @@
          );
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       public static Object $static_methodMissing(String name, Object args) {
          CallSite[] var2 = $getCallSiteArray();
          return ScriptBytecodeAdapter.invokeMethodN(
@@ -304,23 +302,23 @@
          );
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       public void propertyMissing(String name, Object value) {
          CallSite[] var3 = $getCallSiteArray();
          ScriptBytecodeAdapter.setProperty(
-            value, (Class)null, TestGroovyClass.class, ShortTypeHandling.castToString(new GStringImpl(new Object[]{name}, new String[]{"", ""}))
-         );
-      }
-
-      // $FF: synthetic method
+            value, null, TestGroovyClass.class, ShortTypeHandling.castToString(new GStringImpl(new Object[]{name}, new String[]{"", ""}))
+         );
+      }
+
+      // $QF: synthetic method
       public static void $static_propertyMissing(String name, Object value) {
          CallSite[] var2 = $getCallSiteArray();
          ScriptBytecodeAdapter.setProperty(
-            value, (Class)null, TestGroovyClass.class, ShortTypeHandling.castToString(new GStringImpl(new Object[]{name}, new String[]{"", ""}))
-         );
-      }
-
-      // $FF: synthetic method
+            value, null, TestGroovyClass.class, ShortTypeHandling.castToString(new GStringImpl(new Object[]{name}, new String[]{"", ""}))
+         );
+      }
+
+      // $QF: synthetic method
       public Object propertyMissing(String name) {
          CallSite[] var2 = $getCallSiteArray();
          return ScriptBytecodeAdapter.getProperty(
@@ -328,7 +326,7 @@
          );
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       public static Object $static_propertyMissing(String name) {
          CallSite[] var1 = $getCallSiteArray();
          return ScriptBytecodeAdapter.getProperty(
@@ -336,7 +334,7 @@
          );
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       protected MetaClass $getStaticMetaClass() {
          if (this.getClass() != TestGroovyClass.Nested.class) {
             return ScriptBytecodeAdapter.initMetaClass(this);
@@ -354,9 +352,8 @@
       @Internal
       @Transient
       public MetaClass getMetaClass() {
-         MetaClass var10000 = this.metaClass;
          if (this.metaClass != null) {
-            return var10000;
+            return this.metaClass;
          } else {
             this.metaClass = this.$getStaticMetaClass();
             return this.metaClass;
@@ -369,13 +366,13 @@
          this.metaClass = var1;
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       private static CallSiteArray $createCallSiteArray() {
          String[] var0 = new String[0];
          return new CallSiteArray(TestGroovyClass.Nested.class, var0);
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       private static CallSite[] $getCallSiteArray() {
          CallSiteArray var0;
          if ($callSiteArray == null || (var0 = (CallSiteArray)$callSiteArray.get()) == null) {
@@ -388,11 +385,11 @@
    }
 
    public final class _closure1 extends Closure implements GeneratedClosure {
-      // $FF: synthetic field
+      // $QF: synthetic field
       private static ClassInfo $staticClassInfo;
-      // $FF: synthetic field
+      // $QF: synthetic field
       public static transient boolean __$stMC;
-      // $FF: synthetic field
+      // $QF: synthetic field
       private static SoftReference $callSiteArray;
 
       public _closure1(Object _outerInstance, Object _thisObject) {
@@ -408,10 +405,10 @@
       @Generated
       public Object doCall() {
          CallSite[] var1 = $getCallSiteArray();
-         return this.doCall((Object)null);
-      }
-
-      // $FF: synthetic method
+         return this.doCall(null);
+      }
+
+      // $QF: synthetic method
       protected MetaClass $getStaticMetaClass() {
          if (this.getClass() != TestGroovyClass._closure1.class) {
             return ScriptBytecodeAdapter.initMetaClass(this);
@@ -425,19 +422,19 @@
          }
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       private static void $createCallSiteArray_1(String[] var0) {
          var0[0] = "println";
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       private static CallSiteArray $createCallSiteArray() {
          String[] var0 = new String[1];
          $createCallSiteArray_1(var0);
          return new CallSiteArray(TestGroovyClass._closure1.class, var0);
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       private static CallSite[] $getCallSiteArray() {
          CallSiteArray var0;
          if ($callSiteArray == null || (var0 = (CallSiteArray)$callSiteArray.get()) == null) {
@@ -450,11 +447,11 @@
    }
 
    public final class _closure2 extends Closure implements GeneratedClosure {
-      // $FF: synthetic field
+      // $QF: synthetic field
       private static ClassInfo $staticClassInfo;
-      // $FF: synthetic field
+      // $QF: synthetic field
       public static transient boolean __$stMC;
-      // $FF: synthetic field
+      // $QF: synthetic field
       private static SoftReference $callSiteArray;
 
       public _closure2(Object _outerInstance, Object _thisObject) {
@@ -470,10 +467,10 @@
       @Generated
       public Object doCall() {
          CallSite[] var1 = $getCallSiteArray();
-         return this.doCall((Object)null);
-      }
-
-      // $FF: synthetic method
+         return this.doCall(null);
+      }
+
+      // $QF: synthetic method
       protected MetaClass $getStaticMetaClass() {
          if (this.getClass() != TestGroovyClass._closure2.class) {
             return ScriptBytecodeAdapter.initMetaClass(this);
@@ -487,13 +484,13 @@
          }
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       private static CallSiteArray $createCallSiteArray() {
          String[] var0 = new String[0];
          return new CallSiteArray(TestGroovyClass._closure2.class, var0);
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       private static CallSite[] $getCallSiteArray() {
          CallSiteArray var0;
          if ($callSiteArray == null || (var0 = (CallSiteArray)$callSiteArray.get()) == null) {
gen_diffs.py pkg/TestGroovyTrait$Trait$FieldHelper.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,10 +1,10 @@
 package pkg;
 
-// $FF: synthetic class
+// $QF: synthetic class
 public interface TestGroovyTrait$Trait$FieldHelper {
-   // $FF: synthetic field
+   // $QF: synthetic field
    Object $0x0002pkg_TestGroovyTrait__myField;
-   // $FF: synthetic field
+   // $QF: synthetic field
    Object $ins$1pkg_TestGroovyTrait__myField;
 
    Object pkg_TestGroovyTrait__myField$set(Object var1);
gen_diffs.py pkg/TestGroovyTrait$Trait$Helper.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -13,16 +13,16 @@
 import org.codehaus.groovy.runtime.callsite.CallSiteArray;
 import org.codehaus.groovy.runtime.typehandling.ShortTypeHandling;
 
-// $FF: synthetic class
+// $QF: synthetic class
 @Generated
 public abstract class TestGroovyTrait$Trait$Helper implements GroovyObject {
-   // $FF: synthetic field
+   // $QF: synthetic field
    private static ClassInfo $staticClassInfo;
-   // $FF: synthetic field
+   // $QF: synthetic field
    public static transient boolean __$stMC;
-   // $FF: synthetic field
+   // $QF: synthetic field
    private transient MetaClass metaClass;
-   // $FF: synthetic field
+   // $QF: synthetic field
    private static SoftReference $callSiteArray;
 
    @Generated
@@ -33,7 +33,7 @@
       this.metaClass = var2;
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    public static void $init$(TestGroovyTrait $self) {
       CallSite[] var1 = $getCallSiteArray();
       var1[0]
@@ -43,7 +43,7 @@
          );
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    public static void $static$init$(Class<TestGroovyTrait> $static$self) {
       CallSite[] var1 = $getCallSiteArray();
    }
@@ -63,7 +63,7 @@
       var2[2].call((TestGroovyTrait$Trait$FieldHelper)ScriptBytecodeAdapter.castToType($self, TestGroovyTrait$Trait$FieldHelper.class), myField);
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    public Object methodMissing(String name, Object args) {
       CallSite[] var3 = $getCallSiteArray();
       return ScriptBytecodeAdapter.invokeMethodN(
@@ -74,7 +74,7 @@
       );
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    public static Object $static_methodMissing(String name, Object args) {
       CallSite[] var2 = $getCallSiteArray();
       return ScriptBytecodeAdapter.invokeMethodN(
@@ -85,23 +85,23 @@
       );
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    public void propertyMissing(String name, Object value) {
       CallSite[] var3 = $getCallSiteArray();
       ScriptBytecodeAdapter.setProperty(
-         value, (Class)null, TestGroovyTrait.class, ShortTypeHandling.castToString(new GStringImpl(new Object[]{name}, new String[]{"", ""}))
+         value, null, TestGroovyTrait.class, ShortTypeHandling.castToString(new GStringImpl(new Object[]{name}, new String[]{"", ""}))
       );
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    public static void $static_propertyMissing(String name, Object value) {
       CallSite[] var2 = $getCallSiteArray();
       ScriptBytecodeAdapter.setProperty(
-         value, (Class)null, TestGroovyTrait.class, ShortTypeHandling.castToString(new GStringImpl(new Object[]{name}, new String[]{"", ""}))
+         value, null, TestGroovyTrait.class, ShortTypeHandling.castToString(new GStringImpl(new Object[]{name}, new String[]{"", ""}))
       );
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    public Object propertyMissing(String name) {
       CallSite[] var2 = $getCallSiteArray();
       return ScriptBytecodeAdapter.getProperty(
@@ -109,7 +109,7 @@
       );
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    public static Object $static_propertyMissing(String name) {
       CallSite[] var1 = $getCallSiteArray();
       return ScriptBytecodeAdapter.getProperty(
@@ -117,7 +117,7 @@
       );
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    protected MetaClass $getStaticMetaClass() {
       if (this.getClass() != TestGroovyTrait$Trait$Helper.class) {
          return ScriptBytecodeAdapter.initMetaClass(this);
@@ -135,9 +135,8 @@
    @Internal
    @Transient
    public MetaClass getMetaClass() {
-      MetaClass var10000 = this.metaClass;
       if (this.metaClass != null) {
-         return var10000;
+         return this.metaClass;
       } else {
          this.metaClass = this.$getStaticMetaClass();
          return this.metaClass;
@@ -150,21 +149,21 @@
       this.metaClass = var1;
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static void $createCallSiteArray_1(String[] var0) {
       var0[0] = "pkg_TestGroovyTrait__myField$set";
       var0[1] = "pkg_TestGroovyTrait__myField$get";
       var0[2] = "pkg_TestGroovyTrait__myField$set";
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static CallSiteArray $createCallSiteArray() {
       String[] var0 = new String[3];
       $createCallSiteArray_1(var0);
       return new CallSiteArray(TestGroovyTrait$Trait$Helper.class, var0);
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static CallSite[] $getCallSiteArray() {
       CallSiteArray var0;
       if ($callSiteArray == null || (var0 = (CallSiteArray)$callSiteArray.get()) == null) {
gen_diffs.py pkg/TestGroovyTryCatch.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -12,13 +12,13 @@
 import org.codehaus.groovy.runtime.callsite.CallSiteArray;
 
 public class TestGroovyTryCatch implements GroovyObject {
-   // $FF: synthetic field
+   // $QF: synthetic field
    private static ClassInfo $staticClassInfo;
-   // $FF: synthetic field
+   // $QF: synthetic field
    public static transient boolean __$stMC;
-   // $FF: synthetic field
+   // $QF: synthetic field
    private transient MetaClass metaClass;
-   // $FF: synthetic field
+   // $QF: synthetic field
    private static SoftReference $callSiteArray;
 
    @Generated
@@ -38,7 +38,6 @@
          } catch (Exception var6) {
             var1[2].call(var1[3].callGetProperty(System.class), "Exception");
          }
-
       } finally {
          ;
       }
@@ -55,13 +54,12 @@
          } catch (Throwable var9) {
             var1[8].call(var1[9].callGetProperty(System.class), "Throwable");
          }
-
       } finally {
          ;
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    protected MetaClass $getStaticMetaClass() {
       if (this.getClass() != TestGroovyTryCatch.class) {
          return ScriptBytecodeAdapter.initMetaClass(this);
@@ -79,9 +77,8 @@
    @Internal
    @Transient
    public MetaClass getMetaClass() {
-      MetaClass var10000 = this.metaClass;
       if (this.metaClass != null) {
-         return var10000;
+         return this.metaClass;
       } else {
          this.metaClass = this.$getStaticMetaClass();
          return this.metaClass;
@@ -94,7 +91,7 @@
       this.metaClass = var1;
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static void $createCallSiteArray_1(String[] var0) {
       var0[0] = "println";
       var0[1] = "out";
@@ -108,14 +105,14 @@
       var0[9] = "out";
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static CallSiteArray $createCallSiteArray() {
       String[] var0 = new String[10];
       $createCallSiteArray_1(var0);
       return new CallSiteArray(TestGroovyTryCatch.class, var0);
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static CallSite[] $getCallSiteArray() {
       CallSiteArray var0;
       if ($callSiteArray == null || (var0 = (CallSiteArray)$callSiteArray.get()) == null) {
gen_diffs.py pkg/TestIfElseSwitch.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,36 +2,32 @@
 
 public class TestIfElseSwitch {
    public boolean test(boolean a, boolean b, boolean c, int i) {
-      if (i != 3 && i != 2) {
-         if (a) {
-            return false;
-         } else if (i <= 200 && i >= -200) {
-            if (c && b) {
-               return true;
-            } else if (i >= 0 && i < 8) {
-               if (i - 1 == 5) {
+      if (i == 3 || i == 2) {
+         return true;
+      } else if (a) {
+         return false;
+      } else if (i > 200 || i < -200) {
+         return false;
+      } else if (c && b) {
+         return true;
+      } else if (i >= 0 && i < 8) {
+         if (i - 1 == 5) {
+            return true;
+         } else {
+            switch(i) {
+               case 0:
+                  return false;
+               case 1:
                   return true;
-               } else {
-                  switch(i) {
-                  case 0:
-                     return false;
-                  case 1:
-                     return true;
-                  default:
-                     return i % 2 == 0;
-                  }
-               }
-            } else if (i > 100) {
-               System.out.println(1);
-               return false;
-            } else {
-               return false;
+               default:
+                  return i % 2 == 0;
             }
-         } else {
-            return false;
          }
+      } else if (i > 100) {
+         System.out.println(1);
+         return false;
       } else {
-         return true;
+         return false;
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestIfElseTernary1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,82 +4,37 @@
    public void test0(boolean condition, int a, int b, int c) {
       if (condition ? a >= b : b <= c) {
          System.out.println(2);
+      } else {
+         System.out.println(1);
       }
-
-      return;
-
    }
 
    public void test1(boolean condition, int a, int b, int c) {
-      label28: {
-         if (condition) {
-            if (a < b) {
-               if (a == 0) {
-                  break label28;
-               }
-            } else if (b == 0) {
-               break label28;
-            }
-         } else if (b > c) {
-            break label28;
-         }
-
+      if (condition ? (a < b ? a != 0 : b != 0) : b <= c) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test2(boolean condition, int a, int b, int c) {
-      label28: {
-         if (condition) {
-            if (a < b) {
-               break label28;
-            }
-         } else if (b > c) {
-            if (b == 15) {
-               break label28;
-            }
-         } else if (a == 15) {
-            break label28;
-         }
-
+      if (condition ? a >= b : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test3(boolean condition, int a, int b, int c) {
-      label33: {
-         if (condition) {
-            if (a < b) {
-               if (a == 0) {
-                  break label33;
-               }
-            } else if (b == 0) {
-               break label33;
-            }
-         } else if (b > c) {
-            if (b == 15) {
-               break label33;
-            }
-         } else if (a == 15) {
-            break label33;
-         }
-
+      if (condition ? (a < b ? a != 0 : b != 0) : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test4(boolean condition, int a, int b, int c) {
-      label22:
-      if ((condition ? a + c <= b : a >= b + c) || a >= b) {
+      if ((condition ? a + c > b : a < b + c) ? a >= b : b <= c) {
          System.out.println(2);
       } else {
          System.out.println(1);
@@ -87,27 +42,15 @@
    }
 
    public void test5(boolean condition, int a, int b, int c) {
-      label41: {
-         if (condition ? a + c > b : a < b + c) {
-            if (a < b) {
-               if (a == 0) {
-                  break label41;
-               }
-            } else if (b == 0) {
-               break label41;
-            }
-         }
-
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a != 0 : b != 0) : b <= c) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test6(boolean condition, int a, int b, int c) {
-      label27:
-      if ((condition ? a + c <= b : a >= b + c) || a >= b) {
+      if ((condition ? a + c > b : a < b + c) ? a >= b : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
       } else {
          System.out.println(1);
@@ -115,94 +58,40 @@
    }
 
    public void test7(boolean condition, int a, int b, int c) {
-      label46: {
-         if (condition ? a + c > b : a < b + c) {
-            if (a < b) {
-               if (a == 0) {
-                  break label46;
-               }
-            } else if (b == 0) {
-               break label46;
-            }
-         }
-
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a != 0 : b != 0) : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8(boolean condition, int a, int b, int c) {
-      label38: {
-         if (a != b && b != c) {
-            if (a > b && b > c) {
-               if (a < b + c && a > 3 * c) {
-                  break label38;
-               }
-            } else if (condition) {
-               break label38;
-            }
-         } else if (a != b) {
-            break label38;
-         }
-
+      if (a != b && b != c ? (a > b && b > c ? a >= b + c || a <= 3 * c : !condition) : a == b) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8b(boolean condition, int a, int b, int c) {
-      label40: {
-         if (a == b && b == c) {
-            if (!condition) {
-               break label40;
-            }
-         } else if (a > b && b > c) {
-            if (a < b + c && a > 3 * c) {
-               break label40;
-            }
-         } else if (condition) {
-            break label40;
-         }
-
+      if (a == b && b == c ? condition : (a > b && b > c ? a >= b + c || a <= 3 * c : !condition)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void testFuzz1() {
-      int[] vvv2;
-      label97: {
-         int[] vvv3;
-         label103: {
-            int[] vvv1 = new int[0];
-            vvv2 = new int[0];
-            vvv3 = new int[0];
-            if ((vvv1 != null || vvv2 != null) && vvv2 == null) {
-               if (vvv2 == null) {
-                  if (vvv2 != null) {
-                     break label103;
-                  }
-               } else if (vvv3 == null || vvv1 != null) {
-                  break label103;
-               }
-            } else if (vvv3 == null) {
-               break label103;
-            }
-
-            synchronized(this) {
-               vvv2 = vvv3;
-               System.out.println(vvv3);
-               long[][] vvv4 = new long[0][];
-               break label97;
-            }
+      int[] vvv1 = new int[0];
+      int[] vvv2 = new int[0];
+      int[] vvv3 = new int[0];
+      if ((vvv1 != null || vvv2 != null) && vvv2 == null ? (vvv2 == null ? vvv2 == null : vvv3 != null && vvv1 == null) : vvv3 != null) {
+         synchronized(this) {
+            vvv2 = vvv3;
+            System.out.println(vvv3);
+            long[][] vvv4 = new long[0][];
          }
-
+      } else {
          try {
             boolean vvv11 = true;
          } catch (Exception var15) {
gen_diffs.py pkg/TestIfElseTernary1J17.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,82 +4,37 @@
    public void test0(boolean condition, int a, int b, int c) {
       if (condition ? a >= b : b <= c) {
          System.out.println(2);
+      } else {
+         System.out.println(1);
       }
-
-      return;
-
    }
 
    public void test1(boolean condition, int a, int b, int c) {
-      label28: {
-         if (condition) {
-            if (a < b) {
-               if (a == 0) {
-                  break label28;
-               }
-            } else if (b == 0) {
-               break label28;
-            }
-         } else if (b > c) {
-            break label28;
-         }
-
+      if (condition ? (a < b ? a != 0 : b != 0) : b <= c) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test2(boolean condition, int a, int b, int c) {
-      label28: {
-         if (condition) {
-            if (a < b) {
-               break label28;
-            }
-         } else if (b > c) {
-            if (b == 15) {
-               break label28;
-            }
-         } else if (a == 15) {
-            break label28;
-         }
-
+      if (condition ? a >= b : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test3(boolean condition, int a, int b, int c) {
-      label33: {
-         if (condition) {
-            if (a < b) {
-               if (a == 0) {
-                  break label33;
-               }
-            } else if (b == 0) {
-               break label33;
-            }
-         } else if (b > c) {
-            if (b == 15) {
-               break label33;
-            }
-         } else if (a == 15) {
-            break label33;
-         }
-
+      if (condition ? (a < b ? a != 0 : b != 0) : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test4(boolean condition, int a, int b, int c) {
-      label22:
-      if ((condition ? a + c <= b : a >= b + c) || a >= b) {
+      if ((condition ? a + c > b : a < b + c) ? a >= b : b <= c) {
          System.out.println(2);
       } else {
          System.out.println(1);
@@ -87,27 +42,15 @@
    }
 
    public void test5(boolean condition, int a, int b, int c) {
-      label41: {
-         if (condition ? a + c > b : a < b + c) {
-            if (a < b) {
-               if (a == 0) {
-                  break label41;
-               }
-            } else if (b == 0) {
-               break label41;
-            }
-         }
-
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a != 0 : b != 0) : b <= c) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test6(boolean condition, int a, int b, int c) {
-      label27:
-      if ((condition ? a + c <= b : a >= b + c) || a >= b) {
+      if ((condition ? a + c > b : a < b + c) ? a >= b : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
       } else {
          System.out.println(1);
@@ -115,94 +58,40 @@
    }
 
    public void test7(boolean condition, int a, int b, int c) {
-      label46: {
-         if (condition ? a + c > b : a < b + c) {
-            if (a < b) {
-               if (a == 0) {
-                  break label46;
-               }
-            } else if (b == 0) {
-               break label46;
-            }
-         }
-
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a != 0 : b != 0) : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8(boolean condition, int a, int b, int c) {
-      label38: {
-         if (a != b && b != c) {
-            if (a > b && b > c) {
-               if (a < b + c && a > 3 * c) {
-                  break label38;
-               }
-            } else if (condition) {
-               break label38;
-            }
-         } else if (a != b) {
-            break label38;
-         }
-
+      if (a != b && b != c ? (a > b && b > c ? a >= b + c || a <= 3 * c : !condition) : a == b) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8b(boolean condition, int a, int b, int c) {
-      label40: {
-         if (a == b && b == c) {
-            if (!condition) {
-               break label40;
-            }
-         } else if (a > b && b > c) {
-            if (a < b + c && a > 3 * c) {
-               break label40;
-            }
-         } else if (condition) {
-            break label40;
-         }
-
+      if (a == b && b == c ? condition : (a > b && b > c ? a >= b + c || a <= 3 * c : !condition)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void testFuzz1() {
-      int[] vvv2;
-      label97: {
-         int[] vvv3;
-         label103: {
-            int[] vvv1 = new int[0];
-            vvv2 = new int[0];
-            vvv3 = new int[0];
-            if ((vvv1 != null || vvv2 != null) && vvv2 == null) {
-               if (vvv2 == null) {
-                  if (vvv2 != null) {
-                     break label103;
-                  }
-               } else if (vvv3 == null || vvv1 != null) {
-                  break label103;
-               }
-            } else if (vvv3 == null) {
-               break label103;
-            }
-
-            synchronized(this) {
-               vvv2 = vvv3;
-               System.out.println(vvv3);
-               long[][] vvv4 = new long[0][];
-               break label97;
-            }
+      int[] vvv1 = new int[0];
+      int[] vvv2 = new int[0];
+      int[] vvv3 = new int[0];
+      if ((vvv1 != null || vvv2 != null) && vvv2 == null ? (vvv2 == null ? vvv2 == null : vvv3 != null && vvv1 == null) : vvv3 != null) {
+         synchronized(this) {
+            vvv2 = vvv3;
+            System.out.println(vvv3);
+            long[][] vvv4 = new long[0][];
          }
-
+      } else {
          try {
             boolean vvv11 = true;
          } catch (Exception var15) {
gen_diffs.py pkg/TestIfLoop.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -7,8 +7,7 @@
    public int testCompoundCondition(int i, int j) {
       while(i > 0 && j < 3) {
          if (j < 0) {
-            --j;
-            if (i > 3 && j == -2) {
+            if (i > 3 && --j == -2) {
                j = 1;
             }
          }
@@ -39,7 +38,6 @@
       for(int var5 = random.nextInt(8) - random.nextInt(8) + b; a >= 0 && a <= 20 && var5 >= 0 && var5 <= 20; var5 -= random.nextInt(4) - random.nextInt(4)) {
          a -= random.nextInt(4) - random.nextInt(4);
       }
-
    }
 
    public int testElseIf(int i) {
gen_diffs.py pkg/TestIfTernary1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -5,130 +5,59 @@
       if (condition ? a < b : b > c) {
          System.out.println(1);
       }
-
    }
 
    public void test1(boolean condition, int a, int b, int c) {
-      if (condition) {
-         if (a < b) {
-            if (a != 0) {
-               return;
-            }
-         } else if (b != 0) {
-            return;
-         }
-      } else if (b <= c) {
-         return;
+      if (condition ? (a < b ? a == 0 : b == 0) : b > c) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test2(boolean condition, int a, int b, int c) {
-      if (condition) {
-         if (a >= b) {
-            return;
-         }
-      } else if (b > c) {
-         if (b != 15) {
-            return;
-         }
-      } else if (a != 15) {
-         return;
+      if (condition ? a < b : (b > c ? b == 15 : a == 15)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test3(boolean condition, int a, int b, int c) {
-      if (condition) {
-         if (a < b) {
-            if (a != 0) {
-               return;
-            }
-         } else if (b != 0) {
-            return;
-         }
-      } else if (b > c) {
-         if (b != 15) {
-            return;
-         }
-      } else if (a != 15) {
-         return;
+      if (condition ? (a < b ? a == 0 : b == 0) : (b > c ? b == 15 : a == 15)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test4(boolean condition, int a, int b, int c) {
-      if ((condition ? a + c <= b : a >= b + c) || a < b) {
+      if ((condition ? a + c > b : a < b + c) ? a < b : b > c) {
          System.out.println(1);
       }
    }
 
    public void test5(boolean condition, int a, int b, int c) {
-      if (condition ? a + c > b : a < b + c) {
-         if (a < b) {
-            if (a != 0) {
-               return;
-            }
-         } else if (b != 0) {
-            return;
-         }
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a == 0 : b == 0) : b > c) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test6(boolean condition, int a, int b, int c) {
-      if ((condition ? a + c <= b : a >= b + c) || a < b) {
+      if ((condition ? a + c > b : a < b + c) ? a < b : (b > c ? b == 15 : a == 15)) {
          System.out.println(1);
       }
    }
 
    public void test7(boolean condition, int a, int b, int c) {
-      if (condition ? a + c > b : a < b + c) {
-         if (a < b) {
-            if (a != 0) {
-               return;
-            }
-         } else if (b != 0) {
-            return;
-         }
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a == 0 : b == 0) : (b > c ? b == 15 : a == 15)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8(boolean condition, int a, int b, int c) {
-      if (a != b && b != c) {
-         if (a > b && b > c) {
-            if (a >= b + c || a <= 3 * c) {
-               return;
-            }
-         } else if (!condition) {
-            return;
-         }
-      } else if (a == b) {
-         return;
+      if (a != b && b != c ? (a > b && b > c ? a < b + c && a > 3 * c : condition) : a != b) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8b(boolean condition, int a, int b, int c) {
-      if (a == b && b == c) {
-         if (condition) {
-            return;
-         }
-      } else if (a > b && b > c) {
-         if (a >= b + c || a <= 3 * c) {
-            return;
-         }
-      } else if (!condition) {
-         return;
+      if (a == b && b == c ? !condition : (a > b && b > c ? a < b + c && a > 3 * c : condition)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestIfTernary1J17.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -5,130 +5,59 @@
       if (condition ? a < b : b > c) {
          System.out.println(1);
       }
-
    }
 
    public void test1(boolean condition, int a, int b, int c) {
-      if (condition) {
-         if (a < b) {
-            if (a != 0) {
-               return;
-            }
-         } else if (b != 0) {
-            return;
-         }
-      } else if (b <= c) {
-         return;
+      if (condition ? (a < b ? a == 0 : b == 0) : b > c) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test2(boolean condition, int a, int b, int c) {
-      if (condition) {
-         if (a >= b) {
-            return;
-         }
-      } else if (b > c) {
-         if (b != 15) {
-            return;
-         }
-      } else if (a != 15) {
-         return;
+      if (condition ? a < b : (b > c ? b == 15 : a == 15)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test3(boolean condition, int a, int b, int c) {
-      if (condition) {
-         if (a < b) {
-            if (a != 0) {
-               return;
-            }
-         } else if (b != 0) {
-            return;
-         }
-      } else if (b > c) {
-         if (b != 15) {
-            return;
-         }
-      } else if (a != 15) {
-         return;
+      if (condition ? (a < b ? a == 0 : b == 0) : (b > c ? b == 15 : a == 15)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test4(boolean condition, int a, int b, int c) {
-      if ((condition ? a + c <= b : a >= b + c) || a < b) {
+      if ((condition ? a + c > b : a < b + c) ? a < b : b > c) {
          System.out.println(1);
       }
    }
 
    public void test5(boolean condition, int a, int b, int c) {
-      if (condition ? a + c > b : a < b + c) {
-         if (a < b) {
-            if (a != 0) {
-               return;
-            }
-         } else if (b != 0) {
-            return;
-         }
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a == 0 : b == 0) : b > c) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test6(boolean condition, int a, int b, int c) {
-      if ((condition ? a + c <= b : a >= b + c) || a < b) {
+      if ((condition ? a + c > b : a < b + c) ? a < b : (b > c ? b == 15 : a == 15)) {
          System.out.println(1);
       }
    }
 
    public void test7(boolean condition, int a, int b, int c) {
-      if (condition ? a + c > b : a < b + c) {
-         if (a < b) {
-            if (a != 0) {
-               return;
-            }
-         } else if (b != 0) {
-            return;
-         }
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a == 0 : b == 0) : (b > c ? b == 15 : a == 15)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8(boolean condition, int a, int b, int c) {
-      if (a != b && b != c) {
-         if (a > b && b > c) {
-            if (a >= b + c || a <= 3 * c) {
-               return;
-            }
-         } else if (!condition) {
-            return;
-         }
-      } else if (a == b) {
-         return;
+      if (a != b && b != c ? (a > b && b > c ? a < b + c && a > 3 * c : condition) : a != b) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8b(boolean condition, int a, int b, int c) {
-      if (a == b && b == c) {
-         if (condition) {
-            return;
-         }
-      } else if (a > b && b > c) {
-         if (a >= b + c || a <= 3 * c) {
-            return;
-         }
-      } else if (!condition) {
-         return;
+      if (a == b && b == c ? !condition : (a > b && b > c ? a < b + c && a > 3 * c : condition)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestIfTernary2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,30 +2,15 @@
 
 public class TestIfTernary2 {
    public boolean test(Object a1, Object a2, Object b1, Object b2) {
-      label21:
-      if (a1 == null ? b1 == null : b2.equals(b1)) {
-         if (a2 == null) {
-            if (b2 == null) {
-               return true;
-            }
-         } else if (b1.equals(a1)) {
-            return true;
-         }
-      }
-
-      return false;
+      return (a1 == null ? b1 == null : b2.equals(b1)) && (a2 == null ? b2 == null : b1.equals(a1));
    }
 
    public String test1(Object a1, Object a2, Object b1, Object b2) {
       if (a1 == null ? b1 == null : b2 == null) {
-         if (a2 == null ? b2 != null : b1 != null) {
-            return "2";
-         }
-
-         return "1";
+         return (a2 == null ? b2 != null : b1 != null) ? "2" : "1";
+      } else {
+         return "3";
       }
-
-      return "3";
    }
 
    public void test2(Object a1, Object a2, Object b1, Object b2) {
gen_diffs.py pkg/TestIfTernaryReturn.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,11 +2,7 @@
 
 public class TestIfTernaryReturn {
    public int test(boolean condition, int a, int b) {
-      if (condition ? a >= b : b <= a) {
-         return -1;
-      }
-
-      return 1;
+      return (condition ? a >= b : b <= a) ? -1 : 1;
    }
 
    public int test1(boolean condition, int a, int b) {
gen_diffs.py pkg/TestIllegalMethodNames.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,20 +1,20 @@
 package pkg;
 
 public class TestIllegalMethodNames {
-   public void _I_V/* $FF was: (I)V*/(int var1) {
+   public void _I_V/* $QF was: (I)V*/(int var1) {
       this.()V();
       System.out.println(this.(I)Z(var1));
    }
 
-   public void __V/* $FF was: ()V*/() {
+   public void __V/* $QF was: ()V*/() {
       System.out.println(this.()I());
    }
 
-   public int __I/* $FF was: ()I*/() {
+   public int __I/* $QF was: ()I*/() {
       return 13;
    }
 
-   public boolean _I_Z/* $FF was: (I)Z*/(int var1) {
+   public boolean _I_Z/* $QF was: (I)Z*/(int var1) {
       return var1 <= this.()I();
    }
 
gen_diffs.py pkg/TestImplicitlySealedEnum.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -13,7 +13,7 @@
       return 1;
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static TestImplicitlySealedEnum[] $values() {
       return new TestImplicitlySealedEnum[]{A, B};
    }
gen_diffs.py pkg/TestInfiniteLoop.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -59,7 +59,6 @@
          while(true) {
          }
       }
-
    }
 
    public void testSuccessor4(int i) {
gen_diffs.py pkg/TestInlineNoSuccessor.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -15,9 +15,8 @@
          if (arg.startsWith("--a")) {
             System.out.println(0);
             if (arg.startsWith("--aa")) {
-               ++i;
-               if (i >= args.length) {
-                  return new String[0];
+               if (++i >= args.length) {
+                  break;
                }
 
                System.out.println(1);
gen_diffs.py pkg/TestInlineSwitchExpression1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -11,7 +11,6 @@
          case WEST -> Direction.EAST;
          case UP -> Direction.DOWN;
          case DOWN -> Direction.UP;
-         default -> throw new IncompatibleClassChangeError();
       });
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestInlineSwitchExpression2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,19 +6,19 @@
    public void test(Direction direction) {
       int a = 1;
       switch(direction) {
-      case NORTH:
-         a |= direction.ordinal();
-      case SOUTH:
-         a += 12;
-      case EAST:
-         a *= 8;
-      case WEST:
-         a ^= 128;
-      case UP:
-         a /= 5;
-      default:
-         int x = Integer.hashCode(a);
-         System.out.println(x);
+         case NORTH:
+            a |= direction.ordinal();
+         case SOUTH:
+            a += 12;
+         case EAST:
+            a *= 8;
+         case WEST:
+            a ^= 128;
+         case UP:
+            a /= 5;
+         default:
+            int x = Integer.hashCode(a);
+            System.out.println(x);
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestInlineSwitchExpression3.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -7,7 +7,6 @@
       System.out.println(switch(direction) {
          case NORTH, EAST, UP -> -1;
          case SOUTH, WEST, DOWN -> 1;
-         default -> throw new IncompatibleClassChangeError();
       });
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestInlineSwitchExpression4.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -5,13 +5,13 @@
       String var10000;
       if (i > 0) {
          switch(i) {
-         default:
-            var10000 = "1";
+            default:
+               var10000 = "1";
          }
       } else {
          switch(i) {
-         default:
-            var10000 = "2";
+            default:
+               var10000 = "2";
          }
       }
 
gen_diffs.py pkg/TestInlineSwitchExpression6.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,16 +6,15 @@
       for(int j = 0; j < i; i = var10000) {
          ++j;
          switch(j) {
-         case 1:
-            var10000 = 3;
-            break;
-         default:
-            if (j == 4) {
-            }
+            case 1:
+               var10000 = 3;
+               break;
+            default:
+               if (j == 4) {
+               }
 
-            var10000 = 2;
+               var10000 = 2;
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestInstanceStaticInvoke.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -13,7 +13,6 @@
    }
 
    public void test2() {
-      TestInstanceStaticInvoke var10000 = this.inst;
       method();
    }
 
gen_diffs.py pkg/TestIntBoolMerge.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,7 +4,7 @@
    public void test() {
       int i = 0;
       System.out.println(i);
-      i = 1;
-      System.out.println((boolean)i);
+      boolean ix = true;
+      System.out.println(ix);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestIntBoolMergeNoDebug.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,8 +3,8 @@
 public class TestIntBoolMergeNoDebug {
    public void test() {
       byte var1 = 0;
-      System.out.println(var1);
-      var1 = 1;
-      System.out.println((boolean)var1);
+      System.out.println((int)var1);
+      boolean var2 = true;
+      System.out.println(var2);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestInterfaceNullInvoc.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -8,7 +8,7 @@
    void invocOverload(Number var1);
 
    default void test() {
-      this.invoc((String)null);
+      this.invoc(null);
       this.invocOverload((String)null);
       this.invocOverload((Number)null);
    }
gen_diffs.py pkg/TestInUse.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -13,8 +13,7 @@
       do {
          d = this.getInt();
          result -= d;
-         ++i;
-      } while(i < 10);
+      } while(++i < 10);
 
       return result;
    }
gen_diffs.py pkg/TestIrreducible.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,7 +3,7 @@
 public final class TestIrreducible {
    public static int field;
 
-   // $FF: Irreducible bytecode was duplicated to produce valid code
+   // $QF: Irreducible bytecode was duplicated to produce valid code
    public static void test() {
       if (field == 1) {
          System.out.println("2");
gen_diffs.py pkg/TestIterationOverGenericsWithoutLvt.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -7,9 +7,9 @@
    public void test1(List<? extends Number> var1) {
       int var2 = -1;
 
-      for(Object var4 : var1) {
-         if (((Number)var4).intValue() > var2) {
-            var2 = ((Number)var4).intValue();
+      for(Number var4 : var1) {
+         if (var4.intValue() > var2) {
+            var2 = var4.intValue();
          }
       }
 
@@ -17,29 +17,27 @@
    }
 
    public <T extends List<T>> void test2(List<T> var1) {
-      for(Object var3 : var1) {
-         this.test2((List<T>)var3);
+      for(List var3 : var1) {
+         this.test2(var3);
       }
-
    }
 
    public <T extends Collection<?>> void test3(Collection<? extends T> var1) {
-      for(<unknown> var3_1 : var1) {
-         for(Object var5 : var3_1) {
+      for(Collection var3 : var1) {
+         for(Object var5 : var3) {
             System.out.println(var5);
          }
       }
-
    }
 
    public <T extends Comparable<T>> void test4(Iterable<T> var1) {
-      Object var2 = null;
+      Comparable var2 = null;
 
-      for(Object var4 : var1) {
+      for(Comparable var4 : var1) {
          if (var2 == null) {
             var2 = var4;
          } else {
-            int var5 = ((Comparable<Object>)var2).compareTo(var4);
+            int var5 = var2.compareTo(var4);
             var2 = var5 >= 0 ? var2 : var4;
          }
       }
gen_diffs.py pkg/TestIterationOverGenericsWithoutLvt1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -7,6 +7,5 @@
       for(Object var3 : var1) {
          System.out.println(var3.hashCode());
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestItrLoop.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -10,6 +10,5 @@
       for(String s : this.list) {
          System.out.println(s);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestJADNaming.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -15,6 +15,5 @@
       boolean flag4 = false;
       if (flag1 != flag2 && flag3 == flag4) {
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestKotlinConstructorKt.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -28,7 +28,7 @@
             throw new NullPointerException("null cannot be cast to non-null type kotlin.String");
          }
 
-         var10000.<init>(it);
+         var10000./* $QF: Unable to resugar constructor */<init>(it);
          destination$iv$iv.add(var10000);
       }
 
gen_diffs.py pkg/TestKotlinEnumWhen.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -17,128 +17,124 @@
    THIRD;
 
    public final void testStatement() {
-      switch(TestKotlinEnumWhen.WhenMappings.$EnumSwitchMapping$0[this.ordinal()]) {
-      case 1:
-         System.out.println("first!");
-         break;
-      case 2:
-         System.out.println("second!");
-         break;
-      case 3:
-         System.out.println("third!");
+      switch(this) {
+         case FIRST:
+            System.out.println("first!");
+            break;
+         case SECOND:
+            System.out.println("second!");
+            break;
+         case THIRD:
+            System.out.println("third!");
       }
-
    }
 
    public final void testExpression() {
       String var10000;
-      switch(TestKotlinEnumWhen.WhenMappings.$EnumSwitchMapping$0[this.ordinal()]) {
-      case 1:
-         var10000 = "first!";
-         break;
-      case 2:
-         var10000 = "second!";
-         break;
-      case 3:
-         var10000 = "third!";
-         break;
-      default:
-         throw new NoWhenBranchMatchedException();
+      switch(this) {
+         case FIRST:
+            var10000 = "first!";
+            break;
+         case SECOND:
+            var10000 = "second!";
+            break;
+         case THIRD:
+            var10000 = "third!";
+            break;
+         default:
+            throw new NoWhenBranchMatchedException();
       }
 
       String var1 = var10000;
-      System.out.println(var1);
+      System.out.println((Object)var1);
    }
 
    public final void testAnotherEnum() {
       DeprecationLevel level = testAnotherEnum$getLevel();
-      switch(TestKotlinEnumWhen.WhenMappings.$EnumSwitchMapping$1[level.ordinal()]) {
-      case 1:
-         System.out.println("warning " + level);
-         break;
-      case 2:
-         System.out.println("error " + level);
-         break;
-      case 3:
-         System.out.println("hidden " + level);
+      switch(level) {
+         case WARNING:
+            System.out.println("warning " + level);
+            break;
+         case ERROR:
+            System.out.println("error " + level);
+            break;
+         case HIDDEN:
+            System.out.println("hidden " + level);
       }
-
    }
 
    public final void testConsecutive() {
-      switch(TestKotlinEnumWhen.WhenMappings.$EnumSwitchMapping$0[this.ordinal()]) {
-      case 1:
-         System.out.println("first!");
-         break;
-      case 2:
-         System.out.println("second!");
-         break;
-      case 3:
-         System.out.println("third!");
+      switch(this) {
+         case FIRST:
+            System.out.println("first!");
+            break;
+         case SECOND:
+            System.out.println("second!");
+            break;
+         case THIRD:
+            System.out.println("third!");
       }
 
-      switch(TestKotlinEnumWhen.WhenMappings.$EnumSwitchMapping$0[this.ordinal()]) {
-      case 1:
-         System.out.println("first, again!");
-         break;
-      case 2:
-         System.out.println("second, again!");
-         break;
-      case 3:
-         System.out.println("third, again!");
+      switch(this) {
+         case FIRST:
+            System.out.println("first, again!");
+            break;
+         case SECOND:
+            System.out.println("second, again!");
+            break;
+         case THIRD:
+            System.out.println("third, again!");
       }
-
    }
 
    public final void testConsecutiveMixed() {
       DeprecationLevel level = testConsecutiveMixed$getLevel-0();
-      switch(TestKotlinEnumWhen.WhenMappings.$EnumSwitchMapping$1[level.ordinal()]) {
-      case 1:
-         System.out.println("warning " + level);
-         break;
-      case 2:
-         System.out.println("error " + level);
-         break;
-      case 3:
-         System.out.println("hidden " + level);
+      switch(level) {
+         case WARNING:
+            System.out.println("warning " + level);
+            break;
+         case ERROR:
+            System.out.println("error " + level);
+            break;
+         case HIDDEN:
+            System.out.println("hidden " + level);
       }
 
-      switch(TestKotlinEnumWhen.WhenMappings.$EnumSwitchMapping$0[this.ordinal()]) {
-      case 1:
-         System.out.println("first!");
-         break;
-      case 2:
-         System.out.println("second!");
-         break;
-      case 3:
-         System.out.println("third!");
+      switch(this) {
+         case FIRST:
+            System.out.println("first!");
+            break;
+         case SECOND:
+            System.out.println("second!");
+            break;
+         case THIRD:
+            System.out.println("third!");
       }
-
    }
 
    private static final DeprecationLevel testAnotherEnum$getLevel() {
       throw new Exception();
    }
 
-   private static final DeprecationLevel testConsecutiveMixed$getLevel_0/* $FF was: testConsecutiveMixed$getLevel-0*/() {
+   private static final DeprecationLevel testConsecutiveMixed$getLevel_0/* $QF was: testConsecutiveMixed$getLevel-0*/() {
       throw new Exception();
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static final TestKotlinEnumWhen[] $values() {
       return new TestKotlinEnumWhen[]{FIRST, SECOND, THIRD};
    }
 
-   // $FF: synthetic class
+   // $QF: synthetic class
    @Metadata(
       mv = {1, 6, 0},
       k = 3,
       xi = 48
    )
    public class WhenMappings {
-      // $FF: synthetic field
+      // $QF: synthetic field
       public static final int[] $EnumSwitchMapping$0;
-      // $FF: synthetic field
+      // $QF: synthetic field
       public static final int[] $EnumSwitchMapping$1;
 
       static {
gen_diffs.py pkg/TestLabeledBreaks.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,6 @@
       if (a != 1) {
          System.out.println("2");
       }
-
    }
 
    public void test1(int a) {
gen_diffs.py pkg/TestLambdaGenericCall.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -8,7 +8,7 @@
 
    public void test(List<String> list, Map<String, Number[]> map) {
       list.forEach(s -> {
-         Number[] numbers = map.get(s);
+         Number[] numbers = (Number[])map.get(s);
          System.out.println(numbers[0]);
       });
    }
@@ -19,7 +19,7 @@
 
    public void test(List<String> list) {
       list.forEach(s -> {
-         Number[] numbers = this.map.get(s);
+         Number[] numbers = (Number[])this.map.get(s);
          System.out.println(numbers[0]);
       });
    }
gen_diffs.py pkg/TestLocalClassesSwitch.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,48 +3,52 @@
 public class TestLocalClassesSwitch {
    public void test(int i) {
       switch(i) {
-      case 0:
-         class LocalClass {
-            public void test() {
-               System.out.println("test");
+         case 0: {
+            class LocalClass {
+               public void test() {
+                  System.out.println("test");
+               }
             }
+
+            LocalClass lc = new LocalClass();
+            lc.test();
          }
+         default: {
+            class LocalClass {
+               public void test() {
+                  System.out.println("test1");
+               }
+            }
 
-         LocalClass lc = new LocalClass();
-         lc.test();
-      default:
-         class LocalClass {
-            public void test() {
-               System.out.println("test1");
-            }
+            LocalClass lc = new LocalClass();
+            lc.test();
          }
-
-         LocalClass lc = new LocalClass();
-         lc.test();
       }
    }
 
    public void test1(int i) {
       switch(i) {
-      case 0:
-         class LocalClass {
-            public void test() {
-               System.out.println("test");
+         case 0: {
+            class LocalClass {
+               public void test() {
+                  System.out.println("test");
+               }
             }
+
+            LocalClass lc = new LocalClass();
+            lc.test();
+            break;
          }
+         case 1: {
+            class LocalClass {
+               public void test() {
+                  System.out.println("test1");
+               }
+            }
 
-         LocalClass lc = new LocalClass();
-         lc.test();
-         break;
-      case 1:
-         class LocalClass {
-            public void test() {
-               System.out.println("test1");
-            }
+            LocalClass lc = new LocalClass();
+            lc.test();
          }
-
-         LocalClass lc = new LocalClass();
-         lc.test();
       }
 
       class LocalClass {
@@ -59,24 +63,24 @@
 
    public void test2(int i) {
       switch(i) {
-      default:
-         class LocalClass {
-            public void test() {
-               System.out.println("test");
+         default:
+            class LocalClass {
+               public void test() {
+                  System.out.println("test");
+               }
             }
-         }
 
-         LocalClass lc = new LocalClass();
-         lc.test();
+            LocalClass lc = new LocalClass();
+            lc.test();
 
-         class LocalClass {
-            public void test() {
-               System.out.println("test1");
+            class LocalClass {
+               public void test() {
+                  System.out.println("test1");
+               }
             }
-         }
 
-         LocalClass lc = new LocalClass();
-         lc.test();
+            LocalClass lcx = new LocalClass();
+            lcx.test();
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLocalEnum.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,7 @@
          VALID,
          INVALID;
 
-         // $FF: synthetic method
+         // $QF: synthetic method
          private static Type[] $values() {
             return new Type[]{VALID, INVALID};
          }
gen_diffs.py pkg/TestLocalScopeClash.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -9,16 +9,14 @@
 
    void test(boolean a, boolean b) {
       int i = 32767;
-      ++i;
-      this.acceptInt(i);
-      ++i;
-      i |= 7;
+      this.acceptInt(++i);
+      i = ++i | 7;
       i = 1 ^ i;
       i *= 2;
       i += 2;
       this.acceptInt(i);
-      i = a & a & b;
-      i ^= i || b;
-      this.acceptBoolean((boolean)i);
+      boolean var10 = a & a & b;
+      var10 ^= var10 || b;
+      this.acceptBoolean(var10);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLocalScopes.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -13,6 +13,5 @@
       for(int j = 0; j < 10; ++j) {
          i += j;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLocalsNames.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -17,6 +17,5 @@
          long elapsed = System.currentTimeMillis() - start;
          System.out.println("took " + elapsed + "ms (" + elapsed / (long)files.length + "ms per dir)");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLocalVariableMerge.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -28,6 +28,5 @@
             System.out.println("z != c");
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLocalVariableMergeSwitch.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,16 +6,15 @@
          --j;
          int i = 0;
          switch(i) {
-         case 1:
-            ++i;
-            break;
-         case 2:
-            int var10000 = i + s.length();
-            break;
-         default:
-            System.out.println("hi");
+            case 1:
+               ++i;
+               break;
+            case 2:
+               i += s.length();
+               break;
+            default:
+               System.out.println("hi");
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLoopBreak.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,13 +3,11 @@
 public class TestLoopBreak {
    public void test(int i) {
       while(i > 10) {
-         ++i;
-         if (i != 15) {
+         if (++i != 15) {
             System.out.println(0);
             continue;
          }
          break;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLoopBreak2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,8 +3,7 @@
 public class TestLoopBreak2 {
    public boolean test(int i) {
       while(i > 10) {
-         ++i;
-         if (i != 15) {
+         if (++i != 15) {
             System.out.println(0);
             return true;
          }
gen_diffs.py pkg/TestLoopBreak3.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,7 +2,6 @@
 
 public class TestLoopBreak3 {
    public void test(int i, boolean b) {
-      label33:
       for(int j = 0; j < i; ++j) {
          System.out.println(j);
 
@@ -11,7 +10,7 @@
                for(int l = 0; l < 2; ++l) {
                   System.out.println(2);
                   if (!b) {
-                     continue label33;
+                     break;
                   }
 
                   System.out.println(l);
@@ -20,6 +19,5 @@
             }
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLoopBreak4.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,7 +3,6 @@
 public class TestLoopBreak4 {
    public void test2(int h, int i, boolean b) {
       for(int h1 = 0; h1 < h; ++h1) {
-         label54:
          for(int j = 0; j < i; ++j) {
             System.out.println(j);
 
@@ -12,7 +11,7 @@
                   for(int l = 0; l < 2; ++l) {
                      System.out.println(2);
                      if (!b) {
-                        continue label54;
+                        break;
                      }
 
                      System.out.println(l);
@@ -20,7 +19,7 @@
                         for(int j1 = 0; j1 < h1; ++j1) {
                            System.out.println(h1);
                            if (j1 == 1) {
-                              continue label54;
+                              break;
                            }
 
                            System.out.println(h1);
@@ -33,6 +32,5 @@
             }
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLoopBreakException.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,8 +3,7 @@
 public class TestLoopBreakException {
    public boolean test(int i) {
       while(i > 10) {
-         ++i;
-         if (i != 15) {
+         if (++i != 15) {
             System.out.println(0);
             return true;
          }
gen_diffs.py pkg/TestLoopFinally.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -48,7 +48,7 @@
          } finally {
             System.out.println("finally");
             if (i != 5) {
-               ;
+               continue;
             }
             break;
          }
@@ -57,180 +57,65 @@
       System.out.println("after");
    }
 
-   public int test3(int param1) {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot invoke "java.util.List.size()" because the return value of "org.jetbrains.java.decompiler.modules.decompiler.stats.Statement.getExprents()" is null
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.IfStatement.initExprents(IfStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.processStatement(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: iload 1
-      // 01: bipush 1
-      // 02: if_icmpne 11
-      // 05: bipush 1
-      // 06: istore 2
-      // 07: iload 1
-      // 08: bipush 3
-      // 09: if_icmpne 0f
-      // 0c: goto 5e
-      // 0f: iload 2
-      // 10: ireturn
-      // 11: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 14: ldc "Oops"
-      // 16: invokevirtual java/io/PrintStream.println (Ljava/lang/String;)V
-      // 19: iload 1
-      // 1a: bipush 23
-      // 1c: if_icmpne 2b
-      // 1f: bipush 1
-      // 20: istore 2
-      // 21: iload 1
-      // 22: bipush 3
-      // 23: if_icmpne 29
-      // 26: goto 5e
-      // 29: iload 2
-      // 2a: ireturn
-      // 2b: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 2e: ldc "Oops"
-      // 30: invokevirtual java/io/PrintStream.println (Ljava/lang/String;)V
-      // 33: iload 1
-      // 34: bipush 25
-      // 36: if_icmpne 45
-      // 39: bipush 1
-      // 3a: istore 2
-      // 3b: iload 1
-      // 3c: bipush 3
-      // 3d: if_icmpne 43
-      // 40: goto 5e
-      // 43: iload 2
-      // 44: ireturn
-      // 45: iload 1
-      // 46: bipush 3
-      // 47: if_icmpne 58
-      // 4a: goto 5e
-      // 4d: astore 3
-      // 4e: iload 1
-      // 4f: bipush 3
-      // 50: if_icmpne 56
-      // 53: goto 5e
-      // 56: aload 3
-      // 57: athrow
-      // 58: iload 1
-      // 59: bipush 45
-      // 5b: if_icmplt 00
-      // 5e: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 61: bipush 5
-      // 62: invokevirtual java/io/PrintStream.print (I)V
-      // 65: bipush 1
-      // 66: ireturn
+   public int test3(int x) {
+      do {
+         try {
+            if (x == 1) {
+               return 1;
+            }
+
+            System.out.println("Oops");
+            if (x == 23) {
+               return 1;
+            }
+
+            System.out.println("Oops");
+            if (x == 25) {
+               return 1;
+            }
+         } finally {
+            if (x == 3) {
+               break;
+            }
+         }
+      } while(x < 45);
+
+      System.out.print(5);
+      return 1;
    }
 
-   public int test4(int param1) {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot invoke "java.util.List.size()" because the return value of "org.jetbrains.java.decompiler.modules.decompiler.stats.Statement.getExprents()" is null
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.IfStatement.initExprents(IfStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.processStatement(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: iload 1
-      // 01: bipush 25
-      // 03: if_icmpge 12
-      // 06: bipush 5
-      // 07: istore 2
-      // 08: iload 1
-      // 09: bipush 3
-      // 0a: if_icmple 10
-      // 0d: goto 2b
-      // 10: iload 2
-      // 11: ireturn
-      // 12: iload 1
-      // 13: bipush 3
-      // 14: if_icmple 25
-      // 17: goto 2b
-      // 1a: astore 3
-      // 1b: iload 1
-      // 1c: bipush 3
-      // 1d: if_icmple 23
-      // 20: goto 2b
-      // 23: aload 3
-      // 24: athrow
-      // 25: iload 1
-      // 26: bipush 45
-      // 28: if_icmplt 00
-      // 2b: bipush 1
-      // 2c: ireturn
+   public int test4(int x) {
+      do {
+         try {
+            if (x < 25) {
+               return 5;
+            }
+         } finally {
+            if (x > 3) {
+               return 1;
+            }
+         }
+      } while(x < 45);
+
+      return 1;
    }
 
-   public int test5(int param1) {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot invoke "java.util.List.size()" because the return value of "org.jetbrains.java.decompiler.modules.decompiler.stats.Statement.getExprents()" is null
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.IfStatement.initExprents(IfStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.processStatement(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: iload 1
-      // 01: bipush 25
-      // 03: if_icmpge 12
-      // 06: bipush 5
-      // 07: istore 2
-      // 08: iload 1
-      // 09: istore 3
-      // 0a: iload 1
-      // 0b: bipush 3
-      // 0c: if_icmple 33
-      // 0f: goto 31
-      // 12: iload 1
-      // 13: istore 3
-      // 14: iload 1
-      // 15: bipush 3
-      // 16: if_icmple 2b
-      // 19: goto 31
-      // 1c: astore 4
-      // 1e: iload 1
-      // 1f: istore 3
-      // 20: iload 1
-      // 21: bipush 3
-      // 22: if_icmple 28
-      // 25: goto 31
-      // 28: aload 4
-      // 2a: athrow
-      // 2b: iload 1
-      // 2c: bipush 45
-      // 2e: if_icmplt 00
-      // 31: bipush 1
-      // 32: ireturn
-      // 33: iload 2
-      // 34: iload 3
-      // 35: iadd
-      // 36: ireturn
+   public int test5(int x) {
+      do {
+         try {
+            if (x < 25) {
+               int var2 = 5;
+               byte var3;
+               return var2 + var3;
+            }
+         } finally {
+            if (x > 3) {
+               return 1;
+            }
+         }
+      } while(x < 45);
+
+      return 1;
    }
 
    public void emptyInnerFinally() {
@@ -253,6 +138,8 @@
       }
    }
 
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    public void testConditionalBreakInFinally() {
       int a = 5;
       if (a != 886) {
@@ -273,56 +160,20 @@
    }
 
    public void loopInFinally() {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot invoke "java.lang.Comparable.compareTo(Object)" because the return value of "java.util.function.Function.apply(Object)" is null
-      //   at java.base/java.util.Comparator.lambda$comparing$77a9974f$1(Comparator.java:473)
-      //   at java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)
-      //   at java.base/java.util.TimSort.sort(TimSort.java:220)
-      //   at java.base/java.util.Arrays.sort(Arrays.java:1307)
-      //   at java.base/java.util.ArrayList.sort(ArrayList.java:1721)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.calcPostDominators(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.findGeneralStatement(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.processStatement(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.processStatement(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.parseGraph(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: bipush 1
-      // 01: istore 1
-      // 02: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 05: iload 1
-      // 06: invokevirtual java/io/PrintStream.println (Z)V
-      // 09: sipush 15080
-      // 0c: istore 2
-      // 0d: iload 2
-      // 0e: sipush -14704
-      // 11: if_icmple 19
-      // 14: bipush 0
-      // 15: istore 3
-      // 16: goto 0d
-      // 19: return
-      // 1a: astore 4
-      // 1c: sipush 15080
-      // 1f: istore 5
-      // 21: iload 5
-      // 23: sipush -14704
-      // 26: if_icmple 2f
-      // 29: bipush 0
-      // 2a: istore 6
-      // 2c: goto 21
-      // 2f: return
-      // 30: astore 7
-      // 32: sipush 15080
-      // 35: istore 8
-      // 37: iload 8
-      // 39: sipush -14704
-      // 3c: if_icmple 45
-      // 3f: bipush 0
-      // 40: istore 9
-      // 42: goto 37
-      // 45: aload 7
-      // 47: athrow
+      boolean var1 = true;
+
+      try {
+         try {
+            System.out.println(var1);
+         } finally {
+            return;
+         }
+      } finally {
+         short var18 = 15080;
+
+         while(var18 > -14704) {
+            boolean var9 = false;
+         }
+      }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLoopMerging2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -9,9 +9,8 @@
          array[i] = i++;
       }
 
-      for(int i = 0; i < 256; ++i) {
-         System.out.println(array[i]);
+      for(int ix = 0; ix < 256; ++ix) {
+         System.out.println(array[ix]);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLoopReturn.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -29,14 +29,12 @@
             return;
          }
       }
-
    }
 
    public void test2(boolean b) {
       while(!b) {
          System.out.println(1);
       }
-
    }
 
    public void test2a(boolean b) {
@@ -45,7 +43,6 @@
       while(!b) {
          System.out.println(1);
       }
-
    }
 
    public void test2b(boolean b) {
gen_diffs.py pkg/TestLVT.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -25,7 +25,6 @@
          String spam = scope1a + scope2 + scope2a + i + noise;
          System.out.println(spam);
       }
-
    }
 
    public void methoda() {
gen_diffs.py pkg/TestLVTComplex.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,28 +6,28 @@
    public static void main() {
       int[] x = new int[5];
 
-      for(<unknown> var10000_1 : x) {
+      for(int x2 : x) {
          ;
       }
 
-      for(<unknown> var23_1 : x) {
+      for(int y : x) {
          System.out.println("asdf");
       }
 
       ArrayList<Object> x1 = new ArrayList<>();
 
-      for(<unknown> var18_1 : x1) {
+      for(Object var18 : x1) {
          ;
       }
 
       for(Object y : x1) {
          int[] x2 = new int[10];
 
-         for(<unknown> var24_1 : x2) {
+         for(int y2 : x2) {
             ;
          }
 
-         for(<unknown> var25_1 : x2) {
+         for(int y2 : x2) {
             System.out.println("asdf");
          }
 
@@ -35,11 +35,11 @@
       }
 
       switch(TestLVTComplex.Bob.HI) {
-      case HI:
-         System.out.println("HI");
-         break;
-      case LO:
-         System.out.println("LO");
+         case HI:
+            System.out.println("HI");
+            break;
+         case LO:
+            System.out.println("LO");
       }
 
       if (TestLVTComplex.Bob.HI == TestLVTComplex.Bob.HI) {
@@ -69,14 +69,13 @@
       static {
          for(TestLVTComplex.Bob b : values()) {
             for(TestLVTComplex.Bob c : values()) {
-               for(<unknown> var10000_1 : values()) {
+               for(TestLVTComplex.Bob d : values()) {
                   if (b == c) {
                      System.out.println("Asdf");
                   }
                }
             }
          }
-
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLVTScoping.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -19,7 +19,6 @@
          String a = "NAY";
          System.out.println(a);
       }
-
    }
 
    public static void method3() {
@@ -30,6 +29,5 @@
          String a = "NAY";
          System.out.println(a);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestMethodParamsNoLvt.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,13 +2,13 @@
 
 public class TestMethodParamsNoLvt {
    public void foo(int param0, String param1) {
-      System.out.print(var1);
-      System.out.println(var2);
+      System.out.print(param0);
+      System.out.println(param1);
    }
 
    public static void bar(int param0, int param1, String param2, int var3) {
-      System.out.print(var0);
-      System.out.print(var1);
-      System.out.println(var2);
+      System.out.print(param0);
+      System.out.print(param1);
+      System.out.println(param2);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestMissingConstructorCallBad.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,7 +2,7 @@
 
 public class TestMissingConstructorCallBad {
    private TestMissingConstructorCallBad() {
-      // $FF: Couldn't be decompiled
+      // $QF: Couldn't be decompiled
       // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
       // java.lang.RuntimeException: Constructor pkg/TestMissingConstructorCallBad.<init>(Ljava/lang/Object;)V not found
       //  at org.jetbrains.java.decompiler.modules.decompiler.exps.ExprUtil.getSyntheticParametersMask(ExprUtil.java)
@@ -28,6 +28,5 @@
          new TestMissingConstructorCallBad();
       } catch (Throwable var2) {
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestMissingConstructorCallGood.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,7 @@
 
    private TestMissingConstructorCallGood() {
       System.out.println("Nobody will see what we do here!");
-      this((Object)null);
+      this(null);
    }
 
    public static void main(String... var0) {
@@ -14,6 +14,5 @@
          new TestMissingConstructorCallGood();
       } catch (Throwable var2) {
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestMixedCompoundAssignment.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -52,34 +52,30 @@
       i >>= j = var21 >> (int)k;
       int var23;
       i <<= var23 = j << (int)k;
-      return i >>> (var23 >>> (int)k);
+      return i >>> (j = var23 >>> (int)k);
    }
 
    public void testArrayIntDouble(int[] holder, int i, double inc) {
       for(int j = 0; j < i; ++j) {
          holder[j] = (int)((double)holder[j] + inc);
       }
-
    }
 
    public void testArrayIntLong(int[] holder, int i, long inc) {
       for(int j = 0; j < i; ++j) {
          holder[j] = (int)((long)holder[j] + inc);
       }
-
    }
 
    public void testArrayDoubleInt(double[] holder, int i, int inc) {
       for(int j = 0; j < i; ++j) {
          holder[j] += (double)inc;
       }
-
    }
 
    public void testNestedArrayByteFloatLongDouble(byte[] outer, float[] holder, long[] inner, int i, double inc) {
       for(int j = 0; j < i; ++j) {
          outer[i + ~j] = (byte)((int)((float)outer[i + ~j] + (holder[j] -= (float)(inner[j * 3 % i] = (long)((double)inner[j * 3 % i] + inc)))));
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestMultiBoolean.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -17,6 +17,5 @@
       if (a && a && a || a || a) {
          System.out.println(4);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestMultipleStaticBlocks.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -9,10 +9,9 @@
          i = 1;
       }
 
-      value = (byte)((byte)((short)((int)(Math.random() * 8.0))));
+      value = (byte)((short)((int)(Math.random() * 8.0)));
       if (value > 4) {
          i = 2;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestNamedSuspendFun2Kt.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -17,26 +17,26 @@
    d2 = {"bar", "", "(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "foo2", "quiltflower_testDataKotlin"}
 )
 public final class TestNamedSuspendFun2Kt {
-   // $FF: Handled exception range with multiple entry points by splitting it
-   // $FF: Inserted dummy exception handlers to handle obfuscated exceptions
-   // $FF: Irreducible bytecode was duplicated to produce valid code
-   // $FF: Could not inline inconsistent finally blocks
+   // $QF: Handled exception range with multiple entry points by splitting it
+   // $QF: Inserted dummy exception handlers to handle obfuscated exceptions
+   // $QF: Irreducible bytecode was duplicated to produce valid code
+   // $QF: Could not inline inconsistent finally blocks
    // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    @Nullable
    public static final Object foo2(@NotNull Continuation<? super Integer> var0) {
       Continuation $continuation;
-      label381: {
+      label261: {
          if (var0 instanceof <undefinedtype>) {
             $continuation = (<undefinedtype>)var0;
             if (($continuation.label & -2147483648) != 0) {
                $continuation.label -= Integer.MIN_VALUE;
-               break label381;
+               break label261;
             }
          }
 
          $continuation = new ContinuationImpl(var0) {
             Object L$0;
-            // $FF: synthetic field
+            // $QF: synthetic field
             Object result;
             int label;
 
@@ -44,65 +44,65 @@
             public final Object invokeSuspend(@NotNull Object $result) {
                this.result = $result;
                this.label |= Integer.MIN_VALUE;
-               return TestNamedSuspendFun2Kt.foo2((Continuation)this);
+               return TestNamedSuspendFun2Kt.foo2((Continuation<? super Integer>)this);
             }
          };
       }
 
       Object var4;
-      label403: {
+      label279: {
          Throwable var10000;
-         label370: {
+         label250: {
             Object $result = $continuation.result;
             var4 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
             switch($continuation.label) {
-            case 0:
-               ResultKt.throwOnFailure($result);
-               break;
-            case 1:
-               try {
+               case 0:
                   ResultKt.throwOnFailure($result);
-                  var10000 = (Throwable)(Throwable)$result;
-               } catch (Throwable var19) {
-                  var10000 = var19;
-                  boolean var10001 = false;
-                  break label370;
-               }
+                  break;
+               case 1:
+                  try {
+                     ResultKt.throwOnFailure($result);
+                     var10000 = (Throwable)$result;
+                  } catch (Throwable var19) {
+                     var10000 = var19;
+                     boolean var10001 = false;
+                     break label250;
+                  }
 
-               try {
-                  int x = ((Number)var10000).intValue();
-                  if (x == 0) {
-                     break label403;
+                  try {
+                     int x = ((Number)var10000).intValue();
+                     if (x == 0) {
+                        break label279;
+                     }
+                  } catch (Throwable var17) {
+                     var10000 = var17;
+                     boolean var25 = false;
+                     break label250;
                   }
-               } catch (Throwable var17) {
-                  var10000 = var17;
-                  boolean var25 = false;
-                  break label370;
-               }
 
-               $continuation.label = 3;
-               if (bar($continuation) == var4) {
-                  return var4;
-               }
-               break;
-            case 2:
-               ResultKt.throwOnFailure($result);
-               return Boxing.boxInt(1);
-            case 3:
-               ResultKt.throwOnFailure($result);
-               break;
-            case 4:
-               Throwable x = (Throwable)$continuation.L$0;
-               ResultKt.throwOnFailure($result);
-               throw x;
-            default:
-               throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
+                  $continuation.label = 3;
+                  if (bar($continuation) == var4) {
+                     return var4;
+                  }
+                  break;
+               case 2:
+                  ResultKt.throwOnFailure($result);
+                  return Boxing.boxInt(1);
+               case 3:
+                  ResultKt.throwOnFailure($result);
+                  break;
+               case 4:
+                  Throwable x = (Throwable)$continuation.L$0;
+                  ResultKt.throwOnFailure($result);
+                  throw x;
+               default:
+                  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
             }
 
             while(true) {
                try {
                   $continuation.label = 1;
-                  var10000 = (Throwable)(Throwable)bar($continuation);
+                  var10000 = (Throwable)bar($continuation);
                } catch (Throwable var18) {
                   var10000 = var18;
                   boolean var26 = false;
@@ -116,7 +116,7 @@
                try {
                   int var22 = ((Number)var10000).intValue();
                   if (var22 == 0) {
-                     break label403;
+                     break label279;
                   }
                } catch (Throwable var20) {
                   var10000 = var20;
gen_diffs.py pkg/TestNestedLoops.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -16,7 +16,7 @@
             for(int j = 0; j < 20; ++j) {
                do {
                   s.substring(j);
-               } while(s.length() < j);
+               } while(s.length() >= j);
             }
          }
 
@@ -34,12 +34,11 @@
                for(int j = 0; j < 20; ++j) {
                   do {
                      s.substring(j);
-                  } while(s.length() < j);
+                  } while(s.length() >= j);
                }
             }
 
             ++i;
-            continue;
          }
       }
    }
gen_diffs.py pkg/TestNestedTernaryAssign.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -13,7 +13,6 @@
       } else {
          4;
       }
-
    }
 
    public void test2(boolean b1, boolean b2, boolean b3) {
@@ -22,7 +21,6 @@
       } else {
          String var5 = b3 ? "4" : "44";
       }
-
    }
 
    public void test3(boolean b1, boolean b2, int a, int b) {
@@ -31,65 +29,11 @@
    }
 
    public void test4(boolean b1, int a, int b) {
-      byte var10000;
-      label17: {
-         label16: {
-            if (b1) {
-               if (a > b) {
-                  break label16;
-               }
-            } else if (a < b) {
-               break label16;
-            }
-
-            var10000 = 16;
-            break label17;
-         }
-
-         var10000 = 0;
-      }
-
-      accept(var10000);
+      accept((b1 ? a <= b : a >= b) ? 16 : 0);
    }
 
    public void test5(boolean b1, boolean b2, int a, int b) {
-      byte var10000;
-      label31: {
-         label30: {
-            if (b1) {
-               if (a > b) {
-                  break label30;
-               }
-            } else if (a < b) {
-               break label30;
-            }
-
-            var10000 = 16;
-            break label31;
-         }
-
-         var10000 = 0;
-      }
-
-      byte var10001;
-      label23: {
-         label22: {
-            if (b2) {
-               if (a > b) {
-                  break label22;
-               }
-            } else if (a < b) {
-               break label22;
-            }
-
-            var10001 = 16;
-            break label23;
-         }
-
-         var10001 = 0;
-      }
-
-      accept(var10000, var10001);
+      accept((b1 ? a <= b : a >= b) ? 16 : 0, (b2 ? a <= b : a >= b) ? 16 : 0);
    }
 
    private static void accept(int i) {
gen_diffs.py pkg/TestNestedTernaryCondition.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,19 +2,10 @@
 
 public class TestNestedTernaryCondition {
    public void test(boolean bl, int a, int b) {
-      label23: {
-         if (bl) {
-            if (a > b) {
-               break label23;
-            }
-         } else if (a < b) {
-            break label23;
-         }
-
-         boolean var10000 = true;
-         return;
+      if (bl ? a <= b : a >= b) {
+         boolean var5 = true;
+      } else {
+         boolean var10000 = false;
       }
-
-      boolean var5 = false;
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestNoUse.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,27 +4,17 @@
    private int[] a = new int[10];
 
    public void test(boolean var1, int var2) {
-      int var10003 = this.a[0];
-      int var10000 = this.a[0];
-      this.a[0] = var10003 + 1;
-      int var3 = var10000;
-      var10003 = this.a[1];
-      var10000 = this.a[1];
-      this.a[1] = var10003 + 1;
+      int var3 = this.a[0]++;
+      this.a[1]++;
       if (var1) {
-         var10003 = this.a[2];
-         var10000 = this.a[2];
-         this.a[2] = var10003 + 1;
+         this.a[2]++;
       }
 
       System.out.println(var3);
    }
 
    public void testPPI(boolean var1, int var2) {
-      int var10003 = this.a[0];
-      int var10000 = this.a[0];
-      this.a[0] = var10003 + 1;
-      int var3 = var10000;
+      int var3 = this.a[0]++;
       int var4 = ++this.a[1];
       if (var1) {
          var4 = ++this.a[2];
@@ -34,27 +24,17 @@
    }
 
    public void testNeg(boolean var1, int var2) {
-      int var10003 = this.a[0];
-      int var10000 = this.a[0];
-      this.a[0] = var10003 + 1;
-      int var3 = var10000;
-      var10003 = this.a[1];
-      var10000 = this.a[1];
-      this.a[1] = var10003 - 1;
+      int var3 = this.a[0]++;
+      this.a[1]--;
       if (var1) {
-         var10003 = this.a[2];
-         var10000 = this.a[2];
-         this.a[2] = var10003 - 1;
+         this.a[2]--;
       }
 
       System.out.println(var3);
    }
 
    public void test1(boolean var1, int var2) {
-      int var10003 = this.a[0];
-      int var10000 = this.a[0];
-      this.a[0] = var10003 + 1;
-      int var3 = var10000;
+      int var3 = this.a[0]++;
       ++var2;
       if (var1) {
          ++var2;
@@ -68,18 +48,10 @@
    }
 
    public void testUse(boolean var1, int var2) {
-      int var10003 = this.a[0];
-      int var10000 = this.a[0];
-      this.a[0] = var10003 + 1;
-      var10003 = this.a[1];
-      var10000 = this.a[1];
-      this.a[1] = var10003 + 1;
-      int var4 = var10000;
+      this.a[0]++;
+      int var4 = this.a[1]++;
       if (var1) {
-         var10003 = this.a[2];
-         var10000 = this.a[2];
-         this.a[2] = var10003 + 1;
-         var4 = var10000;
+         var4 = this.a[2]++;
       }
 
       System.out.println(var4);
gen_diffs.py pkg/TestObjectArrays.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -21,7 +21,7 @@
             this.x *= 3 * this.x;
             System.out.println("Hi!");
             this.x += 224;
-            this.hashcode = (new Random()).nextInt() + this.x;
+            this.hashcode = new Random().nextInt() + this.x;
          }
 
          @Override
gen_diffs.py pkg/TestObjectPhi.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,30 +2,13 @@
 
 public class TestObjectPhi {
    public Object example(boolean bool) {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.RuntimeException: invalid constant type: Ljava/lang/Object;
-      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.ConstExprent.toJava(ConstExprent.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent.toJava(AssignmentExprent.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.listToJava(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.BasicBlockStatement.toJava(BasicBlockStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.IfStatement.toJava(IfStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.jmpWrapper(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.SequenceStatement.toJava(SequenceStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement.toJava(RootStatement.java)
-      //  at org.jetbrains.java.decompiler.main.ClassWriter.methodToJava(ClassWriter.java)
-      //
-      // Bytecode:
-      // 0: ldc ""
-      // 2: astore 2
-      // 3: iload 1
-      // 4: ifeq c
-      // 7: aconst_null
-      // 8: astore 2
-      // 9: goto e
-      // c: aconst_null
-      // d: astore 2
-      // e: aload 2
-      // f: areturn
+      Object value = "";
+      if (bool) {
+         value = null;
+      } else {
+         value = null;
+      }
+
+      return value;
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestOldECJInner.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -15,7 +15,7 @@
    }
 
    private static TestOldECJInner.Inner test() {
-      // $FF: Couldn't be decompiled
+      // $QF: Couldn't be decompiled
       // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
       // java.lang.RuntimeException: Constructor pkg/TestOldECJInner.<init>(Lpkg/TestOldECJInner;Lpkg/TestOldECJInner$Inner;)V not found
       //  at org.jetbrains.java.decompiler.modules.decompiler.exps.ExprUtil.getSyntheticParametersMask(ExprUtil.java)
@@ -41,7 +41,7 @@
       private Inner() {
       }
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       Inner(TestOldECJInner.Inner var2) {
          this();
       }
gen_diffs.py pkg/TestOperatorPrecedence.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -24,7 +24,6 @@
 
    static void testNoBox() {
       int a = 3;
-      ++a;
-      System.out.println(a++ + a);
+      System.out.println(++a + ++a);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatching.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,11 +2,9 @@
 
 public class TestPatternMatching {
    public void testSimple(Object obj) {
-      if (obj instanceof String) {
-         String str = (String)obj;
+      if (obj instanceof String str) {
          System.out.println(str.length());
       }
-
    }
 
    public void testInverted(Object obj) {
@@ -15,17 +13,12 @@
       } else {
          System.out.println("Oh no");
       }
-
    }
 
    public void testCompound(Object obj) {
-      if (obj instanceof String) {
-         String str = (String)obj;
-         if (str.contains("hi")) {
-            System.out.println(str.length());
-         }
+      if (obj instanceof String str && str.contains("hi")) {
+         System.out.println(str.length());
       }
-
    }
 
    public void testSimpleLoop(Object obj) {
@@ -34,7 +27,6 @@
          System.out.println(str.length());
          obj = str.intern();
       }
-
    }
 
    public void testSimpleLoopUnused(Object obj) {
@@ -42,7 +34,6 @@
          String str = (String)obj;
          obj = obj.hashCode() + "";
       }
-
    }
 
    public void testInvertedLoop(Object obj) {
@@ -65,71 +56,38 @@
    }
 
    public void testCompoundLoop(Object obj) {
-      while(obj instanceof String) {
-         String str = (String)obj;
-         if (str.contains("hi")) {
-            obj = str.substring(1);
-            continue;
-         }
-         break;
+      while(obj instanceof String str && str.contains("hi")) {
+         obj = str.substring(1);
       }
-
    }
 
    public boolean testReturn(Object obj) {
-      if (obj instanceof String) {
-         String s = (String)obj;
-         if (s.length() > 5) {
-            return true;
-         }
+      if (obj instanceof String s && s.length() > 5) {
+         return true;
       }
 
       return false;
    }
 
    public int testReturnTernary(Object obj) {
-      int var10000;
-      if (obj instanceof String) {
-         String s = (String)obj;
-         var10000 = s.length();
-      } else {
-         var10000 = 0;
-      }
-
-      return var10000;
+      return obj instanceof String s ? s.length() : 0;
    }
 
    public int testReturnTernaryComplex(Object obj) {
-      if (obj instanceof String) {
-         String s = (String)obj;
-         if (s.length() > 5) {
-            return 4;
-         }
-      }
-
-      return !(obj instanceof Integer) ? 1 : 4;
+      return (!(obj instanceof String s) || s.length() <= 5) && !(obj instanceof Integer) ? 1 : 4;
    }
 
    public void testLoop(Object obj) {
-      while(obj instanceof String) {
-         String s = (String)obj;
-         if (s.length() > 10) {
-            s = s.substring(1);
-            obj = s.substring(1);
-            System.out.println(s);
-            continue;
-         }
-         break;
+      while(obj instanceof String s && s.length() > 10) {
+         String var4 = s.substring(1);
+         obj = var4.substring(1);
+         System.out.println(var4);
       }
-
    }
 
    public void testSimpleReturn(Object obj) {
-      if (obj instanceof String) {
-         String str = (String)obj;
-         if (str.length() > 5) {
-            return;
-         }
+      if (obj instanceof String str && str.length() > 5) {
+         return;
       }
 
       System.out.println("test");
@@ -145,10 +103,8 @@
       String g = "g";
       String h = "h";
       String var10 = "i";
-      if (obj instanceof String) {
-         a = (String)obj;
-         System.out.println(a.length());
+      if (obj instanceof String str) {
+         System.out.println(str.length());
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatching17.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,11 +2,9 @@
 
 public class TestPatternMatching17 {
    public void testSimple(Object obj) {
-      if (obj instanceof String) {
-         String str = (String)obj;
+      if (obj instanceof String str) {
          System.out.println(str.length());
       }
-
    }
 
    public void testInverted(Object obj) {
@@ -15,17 +13,12 @@
       } else {
          System.out.println("Oh no");
       }
-
    }
 
    public void testCompound(Object obj) {
-      if (obj instanceof String) {
-         String str = (String)obj;
-         if (str.contains("hi")) {
-            System.out.println(str.length());
-         }
+      if (obj instanceof String str && str.contains("hi")) {
+         System.out.println(str.length());
       }
-
    }
 
    public void testSimpleLoop(Object obj) {
@@ -34,7 +27,6 @@
          System.out.println(str.length());
          obj = str.intern();
       }
-
    }
 
    public void testSimpleLoopUnused(Object obj) {
@@ -42,7 +34,6 @@
          String str = (String)obj;
          obj = obj.hashCode() + "";
       }
-
    }
 
    public void testInvertedLoop(Object obj) {
@@ -65,71 +56,38 @@
    }
 
    public void testCompoundLoop(Object obj) {
-      while(obj instanceof String) {
-         String str = (String)obj;
-         if (str.contains("hi")) {
-            obj = str.substring(1);
-            continue;
-         }
-         break;
+      while(obj instanceof String str && str.contains("hi")) {
+         obj = str.substring(1);
       }
-
    }
 
    public boolean testReturn(Object obj) {
-      if (obj instanceof String) {
-         String s = (String)obj;
-         if (s.length() > 5) {
-            return true;
-         }
+      if (obj instanceof String s && s.length() > 5) {
+         return true;
       }
 
       return false;
    }
 
    public int testReturnTernary(Object obj) {
-      int var10000;
-      if (obj instanceof String) {
-         String s = (String)obj;
-         var10000 = s.length();
-      } else {
-         var10000 = 0;
-      }
-
-      return var10000;
+      return obj instanceof String s ? s.length() : 0;
    }
 
    public int testReturnTernaryComplex(Object obj) {
-      if (obj instanceof String) {
-         String s = (String)obj;
-         if (s.length() > 5) {
-            return 4;
-         }
-      }
-
-      return !(obj instanceof Integer) ? 1 : 4;
+      return (!(obj instanceof String s) || s.length() <= 5) && !(obj instanceof Integer) ? 1 : 4;
    }
 
    public void testLoop(Object obj) {
-      while(obj instanceof String) {
-         String s = (String)obj;
-         if (s.length() > 10) {
-            s = s.substring(1);
-            obj = s.substring(1);
-            System.out.println(s);
-            continue;
-         }
-         break;
+      while(obj instanceof String s && s.length() > 10) {
+         String var3 = s.substring(1);
+         obj = var3.substring(1);
+         System.out.println(var3);
       }
-
    }
 
    public void testSimpleReturn(Object obj) {
-      if (obj instanceof String) {
-         String str = (String)obj;
-         if (str.length() > 5) {
-            return;
-         }
+      if (obj instanceof String str && str.length() > 5) {
+         return;
       }
 
       System.out.println("test");
@@ -145,10 +103,8 @@
       String g = "g";
       String h = "h";
       String var10 = "i";
-      if (obj instanceof String) {
-         a = (String)obj;
-         System.out.println(a.length());
+      if (obj instanceof String str) {
+         System.out.println(str.length());
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatching17Fake.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,32 +2,25 @@
 
 public class TestPatternMatching17Fake {
    public void test1(Object obj) {
-      if (obj instanceof Integer) {
-         Integer i = (Integer)obj;
+      if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
 
-      if (obj instanceof Integer) {
-         Integer i = (Integer)obj;
+      if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void test1A(Object obj) {
-      if (obj instanceof Integer) {
-         Integer i = (Integer)obj;
+      if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void test1B(Object obj) {
-      if (obj instanceof Integer) {
-         Integer i = (Integer)obj;
+      if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void test2(Object obj) {
@@ -35,22 +28,18 @@
          System.out.println(1 + (Integer)obj);
       }
 
-      if (obj instanceof Integer) {
-         Integer i = (Integer)obj;
+      if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void testClash(Object obj) {
-      if (obj instanceof String) {
-         String s = (String)obj;
+      if (obj instanceof String s) {
          System.out.println(s.length());
       } else {
          int s = 0;
          System.out.println(s);
       }
-
    }
 
    public void test3(Object obj) {
@@ -65,6 +54,5 @@
       if (i != null) {
          System.out.println(i);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatching17FakeLoops.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,6 @@
          String s = (String)o;
          System.out.println(s.length());
       }
-
    }
 
    void test2(Object o) {
@@ -15,7 +14,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3(Object o) {
@@ -23,7 +21,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3B(Object o) {
@@ -52,17 +49,13 @@
 
    void test4x(Object o) {
       while(true) {
+         label13:
          if (o.hashCode() >= 0) {
-            label18: {
-               if (o instanceof String) {
-                  String x = (String)o;
-                  if (!x.isEmpty()) {
-                     break label18;
-                  }
-               }
+            if (o instanceof String x && !x.isEmpty()) {
+               break label13;
+            }
 
-               return;
-            }
+            return;
          }
 
          String s = (String)o;
@@ -88,18 +81,14 @@
 
    void test4xB(Object o) {
       while(true) {
+         label13:
          if (o.hashCode() >= 0) {
-            label18: {
-               if (o instanceof String) {
-                  String x = (String)o;
-                  if (!x.isEmpty()) {
-                     break label18;
-                  }
-               }
+            if (o instanceof String x && !x.isEmpty()) {
+               break label13;
+            }
 
-               System.out.println("bye");
-               return;
-            }
+            System.out.println("bye");
+            return;
          }
 
          String s = (String)o;
@@ -112,7 +101,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3BSwap(Object o) {
@@ -138,20 +126,7 @@
    }
 
    void test4xSwap(Object o) {
-      while(true) {
-         label13: {
-            if (o instanceof String) {
-               String x = (String)o;
-               if (!x.isEmpty()) {
-                  break label13;
-               }
-            }
-
-            if (o.hashCode() >= 0) {
-               return;
-            }
-         }
-
+      while(o instanceof String x && !x.isEmpty() || o.hashCode() < 0) {
          String s = (String)o;
          System.out.println(s);
       }
@@ -172,24 +147,12 @@
    }
 
    void test4xBSwap(Object o) {
-      while(true) {
-         label13: {
-            if (o instanceof String) {
-               String x = (String)o;
-               if (!x.isEmpty()) {
-                  break label13;
-               }
-            }
-
-            if (o.hashCode() >= 0) {
-               System.out.println("bye");
-               return;
-            }
-         }
-
+      while(o instanceof String x && !x.isEmpty() || o.hashCode() < 0) {
          String s = (String)o;
          System.out.println(s);
       }
+
+      System.out.println("bye");
    }
 
    public void testSet(Object obj) {
@@ -215,6 +178,5 @@
       if (i != null) {
          System.out.println(i);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatching17FakeLoopsInverted.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,6 @@
          String s = (String)o;
          System.out.println(s.length());
       }
-
    }
 
    void test2(Object o) {
@@ -23,7 +22,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3B(Object o) {
@@ -37,43 +35,44 @@
 
    void test4(Object o) {
       while(o.hashCode() >= 0) {
-         if (o instanceof String) {
-            String x = (String)o;
+         if (!(o instanceof String s)) {
+            System.out.println(s);
+            continue;
+         }
+
+         String x = (String)o;
+         break;
+      }
+   }
+
+   void test4x(Object o) {
+      while(o.hashCode() >= 0) {
+         if (o instanceof String x && !x.isEmpty()) {
             break;
          }
 
          String s = (String)o;
          System.out.println(s);
       }
-
-   }
-
-   void test4x(Object o) {
-      while(true) {
-         label14: {
-            if (o.hashCode() >= 0) {
-               if (!(o instanceof String)) {
-                  break label14;
-               }
-
-               String x = (String)o;
-               if (x.isEmpty()) {
-                  break label14;
-               }
-            }
-
-            return;
-         }
-
-         String s = (String)o;
-         System.out.println(s);
-      }
    }
 
    void test4B(Object o) {
       while(o.hashCode() >= 0) {
-         if (o instanceof String) {
-            String x = (String)o;
+         if (!(o instanceof String s)) {
+            System.out.println(s);
+            continue;
+         }
+
+         String x = (String)o;
+         break;
+      }
+
+      System.out.println("bye");
+   }
+
+   void test4xB(Object o) {
+      while(o.hashCode() >= 0) {
+         if (o instanceof String x && !x.isEmpty()) {
             break;
          }
 
@@ -82,29 +81,6 @@
       }
 
       System.out.println("bye");
-   }
-
-   void test4xB(Object o) {
-      while(true) {
-         label14: {
-            if (o.hashCode() >= 0) {
-               if (!(o instanceof String)) {
-                  break label14;
-               }
-
-               String x = (String)o;
-               if (x.isEmpty()) {
-                  break label14;
-               }
-            }
-
-            System.out.println("bye");
-            return;
-         }
-
-         String s = (String)o;
-         System.out.println(s);
-      }
    }
 
    void test3Swap(Object o) {
@@ -112,7 +88,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3BSwap(Object o) {
@@ -139,22 +114,10 @@
    }
 
    void test4xSwap(Object o) {
-      while(true) {
-         if (o instanceof String) {
-            String x = (String)o;
-            if (!x.isEmpty()) {
-               break;
-            }
-         }
-
-         if (o.hashCode() < 0) {
-            break;
-         }
-
-         String s = (String)o;
-         System.out.println(s);
-      }
-
+      while((!(o instanceof String x) || x.isEmpty()) && o.hashCode() >= 0) {
+         String s = (String)o;
+         System.out.println(s);
+      }
    }
 
    void test4BSwap(Object o) {
@@ -173,18 +136,7 @@
    }
 
    void test4xBSwap(Object o) {
-      while(true) {
-         if (o instanceof String) {
-            String x = (String)o;
-            if (!x.isEmpty()) {
-               break;
-            }
-         }
-
-         if (o.hashCode() < 0) {
-            break;
-         }
-
+      while((!(o instanceof String x) || x.isEmpty()) && o.hashCode() >= 0) {
          String s = (String)o;
          System.out.println(s);
       }
@@ -235,8 +187,22 @@
 
    void test4A(Object o) {
       while(o.hashCode() >= 0) {
-         if (o instanceof String) {
-            String x = (String)o;
+         if (!(o instanceof String s)) {
+            System.out.println(s);
+            continue;
+         }
+
+         String x = (String)o;
+         break;
+      }
+
+      String u = (String)o;
+      System.out.println(u.hashCode() + u.length());
+   }
+
+   void test4xA(Object o) {
+      while(o.hashCode() >= 0) {
+         if (o instanceof String x && !x.isEmpty()) {
             break;
          }
 
@@ -246,30 +212,6 @@
 
       String u = (String)o;
       System.out.println(u.hashCode() + u.length());
-   }
-
-   void test4xA(Object o) {
-      while(true) {
-         label14: {
-            if (o.hashCode() >= 0) {
-               if (!(o instanceof String)) {
-                  break label14;
-               }
-
-               String x = (String)o;
-               if (x.isEmpty()) {
-                  break label14;
-               }
-            }
-
-            String u = (String)o;
-            System.out.println(u.hashCode() + u.length());
-            return;
-         }
-
-         String s = (String)o;
-         System.out.println(s);
-      }
    }
 
    void test3ASwap(Object o) {
@@ -299,18 +241,7 @@
    }
 
    void test4xASwap(Object o) {
-      while(true) {
-         if (o instanceof String) {
-            String x = (String)o;
-            if (!x.isEmpty()) {
-               break;
-            }
-         }
-
-         if (o.hashCode() < 0) {
-            break;
-         }
-
+      while((!(o instanceof String x) || x.isEmpty()) && o.hashCode() >= 0) {
          String s = (String)o;
          System.out.println(s);
       }
gen_diffs.py pkg/TestPatternMatching17FakeNew.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,33 +2,26 @@
 
 public class TestPatternMatching17FakeNew {
    void test1(Object o) {
-      if (o instanceof String) {
-         String s = (String)o;
+      if (o instanceof String s) {
          System.out.println(s.length());
       }
-
    }
 
    void test2(Object o) {
-      if (o instanceof String) {
-         String x = (String)o;
+      if (o instanceof String x) {
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3(Object o) {
-      if (o.hashCode() < 0 || o instanceof String) {
-         String s = (String)o;
+      if (o.hashCode() < 0 || o instanceof String s) {
          System.out.println(s);
       }
-
    }
 
    void test3B(Object o) {
-      if (o.hashCode() < 0 || o instanceof String) {
-         String s = (String)o;
+      if (o.hashCode() < 0 || o instanceof String s) {
          System.out.println(s);
       }
 
@@ -102,16 +95,13 @@
    }
 
    void test3Swap(Object o) {
-      if (o instanceof String || o.hashCode() < 0) {
-         String s = (String)o;
+      if (o instanceof String s || o.hashCode() < 0) {
          System.out.println(s);
       }
-
    }
 
    void test3BSwap(Object o) {
-      if (o instanceof String || o.hashCode() < 0) {
-         String s = (String)o;
+      if (o instanceof String s || o.hashCode() < 0) {
          System.out.println(s);
       }
 
@@ -130,21 +120,10 @@
    }
 
    void test4xSwap(Object o) {
-      label14: {
-         if (o instanceof String) {
-            String x = (String)o;
-            if (!x.isEmpty()) {
-               break label14;
-            }
-         }
-
-         if (o.hashCode() >= 0) {
-            return;
-         }
+      if (o instanceof String x && !x.isEmpty() || o.hashCode() < 0) {
+         String s = (String)o;
+         System.out.println(s);
       }
-
-      String s = (String)o;
-      System.out.println(s);
    }
 
    void test4BSwap(Object o) {
@@ -163,20 +142,7 @@
    }
 
    void test4xBSwap(Object o) {
-      label15: {
-         label14: {
-            if (o instanceof String) {
-               String x = (String)o;
-               if (!x.isEmpty()) {
-                  break label14;
-               }
-            }
-
-            if (o.hashCode() >= 0) {
-               break label15;
-            }
-         }
-
+      if (o instanceof String x && !x.isEmpty() || o.hashCode() < 0) {
          String s = (String)o;
          System.out.println(s);
       }
@@ -185,14 +151,12 @@
    }
 
    public void testClash(Object obj) {
-      if (obj instanceof String) {
-         String s = (String)obj;
+      if (obj instanceof String s) {
          System.out.println(s.length());
       } else {
          int s = 0;
          System.out.println(s);
       }
-
    }
 
    public void testSet(Object obj) {
gen_diffs.py pkg/TestPatternMatchingAssign.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,11 +2,9 @@
 
 public class TestPatternMatchingAssign {
    public void test(Object var1) {
-      if (var1 instanceof String) {
-         String var2 = (String)var1;
-         var2 = "hello";
-         System.out.println(var2);
+      if (var1 instanceof String var2) {
+         String var4 = "hello";
+         System.out.println(var4);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatchingFake.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,32 +2,25 @@
 
 public class TestPatternMatchingFake {
    public void test1(Object obj) {
-      if (obj instanceof Integer) {
-         Integer i = (Integer)obj;
+      if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
 
-      if (obj instanceof Integer) {
-         Integer i = (Integer)obj;
+      if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void test1A(Object obj) {
-      if (obj instanceof Integer) {
-         Integer i = (Integer)obj;
+      if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void test1B(Object obj) {
-      if (obj instanceof Integer) {
-         Integer i = (Integer)obj;
+      if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void test2(Object obj) {
@@ -35,22 +28,18 @@
          System.out.println(1 + (Integer)obj);
       }
 
-      if (obj instanceof Integer) {
-         Integer i = (Integer)obj;
+      if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void testClash(Object obj) {
-      if (obj instanceof String) {
-         String s = (String)obj;
+      if (obj instanceof String s) {
          System.out.println(s.length());
       } else {
          int s = 0;
          System.out.println(s);
       }
-
    }
 
    public void test3(Object obj) {
@@ -65,6 +54,5 @@
       if (i != null) {
          System.out.println(i);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatchingFakeLoops.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,6 @@
          String s = (String)o;
          System.out.println(s.length());
       }
-
    }
 
    void test2(Object o) {
@@ -15,7 +14,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3(Object o) {
@@ -23,7 +21,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3B(Object o) {
@@ -52,17 +49,13 @@
 
    void test4x(Object o) {
       while(true) {
+         label13:
          if (o.hashCode() >= 0) {
-            label18: {
-               if (o instanceof String) {
-                  String x = (String)o;
-                  if (!x.isEmpty()) {
-                     break label18;
-                  }
-               }
+            if (o instanceof String x && !x.isEmpty()) {
+               break label13;
+            }
 
-               return;
-            }
+            return;
          }
 
          String s = (String)o;
@@ -88,18 +81,14 @@
 
    void test4xB(Object o) {
       while(true) {
+         label13:
          if (o.hashCode() >= 0) {
-            label18: {
-               if (o instanceof String) {
-                  String x = (String)o;
-                  if (!x.isEmpty()) {
-                     break label18;
-                  }
-               }
+            if (o instanceof String x && !x.isEmpty()) {
+               break label13;
+            }
 
-               System.out.println("bye");
-               return;
-            }
+            System.out.println("bye");
+            return;
          }
 
          String s = (String)o;
@@ -112,7 +101,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3BSwap(Object o) {
@@ -138,20 +126,7 @@
    }
 
    void test4xSwap(Object o) {
-      while(true) {
-         label13: {
-            if (o instanceof String) {
-               String x = (String)o;
-               if (!x.isEmpty()) {
-                  break label13;
-               }
-            }
-
-            if (o.hashCode() >= 0) {
-               return;
-            }
-         }
-
+      while(o instanceof String x && !x.isEmpty() || o.hashCode() < 0) {
          String s = (String)o;
          System.out.println(s);
       }
@@ -172,24 +147,12 @@
    }
 
    void test4xBSwap(Object o) {
-      while(true) {
-         label13: {
-            if (o instanceof String) {
-               String x = (String)o;
-               if (!x.isEmpty()) {
-                  break label13;
-               }
-            }
-
-            if (o.hashCode() >= 0) {
-               System.out.println("bye");
-               return;
-            }
-         }
-
+      while(o instanceof String x && !x.isEmpty() || o.hashCode() < 0) {
          String s = (String)o;
          System.out.println(s);
       }
+
+      System.out.println("bye");
    }
 
    public void testSet(Object obj) {
@@ -215,6 +178,5 @@
       if (i != null) {
          System.out.println(i);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatchingFakeLoopsInverted.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,6 @@
          String s = (String)o;
          System.out.println(s.length());
       }
-
    }
 
    void test2(Object o) {
@@ -23,7 +22,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3B(Object o) {
@@ -37,43 +35,44 @@
 
    void test4(Object o) {
       while(o.hashCode() >= 0) {
-         if (o instanceof String) {
-            String x = (String)o;
+         if (!(o instanceof String s)) {
+            System.out.println(s);
+            continue;
+         }
+
+         String x = (String)o;
+         break;
+      }
+   }
+
+   void test4x(Object o) {
+      while(o.hashCode() >= 0) {
+         if (o instanceof String x && !x.isEmpty()) {
             break;
          }
 
          String s = (String)o;
          System.out.println(s);
       }
-
-   }
-
-   void test4x(Object o) {
-      while(true) {
-         label14: {
-            if (o.hashCode() >= 0) {
-               if (!(o instanceof String)) {
-                  break label14;
-               }
-
-               String x = (String)o;
-               if (x.isEmpty()) {
-                  break label14;
-               }
-            }
-
-            return;
-         }
-
-         String s = (String)o;
-         System.out.println(s);
-      }
    }
 
    void test4B(Object o) {
       while(o.hashCode() >= 0) {
-         if (o instanceof String) {
-            String x = (String)o;
+         if (!(o instanceof String s)) {
+            System.out.println(s);
+            continue;
+         }
+
+         String x = (String)o;
+         break;
+      }
+
+      System.out.println("bye");
+   }
+
+   void test4xB(Object o) {
+      while(o.hashCode() >= 0) {
+         if (o instanceof String x && !x.isEmpty()) {
             break;
          }
 
@@ -82,29 +81,6 @@
       }
 
       System.out.println("bye");
-   }
-
-   void test4xB(Object o) {
-      while(true) {
-         label14: {
-            if (o.hashCode() >= 0) {
-               if (!(o instanceof String)) {
-                  break label14;
-               }
-
-               String x = (String)o;
-               if (x.isEmpty()) {
-                  break label14;
-               }
-            }
-
-            System.out.println("bye");
-            return;
-         }
-
-         String s = (String)o;
-         System.out.println(s);
-      }
    }
 
    void test3Swap(Object o) {
@@ -112,7 +88,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3BSwap(Object o) {
@@ -139,22 +114,10 @@
    }
 
    void test4xSwap(Object o) {
-      while(true) {
-         if (o instanceof String) {
-            String x = (String)o;
-            if (!x.isEmpty()) {
-               break;
-            }
-         }
-
-         if (o.hashCode() < 0) {
-            break;
-         }
-
-         String s = (String)o;
-         System.out.println(s);
-      }
-
+      while((!(o instanceof String x) || x.isEmpty()) && o.hashCode() >= 0) {
+         String s = (String)o;
+         System.out.println(s);
+      }
    }
 
    void test4BSwap(Object o) {
@@ -173,18 +136,7 @@
    }
 
    void test4xBSwap(Object o) {
-      while(true) {
-         if (o instanceof String) {
-            String x = (String)o;
-            if (!x.isEmpty()) {
-               break;
-            }
-         }
-
-         if (o.hashCode() < 0) {
-            break;
-         }
-
+      while((!(o instanceof String x) || x.isEmpty()) && o.hashCode() >= 0) {
          String s = (String)o;
          System.out.println(s);
       }
@@ -235,8 +187,22 @@
 
    void test4A(Object o) {
       while(o.hashCode() >= 0) {
-         if (o instanceof String) {
-            String x = (String)o;
+         if (!(o instanceof String s)) {
+            System.out.println(s);
+            continue;
+         }
+
+         String x = (String)o;
+         break;
+      }
+
+      String u = (String)o;
+      System.out.println(u.hashCode() + u.length());
+   }
+
+   void test4xA(Object o) {
+      while(o.hashCode() >= 0) {
+         if (o instanceof String x && !x.isEmpty()) {
             break;
          }
 
@@ -246,30 +212,6 @@
 
       String u = (String)o;
       System.out.println(u.hashCode() + u.length());
-   }
-
-   void test4xA(Object o) {
-      while(true) {
-         label14: {
-            if (o.hashCode() >= 0) {
-               if (!(o instanceof String)) {
-                  break label14;
-               }
-
-               String x = (String)o;
-               if (x.isEmpty()) {
-                  break label14;
-               }
-            }
-
-            String u = (String)o;
-            System.out.println(u.hashCode() + u.length());
-            return;
-         }
-
-         String s = (String)o;
-         System.out.println(s);
-      }
    }
 
    void test3ASwap(Object o) {
@@ -299,18 +241,7 @@
    }
 
    void test4xASwap(Object o) {
-      while(true) {
-         if (o instanceof String) {
-            String x = (String)o;
-            if (!x.isEmpty()) {
-               break;
-            }
-         }
-
-         if (o.hashCode() < 0) {
-            break;
-         }
-
+      while((!(o instanceof String x) || x.isEmpty()) && o.hashCode() >= 0) {
          String s = (String)o;
          System.out.println(s);
       }
gen_diffs.py pkg/TestPatternMatchingFakeNew.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,33 +2,26 @@
 
 public class TestPatternMatchingFakeNew {
    void test1(Object o) {
-      if (o instanceof String) {
-         String s = (String)o;
+      if (o instanceof String s) {
          System.out.println(s.length());
       }
-
    }
 
    void test2(Object o) {
-      if (o instanceof String) {
-         String x = (String)o;
+      if (o instanceof String x) {
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3(Object o) {
-      if (o.hashCode() < 0 || o instanceof String) {
-         String s = (String)o;
+      if (o.hashCode() < 0 || o instanceof String s) {
          System.out.println(s);
       }
-
    }
 
    void test3B(Object o) {
-      if (o.hashCode() < 0 || o instanceof String) {
-         String s = (String)o;
+      if (o.hashCode() < 0 || o instanceof String s) {
          System.out.println(s);
       }
 
@@ -102,16 +95,13 @@
    }
 
    void test3Swap(Object o) {
-      if (o instanceof String || o.hashCode() < 0) {
-         String s = (String)o;
+      if (o instanceof String s || o.hashCode() < 0) {
          System.out.println(s);
       }
-
    }
 
    void test3BSwap(Object o) {
-      if (o instanceof String || o.hashCode() < 0) {
-         String s = (String)o;
+      if (o instanceof String s || o.hashCode() < 0) {
          System.out.println(s);
       }
 
@@ -130,21 +120,10 @@
    }
 
    void test4xSwap(Object o) {
-      label14: {
-         if (o instanceof String) {
-            String x = (String)o;
-            if (!x.isEmpty()) {
-               break label14;
-            }
-         }
-
-         if (o.hashCode() >= 0) {
-            return;
-         }
+      if (o instanceof String x && !x.isEmpty() || o.hashCode() < 0) {
+         String s = (String)o;
+         System.out.println(s);
       }
-
-      String s = (String)o;
-      System.out.println(s);
    }
 
    void test4BSwap(Object o) {
@@ -163,20 +142,7 @@
    }
 
    void test4xBSwap(Object o) {
-      label15: {
-         label14: {
-            if (o instanceof String) {
-               String x = (String)o;
-               if (!x.isEmpty()) {
-                  break label14;
-               }
-            }
-
-            if (o.hashCode() >= 0) {
-               break label15;
-            }
-         }
-
+      if (o instanceof String x && !x.isEmpty() || o.hashCode() < 0) {
          String s = (String)o;
          System.out.println(s);
       }
@@ -185,14 +151,12 @@
    }
 
    public void testClash(Object obj) {
-      if (obj instanceof String) {
-         String s = (String)obj;
+      if (obj instanceof String s) {
          System.out.println(s.length());
       } else {
          int s = 0;
          System.out.println(s);
       }
-
    }
 
    public void testSet(Object obj) {
gen_diffs.py pkg/TestPatternMatchingInline.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,12 +4,9 @@
    public void test(Object o) {
       boolean var10002;
       label12: {
-         if (o instanceof String) {
-            String s = (String)o;
-            if (s.length() > 5) {
-               var10002 = true;
-               break label12;
-            }
+         if (o instanceof String s && s.length() > 5) {
+            var10002 = true;
+            break label12;
          }
 
          var10002 = false;
@@ -21,12 +18,9 @@
    public void test2(Object o) {
       boolean var10002;
       label12: {
-         if (o instanceof Boolean) {
-            Boolean b = (Boolean)o;
-            if (b) {
-               var10002 = true;
-               break label12;
-            }
+         if (o instanceof Boolean b && b) {
+            var10002 = true;
+            break label12;
          }
 
          var10002 = false;
gen_diffs.py pkg/TestPatternMatchingInteger.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,43 +2,28 @@
 
 public class TestPatternMatchingInteger {
    public int testSimple(Object obj) {
-      if (obj instanceof Integer) {
-         Integer i = (Integer)obj;
-         return i + 1;
-      } else {
-         return 1;
-      }
+      return obj instanceof Integer i ? i + 1 : 1;
    }
 
    public int testMulti(Object a, Object b) {
-      if (a instanceof Integer) {
-         Integer ai = (Integer)a;
-         if (b instanceof Integer) {
-            Integer bi = (Integer)b;
-            return ai + bi;
-         }
+      if (a instanceof Integer ai && b instanceof Integer bi) {
+         return ai + bi;
       }
 
-      if (a instanceof Integer) {
-         Integer ai = (Integer)a;
+      if (a instanceof Integer ai) {
          return ai;
-      } else if (b instanceof Integer) {
-         Integer bi = (Integer)b;
-         return bi;
       } else {
-         return 0;
+         return b instanceof Integer bi ? bi : 0;
       }
    }
 
    public int testMulti2(Object a, Object b) {
       int result = 0;
-      if (a instanceof Integer) {
-         Integer ai = (Integer)a;
+      if (a instanceof Integer ai) {
          result += ai;
       }
 
-      if (b instanceof Integer) {
-         Integer bi = (Integer)b;
+      if (b instanceof Integer bi) {
          result += bi;
       }
 
@@ -46,24 +31,17 @@
    }
 
    public int testMultiDifferent(Object a, Object b) {
-      if (a instanceof Integer) {
-         Integer i = (Integer)a;
-         if (b instanceof String) {
-            String s = (String)b;
-            return i + s.length();
-         }
+      if (a instanceof Integer i && b instanceof String s) {
+         return i + s.length();
       }
 
       return 0;
    }
 
    public void testDeMorgan(Object obj) {
-      if (obj instanceof Integer) {
-         Integer i = (Integer)obj;
-         if (i >= 1 && i >= 41) {
-            System.out.println(i);
-            return;
-         }
+      if (obj instanceof Integer i && i >= 1 && i >= 41) {
+         System.out.println(i);
+         return;
       }
 
       System.out.println("i");
gen_diffs.py pkg/TestPatternMatchingLocalCapture.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,14 +2,12 @@
 
 public class TestPatternMatchingLocalCapture {
    public void test(Object o) {
-      if (o instanceof String) {
-         final String s = (String)o;
-         Object var10001 = new Object() {
+      if (o instanceof String s) {
+         new Object() {
             void test() {
                System.out.println(s);
             }
          };
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatchingMerge.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,6 @@
       if (obj instanceof String) {
          s = (String)obj;
       }
-
    }
 
    public void testNoInit(Object obj) {
gen_diffs.py pkg/TestPatternMatchingStatic.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,10 +3,8 @@
 public class TestPatternMatchingStatic {
    public void test(Object o) {
       if (o instanceof TestPatternMatchingStatic) {
-         TestPatternMatchingStatic var10000 = (TestPatternMatchingStatic)o;
          method();
       }
-
    }
 
    public static void method() {
gen_diffs.py pkg/TestPiDivision.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,6 +2,6 @@
 
 public class TestPiDivision {
    public double div(double val) {
-      return val / 180.0 / Math.PI;
+      return val / (180.0 / Math.PI);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPPMM.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -43,14 +43,10 @@
 
    public void ppif() {
       int a = 0;
-      ++a;
-      t(a);
-      ++a;
-      t(a);
-      ++a;
-      t(a);
-      ++a;
-      t(a);
+      t(++a);
+      t(++a);
+      t(++a);
+      t(++a);
    }
 
    public void immf() {
@@ -63,14 +59,10 @@
 
    public void mmif() {
       int a = 0;
-      --a;
-      t(a);
-      --a;
-      t(a);
-      --a;
-      t(a);
-      --a;
-      t(a);
+      t(--a);
+      t(--a);
+      t(--a);
+      t(--a);
    }
 
    private static void t(int x) {
gen_diffs.py pkg/TestPPMMByte.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -43,14 +43,10 @@
 
    public void ppif() {
       byte a = 0;
-      ++a;
-      t(a);
-      ++a;
-      t(a);
-      ++a;
-      t(a);
-      ++a;
-      t(a);
+      t(++a);
+      t(++a);
+      t(++a);
+      t(++a);
    }
 
    public void immf() {
@@ -63,14 +59,10 @@
 
    public void mmif() {
       byte a = 0;
-      --a;
-      t(a);
-      --a;
-      t(a);
-      --a;
-      t(a);
-      --a;
-      t(a);
+      t(--a);
+      t(--a);
+      t(--a);
+      t(--a);
    }
 
    private static void t(byte x) {
gen_diffs.py pkg/TestPPMMLoop.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,12 +2,7 @@
 
 public class TestPPMMLoop {
    public void test(int a, String s) {
-      while(true) {
-         ++a;
-         if (a <= 0) {
-            return;
-         }
-
+      while(++a > 0) {
          s = s + "a";
       }
    }
@@ -16,16 +11,10 @@
       while(a++ > 0) {
          s = s + "a";
       }
-
    }
 
    public void test2(int a, String s) {
-      while(true) {
-         --a;
-         if (a <= 0) {
-            return;
-         }
-
+      while(--a > 0) {
          s = s + "a";
       }
    }
@@ -34,6 +23,5 @@
       while(a-- > 0) {
          s = s + "a";
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPPMMMath.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,14 +2,12 @@
 
 public class TestPPMMMath {
    public void test(int i, int j) {
-      ++i;
-      int b = i + j;
+      int b = ++i + j;
       System.out.println(b);
    }
 
    public void test1(int i, int j) {
-      ++i;
-      int b = i * j;
+      int b = ++i * j;
       System.out.println(b);
    }
 
gen_diffs.py pkg/TestPrimitiveNarrowing.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -5,10 +5,10 @@
    }
 
    static void invocations() {
-      withInteger((Integer)null);
-      withShort((Short)null);
-      withByte((Byte)null);
-      new TestPrimitiveNarrowing((Short)null);
+      withInteger(null);
+      withShort(null);
+      withByte(null);
+      new TestPrimitiveNarrowing(null);
    }
 
    static void withByte(Byte defaultValue) {
gen_diffs.py pkg/TestPrivateClasses.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -19,7 +19,7 @@
             }
          }
 
-         (new NonCapturingLocalR1(s)).toString();
+         new NonCapturingLocalR1(s).toString();
 
          class CapturingLocalR1 {
             private final int i;
@@ -34,7 +34,7 @@
             }
          }
 
-         (new CapturingLocalR1(42)).toString();
+         new CapturingLocalR1(42).toString();
          TestPrivateClasses.Callable<String> c1 = new TestPrivateClasses.Callable<String>() {
             public String call() {
                return null;
@@ -66,7 +66,7 @@
             }
          }
 
-         (new NonCapturingLocalR2(s)).toString();
+         new NonCapturingLocalR2(s).toString();
 
          class CapturingLocalR1 {
             private final int i;
@@ -81,7 +81,7 @@
             }
          }
 
-         (new CapturingLocalR1(42)).toString();
+         new CapturingLocalR1(42).toString();
          TestPrivateClasses.Callable<String> c1 = new TestPrivateClasses.Callable<String>() {
             public String call() {
                return null;
@@ -110,7 +110,7 @@
          }
       }
 
-      (new NonCapturingLocalM1(s)).toString();
+      new NonCapturingLocalM1(s).toString();
 
       class CapturingLocalM1 {
          private final int i;
@@ -125,7 +125,7 @@
          }
       }
 
-      (new CapturingLocalM1(42)).toString();
+      new CapturingLocalM1(42).toString();
       TestPrivateClasses.Callable<String> c1 = new TestPrivateClasses.Callable<String>() {
          public String call() {
             return null;
@@ -153,7 +153,7 @@
          }
       }
 
-      (new NonCapturingLocalM2(s)).toString();
+      new NonCapturingLocalM2(s).toString();
 
       class CapturingLocalM2 {
          private final int i;
@@ -168,7 +168,7 @@
          }
       }
 
-      (new CapturingLocalM2(42)).toString();
+      new CapturingLocalM2(42).toString();
       TestPrivateClasses.Callable<String> c1 = new TestPrivateClasses.Callable<String>() {
          public String call() {
             return null;
gen_diffs.py pkg/TestRecordGenericSuperclass.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,7 +2,7 @@
 
 public class TestRecordGenericSuperclass<G extends Number> {
    public G getNum() {
-      return (G)null;
+      return null;
    }
 
    public static record Rec<G>(G num) {
gen_diffs.py pkg/TestRecordPattern1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -11,26 +11,23 @@
          int b = Integer.valueOf(var4);
          System.out.println(a + b);
       }
-
    }
 
    void test2(Object o) {
-      byte var3 = 0;
-      switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestRecordPattern1.Point,Object>(o, var3)) {
-      case -1:
-         System.out.println("null");
-         break;
-      case 0:
-         int obj = $proxy$a((TestRecordPattern1.Point)o);
-         int a = Integer.valueOf(obj);
-         obj = $proxy$b((TestRecordPattern1.Point)o);
-         int b = Integer.valueOf(obj);
-         System.out.println(a + b);
-         break;
-      default:
-         System.out.println("everything else");
+      switch(o) {
+         case null:
+            System.out.println("null");
+            break;
+         case TestRecordPattern1.Point var8:
+            int obj = $proxy$a((TestRecordPattern1.Point)o);
+            int a = Integer.valueOf(obj);
+            obj = $proxy$b((TestRecordPattern1.Point)o);
+            int b = Integer.valueOf(obj);
+            System.out.println(a + b);
+            break;
+         default:
+            System.out.println("everything else");
       }
-
    }
 
    int test3(Object o) {
@@ -40,33 +37,33 @@
       while(true) {
          int var10000;
          switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestRecordPattern1.Point,TestRecordPattern1.Point,Object>(var2, var3)) {
-         case -1:
-            var10000 = -1;
-            break;
-         case 0:
-            int var8 = $proxy$a((TestRecordPattern1.Point)var2);
-            int a = Integer.valueOf(var8);
-            var8 = $proxy$b((TestRecordPattern1.Point)var2);
-            int b = Integer.valueOf(var8);
-            if (a <= 0 || b <= 0) {
-               var3 = 1;
-               continue;
-            }
+            case -1:
+               var10000 = -1;
+               break;
+            case 0:
+               int var8 = $proxy$a((TestRecordPattern1.Point)var2);
+               int a = Integer.valueOf(var8);
+               var8 = $proxy$b((TestRecordPattern1.Point)var2);
+               int b = Integer.valueOf(var8);
+               if (a <= 0 || b <= 0) {
+                  var3 = 1;
+                  continue;
+               }
 
-            var10000 = a + b;
-            break;
-         case 1:
-            TestRecordPattern1.Point p = (TestRecordPattern1.Point)var2;
-            throw new IllegalArgumentException("Negative point not allowed");
-         default:
-            throw new IllegalArgumentException("Only points or null allowed");
+               var10000 = a + b;
+               break;
+            case 1:
+               TestRecordPattern1.Point p = (TestRecordPattern1.Point)var2;
+               throw new IllegalArgumentException("Negative point not allowed");
+            default:
+               throw new IllegalArgumentException("Only points or null allowed");
          }
 
          return var10000;
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static int $proxy$a(TestRecordPattern1.Point arg0) {
       try {
          return arg0.a();
@@ -75,7 +72,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static int $proxy$b(TestRecordPattern1.Point arg0) {
       try {
          return arg0.b();
gen_diffs.py pkg/TestRecordPattern2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,11 +6,9 @@
    void test(TestRecordPattern2.Pair<?, ?> p) {
       if (p instanceof TestRecordPattern2.Pair) {
          Object var6 = $proxy$a(p);
-         if (var6 instanceof String) {
-            String s = (String)var6;
+         if (var6 instanceof String s) {
             var6 = $proxy$b(p);
-            if (var6 instanceof Long) {
-               Long l = (Long)var6;
+            if (var6 instanceof Long l) {
                System.out.println("String-Long pair of \"" + s + "\" and " + l);
                return;
             }
@@ -19,8 +17,7 @@
 
       if (p instanceof TestRecordPattern2.Pair) {
          Object var8 = $proxy$a(p);
-         if (var8 instanceof Long) {
-            Long l = (Long)var8;
+         if (var8 instanceof Long l) {
             var8 = $proxy$b(p);
             System.out.println("Long-Object pair");
             return;
@@ -34,11 +31,9 @@
       label23: {
          if (p instanceof TestRecordPattern2.Pair) {
             Object var6 = $proxy$a(p);
-            if (var6 instanceof String) {
-               String s = (String)var6;
+            if (var6 instanceof String s) {
                var6 = $proxy$b(p);
-               if (var6 instanceof Long) {
-                  Long l = (Long)var6;
+               if (var6 instanceof Long l) {
                   System.out.println("String-Long pair of \"" + s + "\" and " + l);
                   break label23;
                }
@@ -47,8 +42,7 @@
 
          if (p instanceof TestRecordPattern2.Pair) {
             Object var8 = $proxy$a(p);
-            if (var8 instanceof Long) {
-               Long l = (Long)var8;
+            if (var8 instanceof Long l) {
                var8 = $proxy$b(p);
                System.out.println("Long-Object pair");
                break label23;
@@ -66,101 +60,72 @@
       byte var3 = 0;
 
       while(true) {
-         label64:
-         while(true) {
-            label62:
-            while(true) {
-               label60:
-               while(true) {
-                  Object var10000;
-                  switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestRecordPattern2.Pair,TestRecordPattern2.Pair,TestRecordPattern2.Pair,TestRecordPattern2.Pair,TestRecordPattern2.Pair>(
-                     var2, var3
-                  )) {
-                  case -1:
-                     var10000 = -1;
-                     break;
-                  case 0:
-                     Object var18 = $proxy$a(var2);
-                     if (!(var18 instanceof Long)) {
-                        break label64;
-                     }
-
-                     Long l = (Long)var18;
-                     var18 = $proxy$b(var2);
-                     if (!(var18 instanceof Long)) {
-                        break label64;
-                     }
-
-                     Long r = (Long)var18;
+         Object var10000;
+         switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestRecordPattern2.Pair,TestRecordPattern2.Pair,TestRecordPattern2.Pair,TestRecordPattern2.Pair,TestRecordPattern2.Pair>(
+            var2, var3
+         )) {
+            case -1:
+               var10000 = -1;
+               break;
+            case 0:
+               Object var18 = $proxy$a(var2);
+               if (var18 instanceof Long l) {
+                  var18 = $proxy$b(var2);
+                  if (var18 instanceof Long r) {
                      var10000 = l + r;
                      break;
-                  case 1:
-                     Object l = $proxy$a(var2);
-                     if (!(l instanceof Integer)) {
-                        break label62;
-                     }
+                  }
+               }
 
-                     Integer l = (Integer)l;
-                     l = $proxy$b(var2);
-                     if (!(l instanceof Integer)) {
-                        break label62;
-                     }
-
-                     Integer r = (Integer)l;
+               var3 = 1;
+               continue;
+            case 1:
+               Object lx = $proxy$a(var2);
+               if (lx instanceof Integer l) {
+                  lx = $proxy$b(var2);
+                  if (lx instanceof Integer r) {
                      var10000 = (l << r) * var2.hashCode();
                      break;
-                  case 2:
-                     Object var21 = $proxy$a(var2);
-                     var21 = $proxy$b(var2);
-                     if (var21 instanceof Void) {
-                        Void r = (Void)var21;
-                        throw new IllegalArgumentException("how");
-                     }
+                  }
+               }
 
-                     var3 = 3;
-                     continue;
-                  case 3:
-                     Object l = $proxy$a(var2);
-                     if (!(l instanceof String)) {
-                        break label60;
-                     }
+               var3 = 2;
+               continue;
+            case 2:
+               Object var21 = $proxy$a(var2);
+               var21 = $proxy$b(var2);
+               if (var21 instanceof Void r) {
+                  throw new IllegalArgumentException("how");
+               }
 
-                     String l = (String)l;
-                     l = $proxy$b(var2);
-                     if (!(l instanceof String)) {
-                        break label60;
-                     }
-
-                     String r = (String)l;
-                     if (l.length() <= 3 || r.length() <= 3 || l.length() + r.length() >= 23) {
-                        break label60;
-                     }
-
+               var3 = 3;
+               continue;
+            case 3:
+               Object lx = $proxy$a(var2);
+               if (lx instanceof String l) {
+                  lx = $proxy$b(var2);
+                  if (lx instanceof String r && l.length() > 3 && r.length() > 3 && l.length() + r.length() < 23) {
                      var10000 = l.length() + r.length();
                      break;
-                  case 4:
-                     Object var17 = $proxy$a(var2);
-                     var17 = $proxy$b(var2);
-                     var10000 = -2;
-                     break;
-                  default:
-                     throw new MatchException((String)null, (Throwable)null);
                   }
-
-                  return var10000;
                }
 
                var3 = 4;
-            }
-
-            var3 = 2;
+               continue;
+            case 4:
+               Object var17 = $proxy$a(var2);
+               var17 = $proxy$b(var2);
+               var10000 = -2;
+               break;
+            default:
+               throw new MatchException(null, null);
          }
 
-         var3 = 1;
+         return var10000;
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static Object $proxy$a(TestRecordPattern2.Pair arg0) {
       try {
          return arg0.a();
@@ -169,7 +134,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static Object $proxy$b(TestRecordPattern2.Pair arg0) {
       try {
          return arg0.b();
gen_diffs.py pkg/TestRecordPattern3.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,8 +4,7 @@
    void test(TestRecordPattern3.Bundle<?> bundle) {
       if (bundle instanceof TestRecordPattern3.Bundle) {
          Object var19 = $proxy$a(bundle);
-         if (var19 instanceof String) {
-            String a = (String)var19;
+         if (var19 instanceof String a) {
             String var21 = $proxy$b(bundle);
             String var22 = $proxy$c(bundle);
             int var23 = $proxy$i1(bundle);
@@ -33,10 +32,9 @@
             System.out.println(a + var21 + var22 + ((double)((long)(i1 + i2 + i3 + i4) + l1 + l2 + (long)c1 + (long)c2 + (long)bb) + dd) + bool);
          }
       }
-
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static Object $proxy$a(TestRecordPattern3.Bundle arg0) {
       try {
          return arg0.a();
@@ -45,7 +43,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static String $proxy$b(TestRecordPattern3.Bundle arg0) {
       try {
          return arg0.b();
@@ -54,7 +52,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static String $proxy$c(TestRecordPattern3.Bundle arg0) {
       try {
          return arg0.c();
@@ -63,7 +61,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static int $proxy$i1(TestRecordPattern3.Bundle arg0) {
       try {
          return arg0.i1();
@@ -72,7 +70,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static int $proxy$i2(TestRecordPattern3.Bundle arg0) {
       try {
          return arg0.i2();
@@ -81,7 +79,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static int $proxy$i3(TestRecordPattern3.Bundle arg0) {
       try {
          return arg0.i3();
@@ -90,7 +88,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static int $proxy$i4(TestRecordPattern3.Bundle arg0) {
       try {
          return arg0.i4();
@@ -99,7 +97,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static long $proxy$l1(TestRecordPattern3.Bundle arg0) {
       try {
          return arg0.l1();
@@ -108,7 +106,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static long $proxy$l2(TestRecordPattern3.Bundle arg0) {
       try {
          return arg0.l2();
@@ -117,7 +115,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static char $proxy$c1(TestRecordPattern3.Bundle arg0) {
       try {
          return arg0.c1();
@@ -126,7 +124,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static char $proxy$c2(TestRecordPattern3.Bundle arg0) {
       try {
          return arg0.c2();
@@ -135,7 +133,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static byte $proxy$bb(TestRecordPattern3.Bundle arg0) {
       try {
          return arg0.bb();
@@ -144,7 +142,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static double $proxy$dd(TestRecordPattern3.Bundle arg0) {
       try {
          return arg0.dd();
@@ -153,7 +151,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static boolean $proxy$bool(TestRecordPattern3.Bundle arg0) {
       try {
          return arg0.bool();
gen_diffs.py pkg/TestRecordPattern4.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,32 +4,23 @@
    void test(Object m) {
       if (m instanceof TestRecordPattern4.Many) {
          Object var12 = $proxy$a((TestRecordPattern4.Many)m);
-         if (var12 instanceof String) {
-            String a = (String)var12;
+         if (var12 instanceof String a) {
             var12 = $proxy$b((TestRecordPattern4.Many)m);
-            if (var12 instanceof String) {
-               String b = (String)var12;
+            if (var12 instanceof String b) {
                var12 = $proxy$c((TestRecordPattern4.Many)m);
-               if (var12 instanceof String) {
-                  String c = (String)var12;
+               if (var12 instanceof String c) {
                   var12 = $proxy$d((TestRecordPattern4.Many)m);
-                  if (var12 instanceof String) {
-                     String d = (String)var12;
+                  if (var12 instanceof String d) {
                      var12 = $proxy$e((TestRecordPattern4.Many)m);
-                     if (var12 instanceof String) {
-                        String e = (String)var12;
+                     if (var12 instanceof String e) {
                         var12 = $proxy$f((TestRecordPattern4.Many)m);
-                        if (var12 instanceof String) {
-                           String f = (String)var12;
+                        if (var12 instanceof String f) {
                            var12 = $proxy$g((TestRecordPattern4.Many)m);
-                           if (var12 instanceof String) {
-                              String g = (String)var12;
+                           if (var12 instanceof String g) {
                               var12 = $proxy$h((TestRecordPattern4.Many)m);
-                              if (var12 instanceof String) {
-                                 String h = (String)var12;
+                              if (var12 instanceof String h) {
                                  var12 = $proxy$i((TestRecordPattern4.Many)m);
-                                 if (var12 instanceof String) {
-                                    String i = (String)var12;
+                                 if (var12 instanceof String i) {
                                     TestRecordPattern4.Many mm = (TestRecordPattern4.Many)m;
                                     System.out.println(a + b + c + d + e + f + g + h + i + mm.hashCode());
                                  }
@@ -42,25 +33,21 @@
             }
          }
       }
-
    }
 
    void test2(Object m) {
       if (m instanceof TestRecordPattern4.Many) {
          Object var21 = $proxy$a((TestRecordPattern4.Many)m);
          var21 = $proxy$b((TestRecordPattern4.Many)m);
-         if (var21 instanceof String) {
-            String b = (String)var21;
+         if (var21 instanceof String b) {
             var21 = $proxy$c((TestRecordPattern4.Many)m);
             var21 = $proxy$d((TestRecordPattern4.Many)m);
             var21 = $proxy$e((TestRecordPattern4.Many)m);
-            if (var21 instanceof String) {
-               String e = (String)var21;
+            if (var21 instanceof String e) {
                var21 = $proxy$f((TestRecordPattern4.Many)m);
                var21 = $proxy$g((TestRecordPattern4.Many)m);
                var21 = $proxy$h((TestRecordPattern4.Many)m);
-               if (var21 instanceof String) {
-                  String h = (String)var21;
+               if (var21 instanceof String h) {
                   var21 = $proxy$i((TestRecordPattern4.Many)m);
                   if (var21 instanceof TestRecordPattern4.Many) {
                      Object var22 = $proxy$a((TestRecordPattern4.Many)var21);
@@ -71,14 +58,12 @@
                      var22 = $proxy$f((TestRecordPattern4.Many)var21);
                      var22 = $proxy$g((TestRecordPattern4.Many)var21);
                      var22 = $proxy$h((TestRecordPattern4.Many)var21);
-                     if (var22 instanceof String) {
-                        String h2 = (String)var22;
+                     if (var22 instanceof String h2) {
                         var22 = $proxy$i((TestRecordPattern4.Many)var21);
-                        if (var22 instanceof TestRecordPattern4.Many) {
-                           TestRecordPattern4.Many i2 = (TestRecordPattern4.Many)var22;
+                        if (var22 instanceof TestRecordPattern4.Many i2) {
                            TestRecordPattern4.Many i = (TestRecordPattern4.Many)var21;
                            TestRecordPattern4.Many mm = (TestRecordPattern4.Many)m;
-                           System.out.println(b + String.valueOf(var21) + e + h + h2 + String.valueOf(i2) + i.hashCode() + mm.hashCode());
+                           System.out.println(b + var21 + e + h + h2 + i2 + i.hashCode() + mm.hashCode());
                         }
                      }
                   }
@@ -86,10 +71,9 @@
             }
          }
       }
-
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static Object $proxy$a(TestRecordPattern4.Many arg0) {
       try {
          return arg0.a();
@@ -98,7 +82,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static Object $proxy$b(TestRecordPattern4.Many arg0) {
       try {
          return arg0.b();
@@ -107,7 +91,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static Object $proxy$c(TestRecordPattern4.Many arg0) {
       try {
          return arg0.c();
@@ -116,7 +100,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static Object $proxy$d(TestRecordPattern4.Many arg0) {
       try {
          return arg0.d();
@@ -125,7 +109,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static Object $proxy$e(TestRecordPattern4.Many arg0) {
       try {
          return arg0.e();
@@ -134,7 +118,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static Object $proxy$f(TestRecordPattern4.Many arg0) {
       try {
          return arg0.f();
@@ -143,7 +127,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static Object $proxy$g(TestRecordPattern4.Many arg0) {
       try {
          return arg0.g();
@@ -152,7 +136,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static Object $proxy$h(TestRecordPattern4.Many arg0) {
       try {
          return arg0.h();
@@ -161,7 +145,7 @@
       }
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static Object $proxy$i(TestRecordPattern4.Many arg0) {
       try {
          return arg0.i();
gen_diffs.py pkg/TestRecursiveLambda.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,7 +1,7 @@
-// $FF: Couldn't be decompiled
+// $QF: Couldn't be decompiled
 // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
 // java.lang.IllegalStateException: Lambda pkg/TestRecursiveLambda is recursive?!
 //  at org.jetbrains.java.decompiler.main.rels.LambdaProcessor.processClass(LambdaProcessor.java)
 //  at org.jetbrains.java.decompiler.main.ClassesProcessor.writeClass(ClassesProcessor.java)
 //  at org.jetbrains.java.decompiler.main.Fernflower.getClassContent(Fernflower.java)
-//   at org.jetbrains.java.decompiler.struct.ContextUnit.lambda$save$0(ContextUnit.java:170)+//   at org.jetbrains.java.decompiler.struct.ContextUnit.lambda$save$2(ContextUnit.java:145)
\ No newline at end of file
gen_diffs.py pkg/TestRenameEntities.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,7 @@
 
       public void a() {
          this.a = new Object();
-         (TestRenameEntities.this.new b()).a();
+         TestRenameEntities.this.new b().a();
       }
    }
 
@@ -15,7 +15,7 @@
 
       public void a() {
          this.a = new Object();
-         (TestRenameEntities.this.new a()).a();
+         TestRenameEntities.this.new a().a();
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestRunSuspend.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -21,7 +21,7 @@
    }
 
    @Nullable
-   public final Result<Unit> getResult_xLWZpok/* $FF was: getResult-xLWZpok*/() {
+   public final Result<Unit> getResult_xLWZpok/* $QF was: getResult-xLWZpok*/() {
       return this.result;
    }
 
@@ -29,7 +29,7 @@
       this.result = <set-?>;
    }
 
-   // $FF: Extended synchronized range to monitorexit
+   // $QF: Extended synchronized range to monitorexit
    public final void await() {
       synchronized(this) {
          int $i$a$-synchronized-TestRunSuspend$await$1 = 0;
gen_diffs.py pkg/TestSealedFinal.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,4 +1,4 @@
 package pkg;
 
-public final non-sealed class TestSealedFinal implements SealedInterface {
+public final class TestSealedFinal implements SealedInterface {
 }
\ No newline at end of file
gen_diffs.py pkg/TestSealedRecord.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,4 +1,4 @@
 package pkg;
 
-public non-sealed record TestSealedRecord(int i) implements SealedInterface {
+public record TestSealedRecord(int i) implements SealedInterface {
 }
\ No newline at end of file
gen_diffs.py pkg/TestSelfIterableLoop.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,9 +4,9 @@
    public void testMethod(Iterable var1) {
       label14:
       while(true) {
-         for(<unknown> var4_1 : var1) {
-            if (var4_1 instanceof Ljava.lang.Iterable) {
-               var1 = (Ljava.lang.Iterable)var4_1;
+         for(var1 : var1) {
+            if (var1 instanceof Ljava.lang.Iterable) {
+               var1 = (Ljava.lang.Iterable)var1;
                continue label14;
             }
          }
gen_diffs.py pkg/TestSharedVarIndex.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,22 +2,7 @@
 
 public class TestSharedVarIndex {
    public void StringArrayVsString() {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.RuntimeException: invalid constant type: [Ljava/lang/String;
-      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.ConstExprent.toJava(ConstExprent.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent.toJava(AssignmentExprent.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.listToJava(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.BasicBlockStatement.toJava(BasicBlockStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement.toJava(RootStatement.java)
-      //  at org.jetbrains.java.decompiler.main.ClassWriter.methodToJava(ClassWriter.java)
-      //
-      // Bytecode:
-      // 0: bipush 0
-      // 1: anewarray 2
-      // 4: astore 1
-      // 5: ldc "lol"
-      // 7: astore 1
-      // 8: return
+      String[] b = new String[0];
+      String bx = "lol";
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestShiftLoop.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -5,7 +5,7 @@
       long x = l[0];
 
       for(int i = 1; i < 2; ++i) {
-         x <<= 3L;
+         x <<= 3;
       }
 
       x = l[4];
gen_diffs.py pkg/TestSimpleIf.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -5,7 +5,6 @@
       if (i > 0) {
          System.out.println("Hello");
       }
-
    }
 
    public void test2(int i) {
@@ -14,6 +13,5 @@
       } else {
          System.out.println("Bye");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSimpleWhile.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,6 +6,5 @@
          System.out.println(i);
          ++i;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestStaticIterator.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -15,35 +15,16 @@
    }
 
    public static void test() {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot read field "bytecode" because the return value of "org.jetbrains.java.decompiler.modules.decompiler.exps.InvocationExprent.getInstance()" is null
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.matchForEach(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoop(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoopsRec(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoopsRec(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoopsRec(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoops(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: invokestatic pkg/TestStaticIterator.iterator ()Ljava/util/Iterator;
-      // 03: astore 0
-      // 04: aload 0
-      // 05: invokeinterface java/util/Iterator.hasNext ()Z 1
-      // 0a: ifeq 1a
-      // 0d: aload 0
-      // 0e: invokeinterface java/util/Iterator.next ()Ljava/lang/Object; 1
-      // 13: checkcast pkg/TestStaticIterator
-      // 16: astore 1
-      // 17: goto 04
-      // 1a: return
+      Iterator iter = iterator();
+
+      while(iter.hasNext()) {
+         TestStaticIterator var1 = (TestStaticIterator)iter.next();
+      }
    }
 
    public static void test1() {
       for(Object o : iterable()) {
          System.out.println(o);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestStringLiteral.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -10,7 +10,6 @@
       if ("".equals("")) {
          System.out.println("Hi");
       }
-
    }
 
    public void testReplace() {
gen_diffs.py pkg/TestSuspendLambdaKt.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -18,26 +18,26 @@
 )
 public final class TestSuspendLambdaKt {
    @NotNull
-   private static final Function1<Continuation<? super Unit>, Object> sl1 = (Function1)(
-      new Function1<Continuation<? super Unit>, Object>((Continuation<? super null>)null) {
+   private static final Function1<Continuation<? super Unit>, Object> sl1 = (Function1<Continuation<? super Unit>, Object>)(
+      new Function1<Continuation<? super Unit>, Object>(null) {
          int label;
    
          @Nullable
          public final Object invokeSuspend(@NotNull Object $result) {
             IntrinsicsKt.getCOROUTINE_SUSPENDED();
             switch(this.label) {
-            case 0:
-               ResultKt.throwOnFailure($result);
-               System.out.println("SL1");
-               return Unit.INSTANCE;
-            default:
-               throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
+               case 0:
+                  ResultKt.throwOnFailure($result);
+                  System.out.println("SL1");
+                  return Unit.INSTANCE;
+               default:
+                  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
             }
          }
    
          @NotNull
          public final Continuation<Unit> create(@NotNull Continuation<?> $completion) {
-            return (Continuation)(new <anonymous constructor>($completion));
+            return (Continuation<Unit>)(new <anonymous constructor>($completion));
          }
    
          @Nullable
gen_diffs.py pkg/TestSwitchAssign.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,15 +4,15 @@
    public void test(int x) {
       int assign = 1;
       switch(x) {
-      case 1:
-      case 3:
-      case 5:
-         assign = 3;
-         break;
-      case 2:
-      case 4:
-      case 6:
-         assign = 4;
+         case 1:
+         case 3:
+         case 5:
+            assign = 3;
+            break;
+         case 2:
+         case 4:
+         case 6:
+            assign = 4;
       }
 
       System.out.println(assign);
@@ -21,15 +21,15 @@
    public void test1(String s) {
       int assign;
       switch(s) {
-      case "a":
-      default:
-         assign = 3;
-         break;
-      case "0":
-         assign = -2;
-         break;
-      case "?":
-         assign = 999;
+         case "a":
+         default:
+            assign = 3;
+            break;
+         case "0":
+            assign = -2;
+            break;
+         case "?":
+            assign = 999;
       }
 
       System.out.println(assign);
gen_diffs.py pkg/TestSwitchDefaultBefore.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,31 +3,29 @@
 public class TestSwitchDefaultBefore {
    public void test(String s) {
       switch(s) {
-      case "a":
-         System.out.println(1);
-         break;
-      case "b":
-         System.out.println(2);
-         break;
-      case "c":
-      default:
-         System.out.println(3);
+         case "a":
+            System.out.println(1);
+            break;
+         case "b":
+            System.out.println(2);
+            break;
+         case "c":
+         default:
+            System.out.println(3);
       }
-
    }
 
    public void test2(int i) {
       switch(i) {
-      case 1:
-         System.out.println(1);
-         break;
-      case 2:
-         System.out.println(2);
-         break;
-      case 3:
-      default:
-         System.out.println(3);
+         case 1:
+            System.out.println(1);
+            break;
+         case 2:
+            System.out.println(2);
+            break;
+         case 3:
+         default:
+            System.out.println(3);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchExpressionFallthrough1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,15 +4,15 @@
    public void test(int i) {
       byte var10000;
       switch(i) {
-      case 1:
-         System.out.println(i);
-      case 2:
-      case 3:
-      case 4:
-         var10000 = 2;
-         break;
-      default:
-         var10000 = 3;
+         case 1:
+            System.out.println(i);
+         case 2:
+         case 3:
+         case 4:
+            var10000 = 2;
+            break;
+         default:
+            var10000 = 3;
       }
 
       int j = var10000;
gen_diffs.py pkg/TestSwitchExpressionNested1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -9,14 +9,14 @@
          case SOUTH -> 2;
          case EAST -> {
             switch(dir2) {
-            case NORTH:
-               yield 3;
-            case SOUTH:
-               yield 4;
-            case EAST:
-               yield 5;
-            default:
-               yield -1;
+               case NORTH:
+                  yield 3;
+               case SOUTH:
+                  yield 4;
+               case EAST:
+                  yield 5;
+               default:
+                  yield -1;
             }
          }
          default -> 0;
gen_diffs.py pkg/TestSwitchExpressionPPMM.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,15 +6,9 @@
 
       int i = 1 + switch(test) {
          case 1 -> x++;
-         case 2 -> {
-            ++x;
-            yield x;
-         }
+         case 2 -> ++x;
          case 3 -> x--;
-         case 4 -> {
-            --x;
-            yield x;
-         }
+         case 4 -> --x;
          default -> x;
       };
       System.out.println(x);
gen_diffs.py pkg/TestSwitchExprInvoc.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,10 +2,10 @@
 
 public class TestSwitchExprInvoc {
    public void test(int i) {
-      String res = switch(i) {
+      String res = (switch(i) {
          case 1 -> "one";
          case 2 -> "two";
          default -> "default";
-      }.toLowerCase();
+      }).toLowerCase();
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchFinally.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,32 +1,16 @@
 package pkg;
 
 public class TestSwitchFinally {
-   // $FF: Could not verify finally blocks. A semaphore variable has been added to preserve control flow.
-   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    public void test(int i) {
-      boolean var4 = false;
-
       try {
-         var4 = true;
          System.out.println(1);
-         var4 = false;
       } finally {
-         if (var4) {
-            System.out.println("finally");
-            switch(i) {
+         System.out.println("finally");
+         switch(i) {
             case 0:
                System.out.println("0");
-            }
+         }
 
-            System.out.println("b");
-         }
-      }
-
-      System.out.println("finally");
-      switch(i) {
-      case 0:
-         System.out.println("0");
-      default:
          System.out.println("b");
       }
    }
@@ -37,94 +21,50 @@
       } finally {
          System.out.println("finally");
          switch(i) {
-         case 0:
-            System.out.println("0");
-            break;
-         case 1:
-            System.out.println("1");
+            case 0:
+               System.out.println("0");
+               break;
+            case 1:
+               System.out.println("1");
+         }
+
+         System.out.println("b");
+      }
+   }
+
+   public void test2(int i) {
+      try {
+         System.out.println(1);
+      } finally {
+         System.out.println("finally");
+         switch(i) {
+            default:
+               System.out.println("default");
+               System.out.println("b");
+         }
+      }
+   }
+
+   public int test3(int i) {
+      try {
+         System.out.println(1);
+      } finally {
+         System.out.println("finally");
+         switch(i) {
+            case 0:
+               System.out.println("0");
+               break;
+            case 1:
+               System.out.println("1");
+               System.out.println("c");
+               return 0;
+            default:
+               System.out.println("Default");
          }
 
          System.out.println("b");
       }
 
-   }
-
-   // $FF: Could not verify finally blocks. A semaphore variable has been added to preserve control flow.
-   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-   public void test2(int i) {
-      boolean var4 = false;
-
-      try {
-         var4 = true;
-         System.out.println(1);
-         var4 = false;
-      } finally {
-         if (var4) {
-            System.out.println("finally");
-            switch(i) {
-            default:
-               System.out.println("default");
-               System.out.println("b");
-            }
-         }
-      }
-
-      System.out.println("finally");
-      switch(i) {
-      default:
-         System.out.println("default");
-         System.out.println("b");
-      }
-   }
-
-   // $FF: Could not verify finally blocks. A semaphore variable has been added to preserve control flow.
-   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-   public int test3(int i) {
-      boolean var4 = false;
-
-      label54: {
-         label53: {
-            try {
-               var4 = true;
-               System.out.println(1);
-               var4 = false;
-            } finally {
-               if (var4) {
-                  System.out.println("finally");
-                  switch(i) {
-                  case 0:
-                     System.out.println("0");
-                     break;
-                  case 1:
-                     System.out.println("1");
-                     break label53;
-                  default:
-                     System.out.println("Default");
-                  }
-
-                  System.out.println("b");
-               }
-            }
-
-            System.out.println("finally");
-            switch(i) {
-            case 0:
-               System.out.println("0");
-               break label54;
-            case 1:
-               System.out.println("1");
-               break;
-            default:
-               System.out.println("Default");
-               break label54;
-            }
-         }
-
-         System.out.println("c");
-         return 0;
-      }
-
-      System.out.println("b");
       System.out.println("d");
       return 1;
    }
gen_diffs.py pkg/TestSwitchLoop.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -5,46 +5,45 @@
       while(i > 0) {
          --i;
          switch(i) {
-         case 0:
-            System.out.println("0");
-            break;
-         case 1:
-            System.out.println("1");
-            break;
-         case 2:
-            System.out.println("2");
-            break;
-         default:
-            System.out.println("after");
-            if (i == 4) {
-               return;
-            }
-         }
-      }
-
+            case 0:
+               System.out.println("0");
+               break;
+            case 1:
+               System.out.println("1");
+               break;
+            case 2:
+               System.out.println("2");
+               break;
+            default:
+               System.out.println("after");
+               if (i == 4) {
+                  return;
+               }
+         }
+      }
    }
 
    public int test2(int i) {
       for(int a = 0; i > a; ++a) {
          --i;
          switch(i) {
-         case 0:
-            System.out.println("0");
-         default:
-            System.out.println("after");
-            break;
-         case 1:
-            System.out.println("1");
-            return 1;
-         case 2:
-            System.out.println("2");
-            return 2;
-         case 3:
-            System.out.println("3");
-            return 0;
-         case 4:
-            System.out.println("4");
-            return 0;
+            case 0:
+               System.out.println("0");
+            default:
+               System.out.println("after");
+               break;
+            case 1:
+               System.out.println("1");
+               return 1;
+            case 2:
+               System.out.println("2");
+               return 2;
+            case 3:
+               System.out.println("3");
+               return 0;
+            case 4:
+               System.out.println("4");
+               return 0;
          }
       }
 
@@ -56,23 +55,23 @@
       for(int a = 0; i > a; ++a) {
          --i;
          switch(i) {
-         case 0:
-            System.out.println("0");
-         default:
-            System.out.println("after");
-            break;
-         case 1:
-            System.out.println("1");
-            return 1;
-         case 2:
-            System.out.println("2");
-            return 2;
-         case 3:
-            System.out.println("3");
-            break label18;
-         case 4:
-            System.out.println("4");
-            break label18;
+            case 0:
+               System.out.println("0");
+            default:
+               System.out.println("after");
+               break;
+            case 1:
+               System.out.println("1");
+               return 1;
+            case 2:
+               System.out.println("2");
+               return 2;
+            case 3:
+               System.out.println("3");
+               break label18;
+            case 4:
+               System.out.println("4");
+               break label18;
          }
       }
 
@@ -84,14 +83,14 @@
       for(int a = 0; i > a; ++a) {
          --i;
          switch(i) {
-         case 0:
-            System.out.println("0");
-            if (a == 0) {
-               continue;
-            }
-            break;
-         case 1:
-            System.out.println("1");
+            case 0:
+               System.out.println("0");
+               if (a == 0) {
+                  continue;
+               }
+               break;
+            case 1:
+               System.out.println("1");
          }
 
          System.out.println("after");
@@ -104,69 +103,68 @@
       int a = 0;
 
       while(true) {
-         label42: {
+         label40: {
             if (i > a) {
                --i;
                label22:
                switch(i) {
-               case 0:
-                  System.out.println("0");
-                  int i1 = 0;
-
-                  while(true) {
-                     if (i1 >= 5) {
-                        break label42;
-                     }
-
-                     switch(i1) {
-                     case 0:
-                        System.out.println(0);
-                     default:
-                        ++i1;
-                        break;
+                  case 0:
+                     System.out.println("0");
+                     int i1 = 0;
+
+                     while(true) {
+                        if (i1 >= 5) {
+                           break label40;
+                        }
+
+                        switch(i1) {
+                           case 0:
+                              System.out.println(0);
+                           default:
+                              ++i1;
+                              break;
+                           case 1:
+                              System.out.println(1);
+                              break label22;
+                           case 2:
+                              return;
+                        }
+                     }
+                  case 1:
+                     System.out.println("1");
+                  default:
+                     break label40;
+               }
+            }
+
+            System.out.println("after2");
+            return;
+         }
+
+         System.out.println("after");
+         ++a;
+      }
+   }
+
+   public void test6() {
+      int i = 0;
+
+      label24:
+      while(i < 10) {
+         switch(i) {
+            case 0:
+               System.out.println("0");
+
+               for(int i1 = 0; i1 < 5; ++i1) {
+                  switch(i1) {
                      case 1:
                         System.out.println(1);
-                        break label22;
-                     case 2:
-                        return;
-                     }
+                        break label24;
                   }
-               case 1:
-                  System.out.println("1");
-               default:
-                  break label42;
-               }
-            }
-
-            System.out.println("after2");
-            return;
-         }
-
-         System.out.println("after");
-         ++a;
-      }
-   }
-
-   public void test6() {
-      int i = 0;
-
-      label24:
-      while(i < 10) {
-         switch(i) {
-         case 0:
-            System.out.println("0");
-
-            for(int i1 = 0; i1 < 5; ++i1) {
-               switch(i1) {
-               case 1:
-                  System.out.println(1);
-                  break label24;
-               default:
-               }
-            }
-         default:
-            System.out.println("after");
-            ++i;
+               }
+            default:
+               System.out.println("after");
+               ++i;
          }
       }
 
@@ -178,10 +176,9 @@
       for(int i = 0; i < 10; ++i) {
          for(int i1 = 0; i1 < 5; ++i1) {
             switch(i1) {
-            case 1:
-               System.out.println(1);
-               break label21;
-            default:
+               case 1:
+                  System.out.println(1);
+                  break label21;
             }
          }
 
@@ -193,25 +190,25 @@
 
    public void test8(int i) {
       switch(i) {
-      case 0:
-         int j = 0;
-
-         while(true) {
-            if (j >= 10) {
-               System.out.println(0);
-               break;
-            }
-
-            if (j == 3) {
-               break;
-            }
-
-            ++j;
-         }
-
-         System.out.println("after");
-      case 1:
-         System.out.println(1);
+         case 0:
+            int j = 0;
+
+            while(true) {
+               if (j >= 10) {
+                  System.out.println(0);
+                  break;
+               }
+
+               if (j == 3) {
+                  break;
+               }
+
+               ++j;
+            }
+
+            System.out.println("after");
+         case 1:
+            System.out.println(1);
       }
 
       System.out.println("after2");
@@ -220,60 +217,60 @@
    public void test9(int i) {
       label23:
       switch(i) {
-      case 0:
-         int j = 0;
-
-         while(true) {
-            if (j >= 10) {
-               System.out.println(0);
-               break label23;
-            }
-
-            if (j == 3) {
-               System.out.println("after");
-               break;
-            }
-
-            ++j;
-         }
-      case 1:
-         System.out.println(1);
+         case 0:
+            int j = 0;
+
+            while(true) {
+               if (j >= 10) {
+                  System.out.println(0);
+                  break label23;
+               }
+
+               if (j == 3) {
+                  System.out.println("after");
+                  break;
+               }
+
+               ++j;
+            }
+         case 1:
+            System.out.println(1);
       }
 
       System.out.println("after2");
    }
 
    public void test10(int i) {
-      label33: {
-         label32: {
+      label31: {
+         label30: {
             switch(i) {
-            case 0:
-               int j = 0;
-
-               while(true) {
-                  if (j >= 10) {
-                     break label32;
+               case 0:
+                  int j = 0;
+
+                  while(true) {
+                     if (j >= 10) {
+                        break label30;
+                     }
+
+                     if (j == 3) {
+                        System.out.println("after");
+                        break;
+                     }
+
+                     if (j == 9) {
+                        break label30;
+                     }
+
+                     ++j;
                   }
-
-                  if (j == 3) {
-                     System.out.println("after");
-                     break;
-                  }
-
-                  if (j == 9) {
-                     break label32;
-                  }
-
-                  ++j;
-               }
-            case 1:
-               break;
-            default:
-               break label33;
+               case 1:
+                  break;
+               default:
+                  break label31;
             }
 
             System.out.println(1);
-            break label33;
+            break label31;
          }
 
          System.out.println(0);
@@ -283,40 +280,40 @@
    }
 
    public void test10b(int i) {
-      label34: {
-         label33: {
+      label32: {
+         label31: {
             label28:
             switch(i) {
-            case 0:
-               int j = 0;
-
-               while(true) {
-                  if (j >= 10) {
-                     break label33;
+               case 0:
+                  int j = 0;
+
+                  while(true) {
+                     if (j >= 10) {
+                        break label31;
+                     }
+
+                     if (j == 3) {
+                        System.out.println("after");
+                        break label28;
+                     }
+
+                     if (j == 9) {
+                        break label31;
+                     }
+
+                     ++j;
                   }
-
-                  if (j == 3) {
-                     System.out.println("after");
-                     break label28;
-                  }
-
-                  if (j == 9) {
-                     break label33;
-                  }
-
-                  ++j;
-               }
-            case 1:
-               System.out.println(1);
-               break label34;
-            case 2:
-               break;
-            default:
-               break label34;
+               case 1:
+                  System.out.println(1);
+                  break label32;
+               case 2:
+                  break;
+               default:
+                  break label32;
             }
 
             System.out.println(2);
-            break label34;
+            break label32;
          }
 
          System.out.println(0);
gen_diffs.py pkg/TestSwitchOnEnum.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -7,33 +7,32 @@
 
    public int testSOE(TimeUnit t) {
       switch(t) {
-      case MICROSECONDS:
-         return 2;
-      case SECONDS:
-         return 1;
-      default:
-         return 0;
+         case MICROSECONDS:
+            return 2;
+         case SECONDS:
+            return 1;
+         default:
+            return 0;
       }
    }
 
    static class Example {
       void test(TestSwitchOnEnum.Example.A a, TestSwitchOnEnum.Example.B b) {
          switch(a) {
-         case A1:
-            System.out.println("A1");
-            break;
-         case A2:
-            System.out.println("A2");
+            case A1:
+               System.out.println("A1");
+               break;
+            case A2:
+               System.out.println("A2");
          }
 
          switch(b) {
-         case B1:
-            System.out.println("B1");
-            break;
-         case B2:
-            System.out.println("B2");
+            case B1:
+               System.out.println("B1");
+               break;
+            case B2:
+               System.out.println("B2");
          }
-
       }
 
       static enum A {
gen_diffs.py pkg/TestSwitchOnlyDefault.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,14 +3,13 @@
 public class TestSwitchOnlyDefault {
    public void test(int i) {
       switch(i) {
-      default:
-         System.out.println("Test");
+         default:
+            System.out.println("Test");
       }
    }
 
    public void test2(int i) {
       switch(i) {
-      default:
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchOnStrings.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,44 +3,44 @@
 public class TestSwitchOnStrings {
    public int testSOS1(String s) {
       switch(s) {
-      case "xxx":
-         return 2;
-      case "yyy":
-         return 1;
-      default:
-         return 0;
+         case "xxx":
+            return 2;
+         case "yyy":
+            return 1;
+         default:
+            return 0;
       }
    }
 
    public int testSOS2(String s) {
       switch(s) {
-      case "xxx":
-         return 2;
-      case "yyy":
-         return 1;
-      case "BBAa":
-         return 5;
-      case "AaAa":
-         return 4;
-      case "AaBB":
-         return 3;
-      default:
-         return 0;
+         case "xxx":
+            return 2;
+         case "yyy":
+            return 1;
+         case "BBAa":
+            return 5;
+         case "AaAa":
+            return 4;
+         case "AaBB":
+            return 3;
+         default:
+            return 0;
       }
    }
 
    public int testSOS3(String s) {
       switch(s) {
-      case "xxx":
-         return 2;
-      case "yyy":
-         return 1;
-      case "AaAa":
-      case "AaBB":
-      case "BBAa":
-         return 3;
-      default:
-         return 0;
+         case "xxx":
+            return 2;
+         case "yyy":
+            return 1;
+         case "AaAa":
+         case "AaBB":
+         case "BBAa":
+            return 3;
+         default:
+            return 0;
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,24 +1,19 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatching1 {
    public void test(Object o) {
       Objects.requireNonNull(o);
-      byte var3 = 0;
-      switch(SwitchBootstraps.typeSwitch<"typeSwitch",Integer,String>(o, var3)) {
-      case 0:
-         Integer i = (Integer)o;
-         System.out.println(i);
-         break;
-      case 1:
-         String s = (String)o;
-         System.out.println(s);
-         break;
-      default:
-         System.out.println("Default");
+      switch(o) {
+         case Integer i:
+            System.out.println(i);
+            break;
+         case String s:
+            System.out.println(s);
+            break;
+         default:
+            System.out.println("Default");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching10.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,34 +2,16 @@
 
 public class TestSwitchPatternMatching10 {
    static void test(String s) {
-      byte var2 = -1;
-      if (s != null) {
-         switch(s.hashCode()) {
-         case 3329:
-            if (s.equals("hi")) {
-               var2 = 0;
-            }
+      switch(s) {
+         case "hi":
+            System.out.println("hi");
             break;
-         case 98030:
-            if (s.equals("bye")) {
-               var2 = 1;
-            }
-         }
-      } else {
-         var2 = 2;
+         case "bye":
+            System.out.println("bye");
+            break;
+         case null:
+         default:
+            System.out.println("oh");
       }
-
-      switch(var2) {
-      case 0:
-         System.out.println("hi");
-         break;
-      case 1:
-         System.out.println("bye");
-         break;
-      case 2:
-      default:
-         System.out.println("oh");
-      }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching11.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,27 +2,10 @@
 
 public class TestSwitchPatternMatching11 {
    static String test(String s) {
-      byte var2 = -1;
-      if (s != null) {
-         switch(s.hashCode()) {
-         case 3329:
-            if (s.equals("hi")) {
-               var2 = 0;
-            }
-            break;
-         case 98030:
-            if (s.equals("bye")) {
-               var2 = 1;
-            }
-         }
-      } else {
-         var2 = 2;
-      }
-
-      return switch(var2) {
-         case 0 -> "hi";
-         case 1 -> "bye";
-         case 2 -> String;
+      return switch(s) {
+         case "hi" -> "hi";
+         case "bye" -> "bye";
+         case null -> null;
          default -> "oh";
       };
    }
gen_diffs.py pkg/TestSwitchPatternMatching12.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,10 +6,10 @@
    static int testTriangle(boolean a, Direction l, Direction r) {
       Direction var3 = a ? l : r;
 
-      return switch(var3 != null ? null.$SwitchMap$ext$Direction[var3.ordinal()] : -1) {
-         default -> -1;
-         case 1, 2, 3 -> 0;
-         case 4, 5 -> 1;
+      return switch(var3) {
+         case null, default -> -1;
+         case NORTH, SOUTH, WEST -> 0;
+         case EAST, UP -> 1;
       };
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching13.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,70 +1,39 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatching13 {
    static void test(TestSwitchPatternMatching13.Shape s) {
-      TestSwitchPatternMatching13.Shape var1 = s;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestSwitchPatternMatching13.Triangle,TestSwitchPatternMatching13.Triangle,TestSwitchPatternMatching13.Triangle,TestSwitchPatternMatching13.Triangle>(
-            var1, var2
-         )) {
-         case -1:
+      switch(s) {
+         case null:
             if (Math.random() > 0.0) {
                System.out.println("Lucky null");
             }
-
-            return;
-         case 0:
-            TestSwitchPatternMatching13.Triangle t = (TestSwitchPatternMatching13.Triangle)var1;
-            if (!(t.calculateArea() > 150.0)) {
-               var2 = 1;
-               break;
-            }
-
+            break;
+         case TestSwitchPatternMatching13.Triangle t when t.calculateArea() > 150.0:
             if (t.hashCode() > 0) {
                System.out.println("Larger positive-hash triangle");
             }
 
             System.out.println("Larger triangle: " + t);
-            return;
-         case 1:
-            TestSwitchPatternMatching13.Triangle t = (TestSwitchPatternMatching13.Triangle)var1;
-            if (!(t.calculateArea() > 50.0)) {
-               var2 = 2;
-               break;
-            }
-
+            break;
+         case TestSwitchPatternMatching13.Triangle tx when tx.calculateArea() > 50.0:
             System.out.println("Smaller triangle");
-            return;
-         case 2:
-            TestSwitchPatternMatching13.Triangle t = (TestSwitchPatternMatching13.Triangle)var1;
-            if (!(t.calculateArea() > 100.0)) {
-               var2 = 3;
-               break;
-            }
-
+            break;
+         case TestSwitchPatternMatching13.Triangle txx when txx.calculateArea() > 100.0:
             System.out.println("Large triangle");
 
             while(Math.random() > 0.5) {
                System.out.println("Keep going");
             }
-
-            return;
-         case 3:
-            TestSwitchPatternMatching13.Triangle t = (TestSwitchPatternMatching13.Triangle)var1;
-            if (t.hashCode() > 0) {
+            break;
+         case TestSwitchPatternMatching13.Triangle txxx:
+            if (txxx.hashCode() > 0) {
                System.out.println("Small positive-hash triangle");
             }
 
             System.out.println("Small triangle");
-            return;
+            break;
          default:
             System.out.println("Non-triangle");
-            return;
-         }
       }
    }
 
gen_diffs.py pkg/TestSwitchPatternMatching14.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,28 +1,23 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatching14 {
    static void test(TestSwitchPatternMatching14.Shape s) {
-      byte var2 = 0;
-      switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestSwitchPatternMatching14.Triangle>(s, var2)) {
-      case -1:
-         if (Math.random() > 0.0) {
-            System.out.println("Lucky null");
-         }
-         break;
-      case 0:
-         TestSwitchPatternMatching14.Triangle t = (TestSwitchPatternMatching14.Triangle)s;
-         if (t.hashCode() > 0) {
-            System.out.println("Larger positive-hash triangle");
-         }
+      switch(s) {
+         case null:
+            if (Math.random() > 0.0) {
+               System.out.println("Lucky null");
+            }
+            break;
+         case TestSwitchPatternMatching14.Triangle t:
+            if (t.hashCode() > 0) {
+               System.out.println("Larger positive-hash triangle");
+            }
 
-         System.out.println("Larger triangle: " + t);
-         break;
-      default:
-         System.out.println("Non-triangle");
+            System.out.println("Larger triangle: " + t);
+            break;
+         default:
+            System.out.println("Non-triangle");
       }
-
    }
 
    private abstract class Shape {
gen_diffs.py pkg/TestSwitchPatternMatching15.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,45 +1,23 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatching15 {
    static void test(Object s) {
       Objects.requireNonNull(s);
-      Object var1 = s;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Integer,Number,Integer,Number>(var1, var2)) {
-         case 0:
-            Integer i = (Integer)var1;
-            if (i <= 0) {
-               var2 = 1;
-               break;
-            }
-
+      switch(s) {
+         case Integer i when i > 0:
             System.out.println("positive integer: " + i);
-            return;
-         case 1:
-            Number n = (Number)var1;
-            if (n.hashCode() == 0) {
-               var2 = 2;
-               break;
-            }
-
+            break;
+         case Number n when n.hashCode() != 0:
             System.out.println("Normal number: " + n);
-            return;
-         case 2:
-            Integer i = (Integer)var1;
-            System.out.println(i);
-            return;
-         case 3:
-            Number n = (Number)var1;
-            System.out.println("Number: " + n);
-            return;
-         default:
-            return;
-         }
+            break;
+         case Integer ix:
+            System.out.println(ix);
+            break;
+         case Number nx:
+            System.out.println("Number: " + nx);
+            break;
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,52 +1,30 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatching16 {
    static void test3(Object s) {
       Objects.requireNonNull(s);
-      Object oh = s;
-      int hello = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Integer,Number,Integer,Number>(oh, hello)) {
-         case 0:
-            Integer i = (Integer)oh;
-            if (i <= 0) {
-               hello = 1;
-               break;
-            }
-
+      switch(s) {
+         case Integer i when i > 0:
             System.out.println("positive integer: " + i);
-            return;
-         case 1:
-            Number n = (Number)oh;
-            if (n.hashCode() == 0) {
-               hello = 2;
-               break;
-            }
-
+            break;
+         case Number n when n.hashCode() != 0:
             System.out.println("Normal number: " + n);
-            return;
-         case 2:
-            Integer i = (Integer)oh;
+            break;
+         case Integer ix:
             if (Math.random() < 0.5) {
                int oh = 0;
-               hello = 3;
+               int hello = 3;
             } else {
                System.out.println("hello");
             }
-
-            return;
-         case 3:
-            Number n = (Number)oh;
-            System.out.println("Number: " + n);
-            return;
+            break;
+         case Number nx:
+            System.out.println("Number: " + nx);
+            break;
          default:
             System.out.println("default");
-            return;
-         }
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching17.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -11,22 +11,22 @@
 
       while(true) {
          switch(SwitchBootstraps.typeSwitch<"typeSwitch",String>(var1, var2)) {
-         case 0:
-            String s = (String)var1;
-            switch(s.charAt(0)) {
-            case 'b':
-               if (s.length() <= 5) {
-                  break;
+            case 0:
+               String s = (String)var1;
+               switch(s.charAt(0)) {
+                  case 'b':
+                     if (s.length() <= 5) {
+                        break;
+                     }
+                  case 'a':
+                     System.out.println(s);
+                     throw new IllegalArgumentException("no");
                }
-            case 'a':
-               System.out.println(s);
+
+               var2 = 1;
+               break;
+            default:
                throw new IllegalArgumentException("no");
-            }
-
-            var2 = 1;
-            break;
-         default:
-            throw new IllegalArgumentException("no");
          }
       }
    }
gen_diffs.py pkg/TestSwitchPatternMatching18.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,95 +1,65 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatching18 {
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    static void test(Integer o) {
       Objects.requireNonNull(o);
-      Integer var1 = o;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",42,Integer,Integer>(var1, var2)) {
-         case 0:
+      <unknown> var1;
+      switch(o) {
+         case 42:
             System.out.println("42");
-            return;
-         case 1:
-            if (var1 >= 50) {
-               var2 = 2;
-               break;
-            }
-
+            break;
+         case Integer var5 when var1 < 50:
             System.out.println("small");
-            return;
-         case 2:
-            if (var1.compareTo(17) <= 0) {
-               var2 = 3;
-               break;
-            }
-
+            break;
+         case Integer var6 when var1.compareTo(17) > 0:
             System.out.println("comparable");
-            return;
+            break;
          default:
             System.out.println("default");
-            return;
-         }
       }
    }
 
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    static void test2(Integer o) {
-      Integer var1 = o;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",42,16,Integer>(var1, var2)) {
-         case -1:
-         case 1:
+      <unknown> var1;
+      switch(o) {
+         case 16:
+         case null:
             System.out.println("maybe 16?");
-            return;
-         case 0:
+            break;
+         case 42:
             System.out.println("42");
-            return;
-         case 2:
-            if (var1 >= 50) {
-               var2 = 3;
-               break;
-            }
-
+            break;
+         case Integer var4 when var1 < 50:
             System.out.println("small");
-            return;
+            break;
          default:
             System.out.println("default");
-            return;
-         }
       }
    }
 
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    static void test3(Integer o) {
-      Integer var1 = o;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",42,Integer,16>(var1, var2)) {
-         case -1:
-         case 2:
+      <unknown> var1;
+      switch(o) {
+         case 16:
+         case null:
             System.out.println("definitely null");
-            return;
-         case 0:
+            break;
+         case 42:
             System.out.println("42");
-            return;
-         case 1:
-            if (var1 >= 50) {
-               var2 = 2;
-               break;
-            }
-
+            break;
+         case Integer var4 when var1 < 50:
             System.out.println("small");
-            return;
+            break;
          default:
             System.out.println("default");
-            return;
-         }
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching19.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,78 +1,45 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
-
 public class TestSwitchPatternMatching19 {
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    static void test(TestSwitchPatternMatching19.XXX s) {
-      TestSwitchPatternMatching19.XXX var1 = s;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.enumSwitch<"enumSwitch","X1",TestSwitchPatternMatching19.XXX,TestSwitchPatternMatching19.XXX,TestSwitchPatternMatching19.XXX,TestSwitchPatternMatching19.XXX,TestSwitchPatternMatching19.XXX>(
-            var1, var2
-         )) {
-         case -1:
+      <unknown> var1;
+      switch(s) {
+         case null:
          default:
             System.out.println("f");
-            return;
-         case 0:
+            break;
+         case X1:
             System.out.println("x1");
-            return;
-         case 1:
-            if (var1 == TestSwitchPatternMatching19.XXX.X1) {
-               var2 = 2;
-               break;
-            }
-
+            break;
+         case TestSwitchPatternMatching19.XXX var8 when var1 != TestSwitchPatternMatching19.XXX.X1:
             System.out.println("a");
-            return;
-         case 2:
-            if (!(var1 instanceof TestSwitchPatternMatching19.C)) {
-               var2 = 3;
-               break;
-            }
-
+            break;
+         case TestSwitchPatternMatching19.XXX var9 when var1 instanceof TestSwitchPatternMatching19.C:
             System.out.println("b");
-            return;
-         case 3:
-            if (var1 != var1) {
-               var2 = 4;
-               break;
-            }
-
+            break;
+         case TestSwitchPatternMatching19.XXX var10 when var1 == var1:
             System.out.println("d");
-            return;
-         case 4:
-            var2 = 5;
-         }
+            break;
+         case TestSwitchPatternMatching19.XXX var11 when false:
       }
    }
 
    static void test2(TestSwitchPatternMatching19.XXX s) {
-      TestSwitchPatternMatching19.XXX var1 = s;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.enumSwitch<"enumSwitch","X1","X2",TestSwitchPatternMatching19.XXX>(var1, var2)) {
-         case -1:
-         case 1:
+      switch(s) {
+         case X2:
+         case null:
             System.out.println("maybe x2?");
-            return;
-         case 0:
+            break;
+         case X1:
             System.out.println("x1");
-            return;
-         case 2:
-            if (!(Math.random() > 0.0)) {
-               var2 = 3;
-               break;
-            }
-
+            break;
+         case TestSwitchPatternMatching19.XXX var4 when Math.random() > 0.0:
             System.out.println("just making sure!");
-            return;
+            break;
          default:
             System.out.println("default");
-            return;
-         }
       }
    }
 
@@ -105,7 +72,7 @@
       X2,
       X3;
 
-      // $FF: synthetic method
+      // $QF: synthetic method
       private static TestSwitchPatternMatching19.XXX[] $values() {
          return new TestSwitchPatternMatching19.XXX[]{X1, X2, X3};
       }
gen_diffs.py pkg/TestSwitchPatternMatching2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,34 +1,19 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatching2 {
    static void testTriangle(TestSwitchPatternMatching2.Shape s) {
-      TestSwitchPatternMatching2.Shape var1 = s;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestSwitchPatternMatching2.Triangle,TestSwitchPatternMatching2.Triangle>(var1, var2)) {
-         case -1:
+      switch(s) {
+         case null:
             System.out.println("null");
-            return;
-         case 0:
-            TestSwitchPatternMatching2.Triangle t = (TestSwitchPatternMatching2.Triangle)var1;
-            if (!(t.calculateArea() > 100.0)) {
-               var2 = 1;
-               break;
-            }
-
+            break;
+         case TestSwitchPatternMatching2.Triangle t when t.calculateArea() > 100.0:
             System.out.println("Large triangle");
-            return;
-         case 1:
-            TestSwitchPatternMatching2.Triangle t = (TestSwitchPatternMatching2.Triangle)var1;
+            break;
+         case TestSwitchPatternMatching2.Triangle tx:
             System.out.println("Small triangle");
-            return;
+            break;
          default:
             System.out.println("Non-triangle");
-            return;
-         }
       }
    }
 
gen_diffs.py pkg/TestSwitchPatternMatching20.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,28 +1,18 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatching20 {
    public void test(Object o) {
       Objects.requireNonNull(o);
-      Object var2 = o;
-      byte var3 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Integer,String>(var2, var3)) {
-         case 0:
-            Integer i = (Integer)var2;
-            var3 = 1;
+      switch(o) {
+         case Integer var6 when false:
             break;
-         case 1:
-            String s = (String)var2;
+         case String s:
             System.out.println(s);
-            return;
+            break;
          default:
             System.out.println("Default");
-            return;
-         }
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching21.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,113 +1,68 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatching21 {
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    public void test1(String it) {
       Objects.requireNonNull(it);
-      String var2 = it;
-      byte var3 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch","","hi",String,String,String>(var2, var3)) {
-         case 0:
+      <unknown> var2;
+      switch(it) {
+         case "":
             System.out.println("nothing");
-            return;
-         case 1:
+            break;
+         case "hi":
             System.out.println("hello");
-            return;
-         case 2:
-            if (!(Math.random() > 0.0)) {
-               var3 = 3;
-               break;
-            }
-
-            System.out.println(var2 + "!");
-            return;
-         case 3:
-            if (!(Math.random() > 0.0)) {
-               var3 = 4;
-               break;
-            }
-
-            System.out.println(var2 + "!!");
-            return;
-         case 4:
-            if (!var2.startsWith("?")) {
-               var3 = 5;
-               break;
-            }
-
-            System.out.println(var2 + "?");
-            return;
+            break;
+         case String var7 when Math.random() > 0.0:
+            System.out.println(it + "!");
+            break;
+         case String var8 when Math.random() > 0.0:
+            System.out.println(it + "!!");
+            break;
+         case String var9 when var2.startsWith("?"):
+            System.out.println(it + "?");
+            break;
          default:
             System.out.println("Default");
-            return;
-         }
       }
    }
 
    public void test2(String it) {
-      String var2 = it;
-      byte var3 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch","","hi",String,String,String>(var2, var3)) {
-         case -1:
+      switch(it) {
+         case null:
          default:
-            System.out.println(var2 + "?");
-            return;
-         case 0:
+            System.out.println(it + "?");
+            break;
+         case "":
             System.out.println("nothing");
-            return;
-         case 1:
+            break;
+         case "hi":
             System.out.println("hello");
-            return;
-         case 2:
-            if (!(Math.random() > 0.0)) {
-               var3 = 3;
-               break;
-            }
-
-            System.out.println(var2 + "!");
-            return;
-         case 3:
-            if (Math.random() > 0.0) {
-               System.out.println(var2 + "!!");
-               return;
-            }
-
-            var3 = 4;
-         }
+            break;
+         case String var7 when Math.random() > 0.0:
+            System.out.println(it + "!");
+            break;
+         case String var8 when Math.random() > 0.0:
+            System.out.println(it + "!!");
       }
    }
 
    public void test3(String it) {
-      String var2 = it;
-      byte var3 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch","","hi",String>(var2, var3)) {
-         case -1:
-         case 0:
+      switch(it) {
+         case "":
+         case null:
             System.out.println("nothing");
-            return;
-         case 1:
+            break;
+         case "hi":
             System.out.println("hello");
-            return;
-         case 2:
-            if (!(Math.random() > 0.0)) {
-               var3 = 3;
-               break;
-            }
-
-            System.out.println(var2 + "!");
-            return;
+            break;
+         case String var5 when Math.random() > 0.0:
+            System.out.println(it + "!");
+            break;
          default:
             System.out.println("Default");
-            return;
-         }
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching22.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,6 +1,4 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatching22 {
    public void test1() {
@@ -8,20 +6,17 @@
          System.out.println("hello");
       } catch (Exception var8) {
          Object var2 = new Object();
-         byte var3 = 0;
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Short>(var2, var3)) {
-         case -1:
-         case 0:
-            Short var4 = (Short)var2;
-            break;
-         default:
-            System.out.println("Not a short");
-            throw new RuntimeException();
+         switch(var2) {
+            case Short var4:
+            case null:
+               break;
+            default:
+               System.out.println("Not a short");
+               throw new RuntimeException();
          }
       } finally {
          System.out.println("world");
       }
-
    }
 
    public void test2() {
@@ -29,14 +24,12 @@
          System.out.println("hello");
       } catch (Exception var8) {
          Object var2 = new Object();
-         byte var3 = 0;
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Short>(var2, var3)) {
-         case -1:
-         case 0:
-            Short var4 = (Short)var2;
-         default:
-            System.out.println("Not a short");
-            throw new RuntimeException();
+         switch(var2) {
+            case Short var4:
+            case null:
+            default:
+               System.out.println("Not a short");
+               throw new RuntimeException();
          }
       } finally {
          throw new RuntimeException();
@@ -48,20 +41,17 @@
          System.out.println("hello");
       } catch (Exception var8) {
          Object var2 = new Object();
-         byte var3 = 0;
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Short>(var2, var3)) {
-         case -1:
-         case 0:
-            Short var4 = (Short)var2;
-            break;
-         default:
-            System.out.println("Not a short");
-            throw new RuntimeException();
+         switch(var2) {
+            case Short var4:
+            case null:
+               break;
+            default:
+               System.out.println("Not a short");
+               throw new RuntimeException();
          }
       } finally {
          System.out.println("world");
       }
-
    }
 
    public void test2Null() {
@@ -69,14 +59,12 @@
          System.out.println("hello");
       } catch (Exception var8) {
          Object var2 = new Object();
-         byte var3 = 0;
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Short>(var2, var3)) {
-         case -1:
-         case 0:
-            Short var4 = (Short)var2;
-         default:
-            System.out.println("Not a short");
-            throw new RuntimeException();
+         switch(var2) {
+            case Short var4:
+            case null:
+            default:
+               System.out.println("Not a short");
+               throw new RuntimeException();
          }
       } finally {
          throw new RuntimeException();
@@ -88,11 +76,11 @@
          System.out.println("hello");
       } catch (Exception var5) {
          switch(0) {
-         case -1:
-         case 10:
-         default:
-            System.out.println("Not a short");
-            throw new RuntimeException();
+            case -1:
+            case 10:
+            default:
+               System.out.println("Not a short");
+               throw new RuntimeException();
          }
       } finally {
          throw new RuntimeException();
gen_diffs.py pkg/TestSwitchPatternMatching3.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,17 +1,13 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatching3 {
    static void test(Object s) {
-      byte var2 = 0;
-      switch(SwitchBootstraps.typeSwitch<"typeSwitch">(s, var2)) {
-      case -1:
-         System.out.println("null");
-         break;
-      default:
-         System.out.println("default");
+      switch(s) {
+         case null:
+            System.out.println("null");
+            break;
+         default:
+            System.out.println("default");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching4.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,15 +1,13 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatching4 {
    static void test(Object s) {
       Objects.requireNonNull(s);
-      byte var2 = 0;
-      switch(SwitchBootstraps.typeSwitch<"typeSwitch">(s, var2)) {
-      default:
-         System.out.println("default");
+      switch(s) {
+         default:
+            System.out.println("default");
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching5.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,54 +1,25 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatching5 {
    static void test(TestSwitchPatternMatching5.Shape s) {
-      TestSwitchPatternMatching5.Shape var1 = s;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestSwitchPatternMatching5.Triangle,TestSwitchPatternMatching5.Triangle,TestSwitchPatternMatching5.Triangle,TestSwitchPatternMatching5.Triangle>(
-            var1, var2
-         )) {
-         case -1:
+      switch(s) {
+         case null:
             System.out.println("null");
-            return;
-         case 0:
-            TestSwitchPatternMatching5.Triangle t = (TestSwitchPatternMatching5.Triangle)var1;
-            if (!(t.calculateArea() > 150.0)) {
-               var2 = 1;
-               break;
-            }
-
+            break;
+         case TestSwitchPatternMatching5.Triangle t when t.calculateArea() > 150.0:
             System.out.println("Larger triangle");
-            return;
-         case 1:
-            TestSwitchPatternMatching5.Triangle t = (TestSwitchPatternMatching5.Triangle)var1;
-            if (!(t.calculateArea() > 50.0)) {
-               var2 = 2;
-               break;
-            }
-
+            break;
+         case TestSwitchPatternMatching5.Triangle tx when tx.calculateArea() > 50.0:
             System.out.println("Smaller triangle");
-            return;
-         case 2:
-            TestSwitchPatternMatching5.Triangle t = (TestSwitchPatternMatching5.Triangle)var1;
-            if (!(t.calculateArea() > 100.0)) {
-               var2 = 3;
-               break;
-            }
-
+            break;
+         case TestSwitchPatternMatching5.Triangle txx when txx.calculateArea() > 100.0:
             System.out.println("Large triangle");
-            return;
-         case 3:
-            TestSwitchPatternMatching5.Triangle t = (TestSwitchPatternMatching5.Triangle)var1;
+            break;
+         case TestSwitchPatternMatching5.Triangle txxx:
             System.out.println("Small triangle");
-            return;
+            break;
          default:
             System.out.println("Non-triangle");
-            return;
-         }
       }
    }
 
gen_diffs.py pkg/TestSwitchPatternMatching6.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,10 +4,10 @@
 
 public class TestSwitchPatternMatching6 {
    static int testTriangle(Direction d) {
-      return switch(d != null ? null.$SwitchMap$ext$Direction[d.ordinal()] : -1) {
-         default -> -1;
-         case 1, 2, 3 -> 0;
-         case 4, 5 -> 1;
+      return switch(d) {
+         case null, default -> -1;
+         case NORTH, SOUTH, WEST -> 0;
+         case EAST, UP -> 1;
       };
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching7.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,14 +1,11 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatching7 {
    static String test(Object s) {
-      byte var2 = 0;
-      switch(SwitchBootstraps.typeSwitch<"typeSwitch">(s, var2)) {
-      case -1:
-      default:
-         return "everything";
+      switch(s) {
+         case null:
+         default:
+            return "everything";
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching8.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,27 +2,10 @@
 
 public class TestSwitchPatternMatching8 {
    static String test(String s) {
-      byte var2 = -1;
-      if (s != null) {
-         switch(s.hashCode()) {
-         case 3329:
-            if (s.equals("hi")) {
-               var2 = 0;
-            }
-            break;
-         case 98030:
-            if (s.equals("bye")) {
-               var2 = 1;
-            }
-         }
-      } else {
-         var2 = 2;
-      }
-
-      return switch(var2) {
-         case 0 -> "hi";
-         case 1 -> "bye";
-         default -> "oh";
+      return switch(s) {
+         case "hi" -> "hi";
+         case "bye" -> "bye";
+         case null, default -> "oh";
       };
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching9.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,32 +2,10 @@
 
 public class TestSwitchPatternMatching9 {
    static String test(String s) {
-      byte var2 = -1;
-      if (s != null) {
-         switch(s.hashCode()) {
-         case 3329:
-            if (s.equals("hi")) {
-               var2 = 0;
-            }
-            break;
-         case 98030:
-            if (s.equals("bye")) {
-               var2 = 1;
-            }
-            break;
-         case 3392903:
-            if (s.equals("null")) {
-               var2 = 2;
-            }
-         }
-      } else {
-         var2 = 3;
-      }
-
-      return switch(var2) {
-         case 0 -> "hi";
-         case 1 -> "bye";
-         case 2, 3 -> "null";
+      return switch(s) {
+         case "hi" -> "hi";
+         case "bye" -> "bye";
+         case "null", null -> "null";
          default -> "oh";
       };
    }
gen_diffs.py pkg/TestSwitchPatternMatchingConstructor1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,6 +1,4 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatchingConstructor1 {
    private TestSwitchPatternMatchingConstructor1(String s) {
@@ -8,38 +6,12 @@
    }
 
    private TestSwitchPatternMatchingConstructor1(TestSwitchPatternMatchingConstructor1.Shape s) {
-      TestSwitchPatternMatchingConstructor1.Shape var2 = s;
-      byte var3 = 0;
-
-      String var10001;
-      label17:
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestSwitchPatternMatchingConstructor1.Triangle,TestSwitchPatternMatchingConstructor1.Triangle>(
-            var2, var3
-         )) {
-         case -1:
-            var10001 = "null";
-            break label17;
-         case 0:
-            TestSwitchPatternMatchingConstructor1.Triangle t = (TestSwitchPatternMatchingConstructor1.Triangle)var2;
-            if (!(t.calculateArea() > 100.0)) {
-               var3 = 1;
-               break;
-            }
-
-            var10001 = "Large triangle";
-            break label17;
-         case 1:
-            TestSwitchPatternMatchingConstructor1.Triangle t = (TestSwitchPatternMatchingConstructor1.Triangle)var2;
-            var10001 = "Small triangle";
-            break label17;
-         default:
-            var10001 = "Non-triangle";
-            break label17;
-         }
-      }
-
-      this(var10001);
+      this(switch(s) {
+         case null -> "null";
+         case TestSwitchPatternMatchingConstructor1.Triangle t when t.calculateArea() > 100.0 -> "Large triangle";
+         case TestSwitchPatternMatchingConstructor1.Triangle tx -> "Small triangle";
+         default -> "Non-triangle";
+      });
    }
 
    private abstract static class Shape {
gen_diffs.py pkg/TestSwitchPatternMatchingConstructor2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,6 +1,5 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatchingConstructor2 {
@@ -9,20 +8,17 @@
    }
 
    private TestSwitchPatternMatchingConstructor2(Object s) {
-      byte var3 = 0;
-
-      this(switch(SwitchBootstraps.typeSwitch<"typeSwitch">(s, var3)) {
-         case -1 -> "null";
+      this(switch(s) {
+         case null -> "null";
          default -> "Non-triangle";
       });
    }
 
    private TestSwitchPatternMatchingConstructor2(Object s, boolean unused) {
       Objects.requireNonNull(s);
-      byte var4 = 0;
-      switch(SwitchBootstraps.typeSwitch<"typeSwitch">(s, var4)) {
-      default:
-         this("Non-triangle");
+      switch(s) {
+         default:
+            this("Non-triangle");
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatchingFuzz1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,34 +1,31 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 class TestSwitchPatternMatchingFuzz1 {
    public void test() {
       Object var1 = new Object();
-      byte var2 = 0;
-      switch(SwitchBootstraps.typeSwitch<"typeSwitch",Double>(var1, var2)) {
-      case -1:
-      case 0:
-         Double l = (Double)var1;
-         long[] var4 = new long[0];
-         int var5 = var4.length;
-         byte var6 = 0;
-         if (var6 < var5) {
-            long var10000 = var4[var6];
+      switch(var1) {
+         case Double var14:
+         case null:
+            Double l = (Double)var1;
+            long[] var4 = new long[0];
+            int var5 = var4.length;
+            byte var6 = 0;
+            if (var6 < var5) {
+               long none = var4[var6];
+               throw new RuntimeException();
+            } else {
+               try {
+                  System.out.println("Hi");
+                  return;
+               } catch (Exception var12) {
+               } finally {
+                  ;
+               }
+
+               throw new RuntimeException();
+            }
+         default:
             throw new RuntimeException();
-         } else {
-            try {
-               System.out.println("Hi");
-               return;
-            } catch (Exception var12) {
-            } finally {
-               ;
-            }
-
-            throw new RuntimeException();
-         }
-      default:
-         throw new RuntimeException();
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatchingInstanceof1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,38 +1,22 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatchingInstanceof1 {
    public void test(Object o) {
       Objects.requireNonNull(o);
-      Object var2 = o;
-      byte var3 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",String,Integer,String>(var2, var3)) {
-         case 0:
-            String s = (String)var2;
-            if (o instanceof Integer) {
-               Integer a = (Integer)o;
-               System.out.println(s);
-               return;
-            }
-
-            var3 = 1;
+      switch(o) {
+         case String s when o instanceof Integer a:
+            System.out.println(s);
             break;
-         case 1:
-            Integer i = (Integer)var2;
+         case Integer i:
             System.out.println(i);
-            return;
-         case 2:
-            String s = (String)var2;
-            System.out.println(s);
-            return;
+            break;
+         case String sx:
+            System.out.println(sx);
+            break;
          default:
             System.out.println("Default");
-            return;
-         }
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatchingInstanceof2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,38 +1,22 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatchingInstanceof2 {
    public void test(Object o) {
       Objects.requireNonNull(o);
-      Object var2 = o;
-      byte var3 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Number,Number,String>(var2, var3)) {
-         case 0:
-            Number n = (Number)var2;
-            if (n instanceof Integer) {
-               Integer i = (Integer)n;
-               System.out.println(i);
-               return;
-            }
-
-            var3 = 1;
+      switch(o) {
+         case Number n when n instanceof Integer i:
+            System.out.println(i);
             break;
-         case 1:
-            Number n = (Number)var2;
-            System.out.println(n);
-            return;
-         case 2:
-            String s = (String)var2;
+         case Number nx:
+            System.out.println(nx);
+            break;
+         case String s:
             System.out.println(s);
-            return;
+            break;
          default:
             System.out.println("Default");
-            return;
-         }
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatchingInstanceof3.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,40 +1,22 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatchingInstanceof3 {
    public void test(Object o) {
       Objects.requireNonNull(o);
-      Object var2 = o;
-      byte var3 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Number,Number,String>(var2, var3)) {
-         case 0:
-            Number n = (Number)var2;
-            if (n instanceof Integer) {
-               Integer i = (Integer)n;
-               if (i > 0) {
-                  System.out.println(i);
-                  return;
-               }
-            }
-
-            var3 = 1;
+      switch(o) {
+         case Number n when n instanceof Integer i && i > 0:
+            System.out.println(i);
             break;
-         case 1:
-            Number n = (Number)var2;
-            System.out.println(n);
-            return;
-         case 2:
-            String s = (String)var2;
+         case Number nx:
+            System.out.println(nx);
+            break;
+         case String s:
             System.out.println(s);
-            return;
+            break;
          default:
             System.out.println("Default");
-            return;
-         }
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatchingInstanceof4.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -11,23 +11,21 @@
 
       while(true) {
          switch(SwitchBootstraps.typeSwitch<"typeSwitch",String>(var2, var3)) {
-         case 0:
-            String s = (String)var2;
-            if (o instanceof Class) {
-               Class<?> clzz = (Class)o;
-               Object var7 = clzz.getSigners()[0];
-               if (var7 instanceof Class) {
-                  Class<?> c2 = (Class)var7;
-                  System.out.println("" + clzz + c2);
-                  return;
+            case 0:
+               String s = (String)var2;
+               if (o instanceof Class clzz) {
+                  Object var7 = clzz.getSigners()[0];
+                  if (var7 instanceof Class c2) {
+                     System.out.println("" + clzz + c2);
+                     return;
+                  }
                }
-            }
 
-            var3 = 1;
-            break;
-         default:
-            System.out.println("Default");
-            return;
+               var3 = 1;
+               break;
+            default:
+               System.out.println("Default");
+               return;
          }
       }
    }
gen_diffs.py pkg/TestSwitchPatternMatchingLoop.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,24 +1,20 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatchingLoop {
    public void test(Object o) {
       while(true) {
          Objects.requireNonNull(o);
-         byte var3 = 0;
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Integer,String>(o, var3)) {
-         case 0:
-            Integer i = (Integer)o;
-            System.out.println(i);
-            break;
-         case 1:
-            String s = (String)o;
-            System.out.println(s);
-            break;
-         default:
-            System.out.println("Default");
+         switch(o) {
+            case Integer i:
+               System.out.println(i);
+               break;
+            case String s:
+               System.out.println(s);
+               break;
+            default:
+               System.out.println("Default");
          }
       }
    }
gen_diffs.py pkg/TestSwitchPatternMatchingReturn1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,22 +1,14 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatchingReturn1 {
    public int test(Object o) {
       Objects.requireNonNull(o);
-      byte var3 = 0;
 
-      return switch(SwitchBootstraps.typeSwitch<"typeSwitch",Integer,String>(o, var3)) {
-         case 0 -> {
-            Integer i = (Integer)o;
-            yield i;
-         }
-         case 1 -> {
-            String s = (String)o;
-            yield s.length();
-         }
+      return switch(o) {
+         case Integer i -> i;
+         case String s -> s.length();
          default -> 0;
       };
    }
gen_diffs.py pkg/TestSwitchPatternMatchingReturn2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,33 +1,16 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatchingReturn2 {
    public int test(Object o) {
       Objects.requireNonNull(o);
-      Object var2 = o;
-      byte var3 = 0;
 
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Integer,Integer,String>(var2, var3)) {
-         case 0:
-            Integer i = (Integer)var2;
-            if (i <= 100) {
-               var3 = 1;
-               break;
-            }
-
-            return -i;
-         case 1:
-            Integer i = (Integer)var2;
-            return i;
-         case 2:
-            String s = (String)var2;
-            return s.length();
-         default:
-            return 0;
-         }
-      }
+      return switch(o) {
+         case Integer i when i > 100 -> -i;
+         case Integer ix -> ix;
+         case String s -> s.length();
+         default -> 0;
+      };
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatchingWithNull.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,41 +1,31 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatchingWithNull {
    public void test(Object o) {
-      byte var3 = 0;
-      switch(SwitchBootstraps.typeSwitch<"typeSwitch",Integer,String>(o, var3)) {
-      case -1:
-      case 0:
-         Integer i = (Integer)o;
-         System.out.println(i);
-         break;
-      case 1:
-         String s = (String)o;
-         System.out.println(s);
-         break;
-      default:
-         System.out.println("Default");
+      switch(o) {
+         case Integer i:
+         case null:
+            System.out.println(i);
+            break;
+         case String s:
+            System.out.println(s);
+            break;
+         default:
+            System.out.println("Default");
       }
-
    }
 
    public void test2(Object o) {
-      byte var3 = 0;
-      switch(SwitchBootstraps.typeSwitch<"typeSwitch",Integer,String>(o, var3)) {
-      case -1:
-      case 0:
-         Integer i = (Integer)o;
-         System.out.println(i);
-         break;
-      case 1:
-         String s = (String)o;
-         System.out.println(s);
-         break;
-      default:
-         System.out.println("Default");
+      switch(o) {
+         case Integer i:
+         case null:
+            System.out.println(i);
+            break;
+         case String s:
+            System.out.println(s);
+            break;
+         default:
+            System.out.println("Default");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchReturn.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,16 +3,16 @@
 public class TestSwitchReturn {
    public int test(int x) {
       switch(x) {
-      case 1:
-      case 2:
-      case 3:
-         return 1;
-      case 4:
-      case 32:
-      case 46:
-         return 3;
-      default:
-         return 4;
+         case 1:
+         case 2:
+         case 3:
+            return 1;
+         case 4:
+         case 32:
+         case 46:
+            return 3;
+         default:
+            return 4;
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchStringHashcodeCollision.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,14 +3,14 @@
 public class TestSwitchStringHashcodeCollision {
    public int test(String s) {
       switch(s) {
-      case "BB":
-         return 1;
-      case "Aa":
-      case "FRED":
-         return 2;
-      default:
-         System.out.println("Test");
-         return 0;
+         case "BB":
+            return 1;
+         case "Aa":
+         case "FRED":
+            return 2;
+         default:
+            System.out.println("Test");
+            return 0;
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchTernary.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,42 +3,39 @@
 public class TestSwitchTernary {
    public void test(int i, int j, boolean b) {
       switch(b ? i : j) {
-      case 1:
-         System.out.println("a");
-         break;
-      case 2:
-         System.out.println("4");
-      default:
-         System.out.println("no");
+         case 1:
+            System.out.println("a");
+            break;
+         case 2:
+            System.out.println("4");
+         default:
+            System.out.println("no");
       }
-
    }
 
    public void testString(String i, String j, boolean b) {
       String var4 = b ? i : j;
       switch(var4) {
-      case "v":
-         System.out.println("a");
-         break;
-      case "a":
-         System.out.println("4");
-      default:
-         System.out.println("no");
+         case "v":
+            System.out.println("a");
+            break;
+         case "a":
+            System.out.println("4");
+         default:
+            System.out.println("no");
       }
-
    }
 
    public void testEnum(TestSwitchTernary.TestEnum i, TestSwitchTernary.TestEnum j, boolean b) {
       switch(b ? i : j) {
-      case B:
-         System.out.println("a");
-         break;
-      case A:
-         System.out.println("4");
-      default:
-         System.out.println("no");
+         case B:
+            System.out.println("a");
+            break;
+         case A:
+            System.out.println("4");
+         default:
+            System.out.println("no");
       }
-
    }
 
    public static enum TestEnum {
gen_diffs.py pkg/TestSynchronized.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -25,7 +25,7 @@
 
    public void test4() {
       Integer o;
-      synchronized(1) {
+      synchronized(Integer.valueOf(1)) {
          o = 1;
          System.out.println(o);
       }
@@ -44,7 +44,7 @@
 
    public void test4_2() {
       Double o;
-      synchronized(1.0) {
+      synchronized(Double.valueOf(1.0)) {
          o = 1.0;
          System.out.println(o);
       }
@@ -54,7 +54,7 @@
 
    public void test4_3() {
       Float o;
-      synchronized(1.0F) {
+      synchronized(Float.valueOf(1.0F)) {
          o = 1.0F;
          System.out.println(o);
       }
@@ -64,7 +64,7 @@
 
    public void test4_4() {
       Boolean o;
-      synchronized(true) {
+      synchronized(Boolean.valueOf(true)) {
          o = true;
          System.out.println(o);
       }
@@ -74,7 +74,7 @@
 
    public void test4_5() {
       Long o;
-      synchronized(1L) {
+      synchronized(Long.valueOf(1L)) {
          o = 1L;
          System.out.println(o);
       }
@@ -84,24 +84,23 @@
 
    public void test11(int i) {
       switch(i) {
-      case 0:
-         synchronized(this) {
-            break;
-         }
-      case 1:
-         synchronized(this) {
-            System.out.println(1);
-            break;
-         }
-      case 2:
-         System.out.println(2);
-         synchronized(this) {
-            break;
-         }
-      default:
-         System.out.println(0);
+         case 0:
+            synchronized(this) {
+               break;
+            }
+         case 1:
+            synchronized(this) {
+               System.out.println(1);
+               break;
+            }
+         case 2:
+            System.out.println(2);
+            synchronized(this) {
+               break;
+            }
+         default:
+            System.out.println(0);
       }
-
    }
 
    public void test13() {
gen_diffs.py pkg/TestSynchronizedLoop.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -30,16 +30,14 @@
    public void test7(int i) {
       synchronized(this) {
          while(i > 0) {
-            --i;
-            System.out.println(i);
+            System.out.println(--i);
          }
-
       }
    }
 
    public void test12(int i) {
       synchronized(this) {
-         label94: {
+         label79: {
             System.out.println(1);
 
             while(i > 0) {
@@ -51,9 +49,8 @@
                } finally {
                   System.out.println(1.7);
                   if (i > 5) {
-                     break label94;
+                     break label79;
                   }
-
                }
             }
 
@@ -67,65 +64,27 @@
       if (i > 2) {
          System.out.println("Hello!");
       }
-
    }
 
    public void testLoop(double var1) {
       if (var1 >= 88.29) {
-         synchronized(this){}
-
-         try {
+         synchronized(this) {
             while(true) {
                long var12 = 399L;
                var1 /= 97.81;
             }
-         } finally {
-            ;
          }
       }
    }
 
    public void testFlatten() {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1
-      //   at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100)
-      //   at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106)
-      //   at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302)
-      //   at java.base/java.util.Objects.checkIndex(Objects.java:385)
-      //   at java.base/java.util.ArrayList.get(ArrayList.java:427)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.sforms.FlattenStatementsHelper.flattenStatement(FlattenStatementsHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.sforms.FlattenStatementsHelper.buildDirectGraph(FlattenStatementsHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.sforms.SSAConstructorSparseEx.splitVariables(SSAConstructorSparseEx.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.StackVarsProcessor.simplifyStackVars(StackVarsProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: ldc2_w -151
-      // 03: lstore 1
-      // 04: ldc2_w -384
-      // 07: lstore 3
-      // 08: lload 1
-      // 09: ldc2_w 5
-      // 0c: lcmp
-      // 0d: ifne 2c
-      // 10: aload 0
-      // 11: dup
-      // 12: astore 5
-      // 14: monitorenter
-      // 15: lload 3
-      // 16: ldc2_w -714
-      // 19: lsub
-      // 1a: lstore 3
-      // 1b: aload 5
-      // 1d: monitorexit
-      // 1e: goto 29
-      // 21: astore 6
-      // 23: aload 5
-      // 25: monitorexit
-      // 26: aload 6
-      // 28: athrow
-      // 29: goto 08
-      // 2c: return
+      long var2 = -151L;
+      long var3 = -384L;
+
+      while(var2 == 5L) {
+         synchronized(this) {
+            var3 -= -714L;
+         }
+      }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSynchronizedThrow.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,24 +2,16 @@
 
 public class TestSynchronizedThrow {
    public void test() {
-      synchronized(this){}
-
-      try {
+      synchronized(this) {
          throw new RuntimeException();
-      } finally {
-         ;
       }
    }
 
    public void test1() {
       System.out.println("Hi");
-      synchronized(this){}
-
-      try {
+      synchronized(this) {
          System.out.println("Hello");
          throw new RuntimeException();
-      } finally {
-         ;
       }
    }
 
@@ -46,23 +38,17 @@
    }
 
    public void testLoopThrow(boolean b) {
-      synchronized(this){}
-
-      try {
+      synchronized(this) {
          while(b) {
             System.out.println("oh");
          }
 
          throw new RuntimeException();
-      } finally {
-         ;
       }
    }
 
    public void testInfiniteLoopOrThrow(boolean b) {
-      synchronized(this){}
-
-      try {
+      synchronized(this) {
          if (b) {
             while(true) {
                System.out.println("looooooooooop");
@@ -70,8 +56,6 @@
          }
 
          throw new RuntimeException();
-      } finally {
-         ;
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSynchronizedTry.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -11,7 +11,6 @@
             this.notifyAll();
          }
       }
-
    }
 
    public void test2(int i) {
@@ -36,7 +35,6 @@
       if (i > 2) {
          System.out.println("Hello!");
       }
-
    }
 
    public void test3(int i) {
@@ -61,24 +59,25 @@
       if (i > 2) {
          System.out.println("Hello!");
       }
-
    }
 
    public void testLabel() {
       String var1 = "Hi!";
       Object var8 = null;
       synchronized(this) {
-         String var9 = "Hi!";
+         label36: {
+            String var9 = "Hi!";
 
-         try {
-            if (var1 == null) {
-               return;
+            try {
+               if (var1 == null) {
+                  return;
+               }
+            } catch (Exception var7) {
+               break label36;
             }
-         } catch (Exception var7) {
-            break label6;
+
+            return;
          }
-
-         return;
       }
 
       System.out.println(var8);
gen_diffs.py pkg/TestSynchronizedTrySharing.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -12,12 +12,11 @@
       InputStream is = null;
 
       try {
-         new FileInputStream(name);
+         is = new FileInputStream(name);
          name = name.substring(50);
       } catch (Exception var4) {
          is.close();
       }
-
    }
 
    public void test2(String name) throws Exception {
@@ -28,7 +27,7 @@
       InputStream is = null;
 
       try {
-         new FileInputStream(name);
+         is = new FileInputStream(name);
          synchronized(name) {
             System.out.println(name);
             name = name.substring(50);
@@ -36,6 +35,5 @@
       } catch (Exception var6) {
          is.close();
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSynchronizedUnprotected.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -11,7 +11,7 @@
    d2 = {"Lpkg/TestSynchronizedUnprotected;", "", "()V", "test", "", "quiltflower_testDataKotlin"}
 )
 public final class TestSynchronizedUnprotected {
-   // $FF: Extended synchronized range to monitorexit
+   // $QF: Extended synchronized range to monitorexit
    public final void test() {
       synchronized(this) {
          int $i$a$-synchronized-TestSynchronizedUnprotected$test$1 = 0;
gen_diffs.py pkg/TestSynchronizeNull.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,24 +1,30 @@
 package pkg;
 
 public class TestSynchronizeNull {
+   // $QF: Added assignment to ensure synchronized validity
    public void test() {
       new Object();
       Object var2 = null;
-      synchronized(null) {
+      Object var5;
+      synchronized(var5 = null) {
          System.out.println("Hi");
       }
    }
 
+   // $QF: Added assignment to ensure synchronized validity
    public void test1() {
       Object var2 = null;
-      synchronized(null) {
+      Object var5;
+      synchronized(var5 = null) {
          System.out.println("Hi");
       }
    }
 
+   // $QF: Added assignment to ensure synchronized validity
    public void test2() {
       Object var2 = null;
-      synchronized(null) {
+      Object var6;
+      synchronized(var6 = null) {
          Object var5 = null;
          System.out.println("Hi");
       }
gen_diffs.py pkg/TestTernaryCall.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,38 +1,13 @@
 package pkg;
-
-import java.io.PrintStream;
 
 public class TestTernaryCall {
    public void test(boolean a, boolean b, boolean c) {
-      PrintStream var10000;
-      boolean var10001;
-      label25: {
-         label27: {
-            var10000 = System.out;
-            if (b ? !c : !a) {
-               if (c) {
-                  if (a) {
-                     break label27;
-                  }
-               } else if (b) {
-                  break label27;
-               }
-
-               var10001 = false;
-            }
-            break label25;
-         }
-
-         var10001 = true;
-      }
-
-      var10000.println(var10001);
+      System.out.println((b ? c : a) || (c ? a : b));
    }
 
    public void test2(boolean a, boolean b, boolean c) {
       if (b ? c : a) {
          System.out.println(c);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTernaryReturn.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -9,18 +9,7 @@
          return false;
       } else {
          TestTernaryReturn p = (TestTernaryReturn)o;
-         label26:
-         if (this.a == null ? p.a == null : this.a.equals(p.a)) {
-            if (this.b == null) {
-               if (p.b == null) {
-                  return true;
-               }
-            } else if (this.b.equals(p.b)) {
-               return true;
-            }
-         }
-
-         return false;
+         return (this.a == null ? p.a == null : this.a.equals(p.a)) && (this.b == null ? p.b == null : this.b.equals(p.b));
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTernaryReturn2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,45 +1,8 @@
 package pkg;
 
 public class TestTernaryReturn2 {
-   public TestTernaryReturn2.T test(TestTernaryReturn2.T param1) {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.RuntimeException: Inconsistent idom sequence discovered!
-      //  at org.jetbrains.java.decompiler.modules.decompiler.decompose.GenericDominatorEngine.isDominator(GenericDominatorEngine.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionsGraph.isDominatorSet(VarVersionsGraph.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.StackVarsProcessor.isVersionToBeReplaced(StackVarsProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.StackVarsProcessor.iterateExprent(StackVarsProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.StackVarsProcessor.iterateStatements(StackVarsProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.StackVarsProcessor.simplifyStackVars(StackVarsProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: new pkg/TestTernaryReturn2$T
-      // 03: dup
-      // 04: aload 0
-      // 05: aload 1
-      // 06: invokevirtual java/lang/Object.toString ()Ljava/lang/String;
-      // 09: invokestatic pkg/TestTernaryReturn2.get (Ljava/lang/Object;)Ljava/lang/String;
-      // 0c: bipush 1
-      // 0d: anewarray 2
-      // 10: dup
-      // 11: bipush 0
-      // 12: new pkg/TestTernaryReturn2$T
-      // 15: dup
-      // 16: aload 0
-      // 17: aload 1
-      // 18: invokestatic pkg/TestTernaryReturn2.b (Lpkg/TestTernaryReturn2$T;)Z
-      // 1b: ifeq 25
-      // 1e: aload 1
-      // 1f: invokevirtual pkg/TestTernaryReturn2$T.test ()Ljava/lang/String;
-      // 22: goto 27
-      // 25: ldc "1"
-      // 27: invokedynamic makeConcatWithConstants (Ljava/lang/String;)Ljava/lang/String; bsm=java/lang/invoke/StringConcatFactory.makeConcatWithConstants (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; args=[ "test\u0001" ]
-      // 2c: invokespecial pkg/TestTernaryReturn2$T.<init> (Lpkg/TestTernaryReturn2;Ljava/lang/String;)V
-      // 2f: invokevirtual pkg/TestTernaryReturn2$T.test ()Ljava/lang/String;
-      // 32: aastore
-      // 33: invokespecial pkg/TestTernaryReturn2$T.<init> (Lpkg/TestTernaryReturn2;Ljava/lang/String;[Ljava/lang/Object;)V
-      // 36: areturn
+   public TestTernaryReturn2.T test(TestTernaryReturn2.T in) {
+      return new TestTernaryReturn2.T(get(in.toString()), new TestTernaryReturn2.T("test" + (b(in) ? in.test() : "1")).test());
    }
 
    private static boolean b(TestTernaryReturn2.T in) {
gen_diffs.py pkg/TestThrowLoop.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -17,6 +17,5 @@
             throw new IllegalArgumentException();
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryCatchFinally.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -12,7 +12,6 @@
       } finally {
          System.out.println("finally");
       }
-
    }
 
    int foo(int a) throws Exception {
gen_diffs.py pkg/TestTryCatchNested.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -11,6 +11,5 @@
       } catch (Exception var4) {
          System.out.println(var1);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryFinally.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,21 +1,11 @@
 package pkg;
 
 public class TestTryFinally {
-   // $FF: Could not verify finally blocks. A semaphore variable has been added to preserve control flow.
-   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    public void test0() {
-      boolean var7 = false;
-
       try {
-         var7 = true;
          System.out.println("Hello");
-         var7 = false;
       } finally {
-         if (var7) {
-            long var4 = 5L;
-         }
+         long var4 = 5L;
       }
-
-      long var1 = 5L;
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryLoop.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -12,17 +12,12 @@
    private boolean field;
 
    public void test(File file) {
-      while(true) {
-         try {
-            if (this.field) {
-               new Scanner(file);
-               continue;
-            }
-         } catch (FileNotFoundException var3) {
-            var3.printStackTrace();
+      try {
+         while(this.field) {
+            new Scanner(file);
          }
-
-         return;
+      } catch (FileNotFoundException var3) {
+         var3.printStackTrace();
       }
    }
 
gen_diffs.py pkg/TestTryLoopNoCatch.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -8,6 +8,7 @@
          try {
             b = this.method(s[i]);
             break;
+         } catch (Exception var5) {
          }
       }
 
gen_diffs.py pkg/TestTryLoopReturnFinally.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -8,25 +8,18 @@
    private boolean field;
 
    public void test(File file) {
-      while(true) {
-         try {
-            if (!this.field) {
-               break;
+      try {
+         while(this.field) {
+            if (file == null) {
+               return;
             }
 
-            if (file != null) {
-               new Scanner(file);
-               continue;
-            }
-         } catch (FileNotFoundException var6) {
-            var6.printStackTrace();
-            break;
-         } finally {
-            System.out.println("Finally");
+            new Scanner(file);
          }
-
-         return;
+      } catch (FileNotFoundException var6) {
+         var6.printStackTrace();
+      } finally {
+         System.out.println("Finally");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryLoopSimpleFinally.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -10,41 +10,30 @@
    private boolean field;
 
    public void test(File file) {
-      while(true) {
-         try {
-            if (this.field) {
-               new Scanner(file);
-               continue;
-            }
-         } catch (FileNotFoundException var6) {
-            var6.printStackTrace();
-         } finally {
-            System.out.println("Finally");
+      try {
+         while(this.field) {
+            new Scanner(file);
          }
-
-         return;
+      } catch (FileNotFoundException var6) {
+         var6.printStackTrace();
+      } finally {
+         System.out.println("Finally");
       }
    }
 
    public void test2(int x, Path file) throws IOException {
-      while(true) {
-         try {
-            if (x < 0) {
-               return;
-            }
-
+      try {
+         while(x >= 0) {
             Scanner scanner = new Scanner(file);
             if (x % 11 != 0) {
                x -= scanner.nextInt();
-               continue;
+            } else {
+               System.out.println("nice");
+               return;
             }
-
-            System.out.println("nice");
-         } finally {
-            System.out.println("Finally");
          }
-
-         return;
+      } finally {
+         System.out.println("Finally");
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryReturn.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,5 +1,6 @@
 package pkg;
 
+import java.util.Random;
 import java.util.function.Supplier;
 
 public class TestTryReturn {
@@ -25,10 +26,10 @@
    public void testFinally1(Supplier<Boolean> supplier) {
       System.out.println("pred");
 
-      label32: {
+      label27: {
          try {
             if (!supplier.get()) {
-               break label32;
+               break label27;
             }
          } finally {
             System.out.println("Finally");
@@ -54,15 +55,15 @@
    public boolean testFinally3(boolean b, boolean c, int a, Supplier<Boolean> supplier) {
       boolean var5;
       try {
-         if (!b) {
-            if (a > 0) {
-               return a == 1;
-            }
-
+         if (b) {
+            return c && supplier.get();
+         }
+
+         if (a <= 0) {
             return supplier.get();
          }
 
-         var5 = c && supplier.get();
+         var5 = a == 1;
       } finally {
          System.out.println("Finally");
       }
@@ -132,11 +133,11 @@
    }
 
    public void testParsingFailure() {
-      // $FF: Couldn't be decompiled
+      // $QF: Couldn't be decompiled
       // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
       // java.lang.RuntimeException: parsing failure!
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.parseGraph(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java)
+      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java)
       //
       // Bytecode:
       // 00: bipush 116
@@ -173,90 +174,35 @@
    }
 
    public void testPostdomFailure() {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot invoke "org.jetbrains.java.decompiler.util.FastFixedSetFactory$FastFixedSet.contains(Object)" because "predset" is null
-      //   at org.jetbrains.java.decompiler.modules.decompiler.decompose.FastExtendedPostdominanceHelper.lambda$removeErroneousNodes$0(FastExtendedPostdominanceHelper.java:168)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.decompose.FastExtendedPostdominanceHelper.iterateReachability(FastExtendedPostdominanceHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.decompose.FastExtendedPostdominanceHelper.removeErroneousNodes(FastExtendedPostdominanceHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.decompose.FastExtendedPostdominanceHelper.getExtendedPostdominators(FastExtendedPostdominanceHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.findGeneralStatement(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.processStatement(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.processStatement(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.parseGraph(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 03: bipush 1
-      // 04: invokevirtual java/io/PrintStream.println (I)V
-      // 07: new java/util/Random
-      // 0a: dup
-      // 0b: invokespecial java/util/Random.<init> ()V
-      // 0e: invokevirtual java/util/Random.nextBoolean ()Z
-      // 11: ifeq 41
-      // 14: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 17: bipush 2
-      // 18: invokevirtual java/io/PrintStream.println (I)V
-      // 1b: bipush 28
-      // 1d: istore 2
-      // 1e: goto 07
-      // 21: astore 2
-      // 22: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 25: bipush 3
-      // 26: invokevirtual java/io/PrintStream.println (I)V
-      // 29: bipush 28
-      // 2b: istore 3
-      // 2c: goto 07
-      // 2f: astore 4
-      // 31: bipush 28
-      // 33: istore 5
-      // 35: goto 07
-      // 38: astore 6
-      // 3a: bipush 28
-      // 3c: istore 7
-      // 3e: aload 6
-      // 40: athrow
-      // 41: return
-   }
-
-   // $FF: Could not verify finally blocks. A semaphore variable has been added to preserve control flow.
-   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
+      System.out.println(1);
+
+      while(new Random().nextBoolean()) {
+         try {
+            try {
+               System.out.println(2);
+            } catch (Exception var14) {
+               System.out.println(3);
+            } finally {
+               continue;
+            }
+         } finally {
+            boolean var7 = true;
+         }
+      }
+   }
+
    public void testVarWrong() {
-      boolean var8 = false;
-
-      label49: {
-         label48: {
-            try {
-               try {
-                  var8 = true;
-                  System.out.println("Hi");
-                  var8 = false;
-                  break label49;
-               } catch (Exception var9) {
-                  if (var9 != null) {
-                     var8 = false;
-                     break label48;
-                  }
-               }
-
-               System.out.println(var9);
-               var8 = false;
-            } finally {
-               if (var8) {
-                  float var5 = 9.18F;
-               }
-            }
-
-            float var3 = 9.18F;
+      try {
+         System.out.println("Hi");
+         return;
+      } catch (Exception var8) {
+         if (var8 == null) {
+            System.out.println(var8);
             return;
          }
-
-         float var11 = 9.18F;
-         return;
-      }
-
-      float var2 = 9.18F;
+      } finally {
+         float var5 = 9.18F;
+      }
    }
 
    public void testInvalidUse() {
@@ -282,6 +228,5 @@
       } finally {
          System.out.println(var3);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryReturnNoDebug.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -16,16 +16,16 @@
    }
 
    public String test2(Supplier<Boolean> var1) {
-      Object var2 = null;
+      String var2 = null;
 
       try {
-         var5 = var1.toString();
-         System.out.println("Try: " + var5);
+         var2 = var1.toString();
+         System.out.println("Try: " + var2);
       } catch (Exception var4) {
          throw new RuntimeException("Catch: " + var2);
       }
 
-      return this.process(var5);
+      return this.process(var2);
    }
 
    private String process(String var1) {
gen_diffs.py pkg/TestTrySynchronized.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -14,11 +14,10 @@
       InputStream stream = null;
 
       try {
-         new FileInputStream("nul");
+         stream = new FileInputStream("nul");
       } catch (Throwable var2) {
          stream.close();
       }
-
    }
 
    public static void case02() throws Exception {
@@ -36,7 +35,6 @@
       } catch (Throwable var4) {
          stream.close();
       }
-
    }
 
    private static InputStream getInputStream() {
gen_diffs.py pkg/TestTryVar.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,7 +4,7 @@
    public int test(int x, int y) {
       for(int i = 0; i < 10; ++i) {
          try {
-            int var10000 = y + i;
+            x = y + i;
             x = 5000 - i;
             x = y / y;
          } catch (Throwable var5) {
@@ -18,7 +18,7 @@
       for(int i = 0; i < 10; ++i) {
          try {
             x = y + i;
-            x = (x + (5000 - i / (7 - i))) / y;
+            x = (x += 5000 - i / (7 - i)) / y;
          } catch (Throwable var5) {
          }
       }
gen_diffs.py pkg/TestTryVarNoDebug.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,7 +4,7 @@
    public int test(int var1, int var2) {
       for(int var3 = 0; var3 < 10; ++var3) {
          try {
-            int var10000 = var2 + var3;
+            var1 = var2 + var3;
             var1 = 5000 - var3;
             var1 = var2 / var2;
          } catch (Throwable var5) {
@@ -18,7 +18,7 @@
       for(int var3 = 0; var3 < 10; ++var3) {
          try {
             var1 = var2 + var3;
-            var1 = (var1 + (5000 - var3 / (7 - var3))) / var2;
+            var1 = (var1 += 5000 - var3 / (7 - var3)) / var2;
          } catch (Throwable var5) {
          }
       }
gen_diffs.py pkg/TestTryWithResources.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -13,7 +13,6 @@
          fileSystem.getPath("PATH", "TO", "FILE");
       } catch (IOException | URISyntaxException var13) {
       }
-
    }
 
    public static void test2() {
@@ -24,7 +23,6 @@
          stream.read();
       } catch (IOException | URISyntaxException var32) {
       }
-
    }
 
    public static void test3() {
@@ -36,6 +34,5 @@
          }
       } catch (IOException | URISyntaxException var38) {
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesAfterSwitch.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -11,16 +11,15 @@
       } else {
          String vvv25 = "default";
          switch(vvv25) {
-         case "HYxSY":
-         default:
-            ElementType vvv25 = ElementType.METHOD;
+            case "HYxSY":
+            default:
+               ElementType vvv25x = ElementType.METHOD;
 
-            try (Scanner vvv26 = new Scanner(System.in)) {
-               System.out.println("hi");
-            } finally {
-               System.out.println("f");
-            }
-
+               try (Scanner vvv26 = new Scanner(System.in)) {
+                  System.out.println("hi");
+               } finally {
+                  System.out.println("f");
+               }
          }
       }
    }
@@ -32,14 +31,13 @@
       } else {
          String vvv26 = "default";
          switch(vvv26) {
-         case "HYxSY":
-         default:
-            try (Scanner vvv26 = new Scanner(System.in)) {
-               System.out.println("hi");
-            } finally {
-               System.out.println("f");
-            }
-
+            case "HYxSY":
+            default:
+               try (Scanner vvv26x = new Scanner(System.in)) {
+                  System.out.println("hi");
+               } finally {
+                  System.out.println("f");
+               }
          }
       }
    }
gen_diffs.py pkg/TestTryWithResourcesCatchFinallyJ16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -13,7 +13,6 @@
       } finally {
          System.out.println("Hello");
       }
-
    }
 
    public void testFunc(File file) {
@@ -24,7 +23,6 @@
       } finally {
          System.out.println("Hello");
       }
-
    }
 
    private Scanner create(File file) throws FileNotFoundException {
gen_diffs.py pkg/TestTryWithResourcesCatchJ16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -11,7 +11,6 @@
       } catch (FileNotFoundException var7) {
          var7.printStackTrace();
       }
-
    }
 
    public void testFunc(File file) {
@@ -20,7 +19,6 @@
       } catch (FileNotFoundException var7) {
          var7.printStackTrace();
       }
-
    }
 
    public int test1(File file) {
gen_diffs.py pkg/TestTryWithResourcesFakeTrigger.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,83 +2,71 @@
 
 import java.io.File;
 import java.io.FileNotFoundException;
+import java.util.NoSuchElementException;
 import java.util.Scanner;
 
 public class TestTryWithResourcesFakeTrigger {
    public void testTrigger1() {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
-      //   at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100)
-      //   at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106)
-      //   at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302)
-      //   at java.base/java.util.Objects.checkIndex(Objects.java:385)
-      //   at java.base/java.util.ArrayList.get(ArrayList.java:427)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryWithResourcesProcessor.makeTryWithResourceJ11(TryWithResourcesProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.makeTryWithResourceRec(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.makeTryWithResourceRec(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.makeTryWithResourceRec(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.enhanceTryStats(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: ldc "Hi!"
-      // 02: astore 2
-      // 03: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 06: ldc "Hi"
-      // 08: invokevirtual java/io/PrintStream.println (Ljava/lang/String;)V
-      // 0b: goto 0f
-      // 0e: astore 3
-      // 0f: return
-      // 10: astore 3
-      // 11: aload 2
-      // 12: astore 1
-      // 13: goto 18
-      // 16: astore 4
-      // 18: return
+      String b = "Hi!";
+
+      try {
+         try {
+            System.out.println("Hi");
+         } catch (Exception var6) {
+         }
+      } catch (Exception var7) {
+         try {
+            ;
+         } catch (Exception var5) {
+         }
+      }
    }
 
    public void testTrigger2() {
-      // $FF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot read field "type" because "inner" is null
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryWithResourcesProcessor.makeTryWithResourceJ11(TryWithResourcesProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.makeTryWithResourceRec(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.makeTryWithResourceRec(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.makeTryWithResourceRec(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.makeTryWithResourceRec(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.enhanceTryStats(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: aconst_null
-      // 01: astore 1
-      // 02: aload 1
-      // 03: ifnonnull 23
-      // 06: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 09: ldc "Hi"
-      // 0b: invokevirtual java/io/PrintStream.println (Ljava/lang/String;)V
-      // 0e: goto 02
-      // 11: astore 2
-      // 12: aload 1
-      // 13: ifnull 19
-      // 16: goto 23
-      // 19: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 1c: aload 1
-      // 1d: invokevirtual java/io/PrintStream.println (Ljava/lang/Object;)V
-      // 20: goto 02
-      // 23: return
+      Object var1 = null;
+
+      while(var1 == null) {
+         try {
+            System.out.println("Hi");
+         } catch (Exception var3) {
+            if (var1 != null) {
+               break;
+            }
+
+            System.out.println(var1);
+         }
+      }
    }
 
    public void testTrigger3(File file) throws FileNotFoundException {
-      try (Scanner scanner = new Scanner(file)) {
+      Scanner scanner = new Scanner(file);
+
+      try {
          scanner.next();
+      } catch (NoSuchElementException var6) {
+         try {
+            scanner.close();
+         } catch (IllegalStateException var5) {
+            var6.addSuppressed(var5);
+         }
+
+         throw var6;
       }
    }
 
    public void testTrigger4(File file) throws FileNotFoundException {
-      try (Scanner scanner = new Scanner(file)) {
+      Scanner scanner = new Scanner(file);
+
+      try {
          scanner.next();
+      } catch (Throwable var6) {
+         try {
+            scanner.close();
+         } catch (Throwable var5) {
+            var6.addSuppressed(var5);
+         }
+
+         throw var6;
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesFinallyJ16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -11,7 +11,6 @@
       } finally {
          System.out.println("Hello");
       }
-
    }
 
    public void testFunc(File file) throws FileNotFoundException {
@@ -20,7 +19,6 @@
       } finally {
          System.out.println("Hello");
       }
-
    }
 
    private Scanner create(File file) throws FileNotFoundException {
gen_diffs.py pkg/TestTryWithResourcesJ16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -9,14 +9,12 @@
       try (Scanner scanner = new Scanner(file)) {
          scanner.next();
       }
-
    }
 
    public void testFunc(File file) throws FileNotFoundException {
       try (Scanner scanner = this.create(file)) {
          scanner.next();
       }
-
    }
 
    private Scanner create(File file) throws FileNotFoundException {
gen_diffs.py pkg/TestTryWithResourcesLoopJ16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -28,7 +28,6 @@
             break;
          }
       }
-
    }
 
    public void test2(File f) throws FileNotFoundException {
@@ -44,7 +43,6 @@
             s.next();
          }
       }
-
    }
 
    public void test3(File f) throws FileNotFoundException {
@@ -65,7 +63,6 @@
 
          return;
       }
-
    }
 
    public void test4(File f) throws FileNotFoundException {
@@ -79,7 +76,6 @@
             }
          }
       }
-
    }
 
    private Scanner create(File file) throws FileNotFoundException {
gen_diffs.py pkg/TestTryWithResourcesManyJ16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -19,6 +19,5 @@
          System.out.println(s4.nextLine());
          System.out.println(s5.nextLine());
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesManyJ9.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -61,10 +61,9 @@
       } finally {
          $closeResource(var3, s1);
       }
-
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static void $closeResource(Throwable x0, AutoCloseable x1) {
       if (x0 != null) {
          try {
@@ -75,6 +74,5 @@
       } else {
          x1.close();
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesMultiJ16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -14,6 +14,5 @@
          scanner.next();
          writer.write("hello");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesNestedJ16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -14,7 +14,6 @@
       ) {
          scanner.next();
       }
-
    }
 
    public void testNestedFinally(File file) throws IOException {
@@ -35,6 +34,5 @@
       } finally {
          System.out.println(1);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesNestedLoop.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -20,8 +20,8 @@
 
                for(int q = top * p; q < bottom * p; ++q) {
                   for(int r = left * p; r < right * p; ++r) {
-                     lv2.read(new byte[0], r, q);
-                     lv.read(new byte[0], r, q);
+                     int s = lv2.read(new byte[0], r, q);
+                     int t = lv.read(new byte[0], r, q);
                      lv3.read(new byte[0], r, q);
                   }
                }
gen_diffs.py pkg/TestTryWithResourcesNullJ16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -9,7 +9,6 @@
       try (Scanner scanner = null) {
          scanner.next();
       }
-
    }
 
    public void testNested(File file) {
@@ -20,7 +19,6 @@
             scanner2.next();
          }
       }
-
    }
 
    public void testMulti(File file) {
@@ -31,6 +29,5 @@
          scanner.next();
          scanner2.next();
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesOuterJ16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -28,7 +28,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testFunc(File file) throws FileNotFoundException {
@@ -52,7 +51,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testMulti(File file) throws IOException {
@@ -96,7 +94,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testNested1(File file) throws IOException {
@@ -140,7 +137,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testNested2(File file) throws IOException {
@@ -184,7 +180,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testSame1(File file) throws FileNotFoundException {
@@ -227,7 +222,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testSame2(File file) throws FileNotFoundException {
@@ -269,7 +263,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testSame3(File file) throws FileNotFoundException {
@@ -313,7 +306,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testSame4(File file) throws FileNotFoundException {
@@ -338,7 +330,6 @@
             scanner.close();
          }
       }
-
    }
 
    private Scanner create(File file) throws FileNotFoundException {
gen_diffs.py pkg/TestTryWithResourcesReturnJ16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -36,11 +36,11 @@
    }
 
    public Scanner testFinallyNested(File param1) {
-      // $FF: Couldn't be decompiled
+      // $QF: Couldn't be decompiled
       // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
       // java.lang.RuntimeException: parsing failure!
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.parseGraph(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java)
+      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java)
       //
       // Bytecode:
       // 00: new java/util/Scanner
gen_diffs.py pkg/TestTryWithResourcesSwitchJ16.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -8,31 +8,30 @@
    public void test(File f) throws FileNotFoundException {
       try (Scanner s = this.create(f)) {
          switch(s.nextInt()) {
-         case 1:
-            System.out.println("1");
-            break;
-         case 2:
-            System.out.println("2");
-            break;
-         default:
-            System.out.println("default");
-         }
-      }
-
-   }
-
-   public void test1(File f) throws FileNotFoundException {
-      try (Scanner s = this.create(f)) {
-         label56: {
-            switch(s.nextInt()) {
             case 1:
                System.out.println("1");
                break;
             case 2:
                System.out.println("2");
-               break label56;
+               break;
             default:
                System.out.println("default");
+         }
+      }
+   }
+
+   public void test1(File f) throws FileNotFoundException {
+      try (Scanner s = this.create(f)) {
+         label54: {
+            switch(s.nextInt()) {
+               case 1:
+                  System.out.println("1");
+                  break;
+               case 2:
+                  System.out.println("2");
+                  break label54;
+               default:
+                  System.out.println("default");
             }
 
             System.out.println("after switch");
@@ -43,24 +42,23 @@
       if (f.exists()) {
          System.out.println("exists");
       }
-
    }
 
    public int test2(File f) throws FileNotFoundException {
       try (Scanner s = this.create(f)) {
-         label69: {
+         label66: {
             switch(s.nextInt()) {
-            case 1:
-               System.out.println("1");
-               break;
-            case 2:
-               System.out.println("2");
-               break label69;
-            case 3:
-               System.out.println("3");
-               return 1;
-            default:
-               System.out.println("default");
+               case 1:
+                  System.out.println("1");
+                  break;
+               case 2:
+                  System.out.println("2");
+                  break label66;
+               case 3:
+                  System.out.println("3");
+                  return 1;
+               default:
+                  System.out.println("default");
             }
 
             System.out.println("after switch");
gen_diffs.py pkg/TestUnionType.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -8,29 +8,29 @@
       return (c1, c2) -> 1;
    }
 
-   // $FF: synthetic method
+   // $QF: synthetic method
    private static Object $deserializeLambda$(SerializedLambda lambda) {
       String var1 = lambda.getImplMethodName();
       byte var2 = -1;
       switch(var1.hashCode()) {
-      case 1574270966:
-         if (var1.equals("lambda$comparingInt$ff46620a$1")) {
-            var2 = 0;
-         }
-      default:
-         switch(var2) {
-         case 0:
-            if (lambda.getImplMethodKind() == 6
-               && lambda.getFunctionalInterfaceClass().equals("java/util/Comparator")
-               && lambda.getFunctionalInterfaceMethodName().equals("compare")
-               && lambda.getFunctionalInterfaceMethodSignature().equals("(Ljava/lang/Object;Ljava/lang/Object;)I")
-               && lambda.getImplClass().equals("pkg/TestUnionType")
-               && lambda.getImplMethodSignature().equals("(Ljava/lang/Object;Ljava/lang/Object;)I")) {
-               return (Comparator<Object>)(c1, c2) -> 1;
+         case 1574270966:
+            if (var1.equals("lambda$comparingInt$ff46620a$1")) {
+               var2 = 0;
             }
          default:
-            throw new IllegalArgumentException("Invalid lambda deserialization");
-         }
+            switch(var2) {
+               case 0:
+                  if (lambda.getImplMethodKind() == 6
+                     && lambda.getFunctionalInterfaceClass().equals("java/util/Comparator")
+                     && lambda.getFunctionalInterfaceMethodName().equals("compare")
+                     && lambda.getFunctionalInterfaceMethodSignature().equals("(Ljava/lang/Object;Ljava/lang/Object;)I")
+                     && lambda.getImplClass().equals("pkg/TestUnionType")
+                     && lambda.getImplMethodSignature().equals("(Ljava/lang/Object;Ljava/lang/Object;)I")) {
+                     return (Comparator<Object>)(c1, c2) -> 1;
+                  }
+               default:
+                  throw new IllegalArgumentException("Invalid lambda deserialization");
+            }
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestUnionTypeAssign.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,7 +4,7 @@
 
 public interface TestUnionTypeAssign {
    default <E extends Enum<E> & TestUnionTypeAssign> void test(Supplier<E[]> supplier) {
-      E[] array = (E[])((Enum[])supplier.get());
+      E[] array = (E[])supplier.get();
    }
 
    default <E extends Enum<E> & TestUnionTypeAssign> void test1(Supplier<E[]> supplier) {
@@ -20,10 +20,10 @@
    }
 
    default <E extends Enum<E> & TestUnionTypeAssign> void test4(Supplier<Enum[]> supplier) {
-      E[] array = (E[])supplier.get();
+      E[] array = (Enum[])supplier.get();
    }
 
    default <E extends Enum<E> & TestUnionTypeAssign> void test5(Supplier<TestUnionTypeAssign[]> supplier) {
-      E[] array = (E[])supplier.get();
+      E[] array = (Enum[])supplier.get();
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestUnknownCast.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -15,11 +15,10 @@
          ;
       }
 
-      boolean var8 = vvv2;
+      vvv1 = vvv2;
 
-      for(Object vvv34 = null; vvv34 != null; var8 = var8) {
+      for(Object vvv34 = null; vvv34 != null; vvv1 = vvv1) {
          System.out.println(vvv34);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestUnknownCastJ17.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -1,47 +1,21 @@
 package pkg;
 
 import java.lang.annotation.ElementType;
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
-import java.util.Scanner;
 
 public class TestUnknownCastJ17 {
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    public void test() {
       ElementType vvv1 = ElementType.METHOD;
       synchronized(this) {
-         label110: {
+         label92: {
             System.out.println(vvv1);
-            Object var10000;
-            Objects.requireNonNull(var10000);
-            Object vvv5 = var10000;
-            int vvv6 = 0;
+            Object var23;
+            Objects.requireNonNull(var23);
+            Object vvv5 = var23;
 
-            var10000 = new Object();
-            int var19 = switch(SwitchBootstraps.typeSwitch<"typeSwitch">(vvv5, vvv6)) {
-               default -> {
-                  ElementType var5 = ElementType.METHOD;
-
-                  try (Scanner vvv3 = new Scanner(System.in)) {
-                     String var21 = "Hi!";
-                  } finally {
-                     System.out.println(vvv1);
-                  }
-
-                  yield 140;
-
-                  while(true) {
-                     int var25;
-                     --var25;
-                     if (var25 > 395) {
-                        break;
-                     }
-
-                     vvv6 = -91;
-                     System.out.println(vvv1);
-                     var25 -= 6;
-                  }
-               }
-            };
+            <unknown> var10000_1 = (<unknown>)(new Object());
          }
       }
 
@@ -59,26 +33,18 @@
          Object var10000;
          Objects.requireNonNull(var10000);
          Object vvv5 = var10000;
-         int vvv6 = 0;
 
          new Object();
-         int var9 = switch(SwitchBootstraps.typeSwitch<"typeSwitch">(vvv5, vvv6)) {
+
+         for(int var9 = switch(vvv5) {
             default -> {
                ElementType var5 = ElementType.METHOD;
                System.out.println(vvv1);
                yield 140;
             }
-         };
-
-         while(true) {
-            --var9;
-            if (var9 > 395) {
-               break;
-            }
-
-            vvv6 = -91;
+         }; --var9 <= 395; var9 -= 6) {
+            int vvv6 = -91;
             System.out.println(vvv1);
-            var9 -= 6;
          }
       }
 
gen_diffs.py pkg/TestVarIndex.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,25 +3,25 @@
 public class TestVarIndex {
    public void test() {
       byte var1 = 1;
-      this.consume(var1);
+      this.consume((int)var1);
       var1 = 1;
-      this.consume(var1);
+      this.consume((short)var1);
       var1 = 1;
       this.consume(var1);
    }
 
    public void test2() {
       byte var1 = 1;
-      this.consume(var1);
+      this.consume((int)var1);
       var1 = 1;
-      this.consume(var1);
+      this.consume((short)var1);
       var1 = 1;
       this.consume((byte)var1);
    }
 
    public void test3() {
       byte var1 = 1;
-      this.consume(var1);
+      this.consume((int)var1);
       var1 = 1;
       this.consume((short)var1);
       var1 = 1;
@@ -30,7 +30,7 @@
 
    public void test4() {
       byte var1 = 1;
-      this.consume(var1);
+      this.consume((int)var1);
       var1 = 1;
       this.consume((short)var1);
       var1 = 1;
gen_diffs.py pkg/TestVarIndex2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -11,7 +11,7 @@
       var1 = "1";
       this.consume((Serializable)var1);
       var1 = "1";
-      this.consume(var1);
+      this.consume((Object)var1);
    }
 
    public void test2() {
gen_diffs.py pkg/TestWhile1.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -15,6 +15,5 @@
       while(d <= 0.0) {
          d += 2.0;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileCondition.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -7,7 +7,6 @@
       for(int j = 10; i < 0 && j > 0 || i * j > 3; --j) {
          ++i;
       }
-
    }
 
    public void test2() {
@@ -18,6 +17,5 @@
          ++i;
          --j;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileConditionTernary.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -3,13 +3,10 @@
 public class TestWhileConditionTernary {
    public void test1() {
       if (this.blackBox()) {
-         while(!this.blackBox()) {
-            if (this.blackBox() ? this.blackBox3().equals("a") : this.blackBox2()) {
-               System.out.println("text");
-            }
+         while(!this.blackBox() && (this.blackBox() ? this.blackBox3().equals("a") : this.blackBox2())) {
+            System.out.println("text");
          }
       }
-
    }
 
    public boolean blackBox() {
gen_diffs.py pkg/TestWhileTernary2.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,6 +6,5 @@
          System.out.println(a * b);
          ++a;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileTernary5.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -13,6 +13,5 @@
 
          System.out.println(1);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileTernary6.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,16 +2,12 @@
 
 public class TestWhileTernary6 {
    public void test(boolean condition, int a, int b) {
-      while(true) {
+      do {
          System.out.println(a);
          ++b;
          if (a > 3) {
             --a;
          }
-
-         if (condition ? a >= b : b <= a) {
-            return;
-         }
-      }
+      } while(condition ? a < b : b > a);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileTernary7.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -5,6 +5,5 @@
       for(int i = 0; condition ? a < i : b < i; ++i) {
          System.out.println("Test");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileTernary8.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -2,23 +2,7 @@
 
 public class TestWhileTernary8 {
    public void test(boolean condition, int a, int b) {
-      while(true) {
-         label19: {
-            if (condition) {
-               if (a < b) {
-                  if (a == 3) {
-                     break label19;
-                  }
-               } else if (b == 4) {
-                  break label19;
-               }
-            } else if (b > a) {
-               break label19;
-            }
-
-            return;
-         }
-
+      while(condition ? (a < b ? a == 3 : b == 4) : b > a) {
          System.out.println(a * b);
          ++a;
       }
gen_diffs.py pkg/TestWhileTernary9.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -4,15 +4,11 @@
    public void test(boolean condition, boolean a, boolean b) {
       int i = 0;
 
-      while(true) {
-         if (condition ? a : b) {
-            ++i;
-            if (i == 8) {
-               break;
-            }
+      while(condition ? a : b) {
+         if (++i == 8) {
+            break;
          }
       }
-
    }
 
    public void test1(boolean condition, boolean a, boolean b) {
@@ -20,30 +16,24 @@
          int i = 0;
 
          while(condition ? a : b) {
-            ++i;
-            if (i == 8) {
+            if (++i == 8) {
                break;
             }
          }
       }
-
    }
 
    public void test2(boolean condition, boolean a, boolean b) {
       if (Math.random() > 0.5) {
          int i = 0;
 
-         while(true) {
-            if (condition ? a : b) {
-               ++i;
-               if (i == 8) {
-                  break;
-               }
+         while(condition ? a : b) {
+            if (++i == 8) {
+               break;
             }
          }
 
          System.out.println("Successor");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileTernaryFake.java 1.7.0 1.10.0-20221220.042610-29
--- 1.7.0
+++ 1.10.0-20221220.042610-29
@@ -6,6 +6,5 @@
          System.out.println(a * b);
          ++a;
       }
-
    }
 }
\ No newline at end of file
