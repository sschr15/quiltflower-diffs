gen_diffs.py pkg/Option3.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -37,27 +37,10 @@
          if (!(x$0 instanceof Option3)) {
             var5 = false;
          } else {
-            label36: {
-               label28: {
-                  Option3 var3 = (Option3)x$0;
-                  List var10000 = this.value();
-                  List var4 = var3.value();
-                  if (var10000 == null) {
-                     if (var4 != null) {
-                        break label28;
-                     }
-                  } else if (!var10000.equals(var4)) {
-                     break label28;
-                  }
-
-                  if (var3.canEqual(this)) {
-                     var5 = true;
-                     break label36;
-                  }
-               }
-
-               var5 = false;
-            }
+            Option3 var3 = (Option3)x$0;
+            List var10000 = this.value();
+            List var4 = var3.value();
+            var5 = (var10000 == null ? var4 == null : var10000.equals(var4)) && var3.canEqual(this);
          }
 
          if (!var5) {
gen_diffs.py pkg/TestAccidentalSwitchExpression.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,17 +2,18 @@
 
 public class TestAccidentalSwitchExpression {
    public void test(Object a) {
-      long var4 = switch(10000) {
-         case 320 -> {
-         }
-         default -> {
+      switch(10000) {
+         case 320:
+            break;
+         default:
             Object vvv26 = null;
 
             while(vvv26 == null) {
             }
-         }
-         case -79 -> -5851592879203823622L;
-      };
+         case -79:
+            long var4 = -5851592879203823622L;
+      }
+
       if (a == null) {
          System.out.println("Hi");
       }
gen_diffs.py pkg/TestAmbiguousCall.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -28,7 +28,6 @@
       } else {
          this.m2(value.toString());
       }
-
    }
 
    void test3(Object value) {
@@ -37,6 +36,5 @@
       } else {
          this.m2(value.toString());
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestAnonymousClass.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -63,15 +63,14 @@
          int x = 5;
          System.out.println(5);
       }
-
    }
 
    void bar() {
-      ((<undefinedtype>)(new Object() {
+      (new Object() {
          public void foo(String s) {
             System.out.println(s);
          }
-      })).foo("Hello world");
+      }).foo("Hello world");
    }
 
    void boo() {
gen_diffs.py pkg/TestAnonymousClassConstructor.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,62 +2,62 @@
 
 class TestAnonymousClassConstructor {
    void innerPrivateString() {
-      TestAnonymousClassConstructor.InnerPrivateString var10001 = new TestAnonymousClassConstructor.InnerPrivateString("text") {
+      new TestAnonymousClassConstructor.InnerPrivateString("text") {
       };
    }
 
    void innerPrivate() {
-      TestAnonymousClassConstructor.InnerPrivate var10001 = new TestAnonymousClassConstructor.InnerPrivate(3L, 4) {
+      new TestAnonymousClassConstructor.InnerPrivate(3L, 4) {
       };
    }
 
    void innerStaticPrivateString() {
-      TestAnonymousClassConstructor.InnerStaticPrivateString var10001 = new TestAnonymousClassConstructor.InnerStaticPrivateString("text") {
+      new TestAnonymousClassConstructor.InnerStaticPrivateString("text") {
       };
    }
 
    void innerStaticPrivate() {
-      TestAnonymousClassConstructor.InnerStaticPrivate var10001 = new TestAnonymousClassConstructor.InnerStaticPrivate(3L, 4) {
+      new TestAnonymousClassConstructor.InnerStaticPrivate(3L, 4) {
       };
    }
 
    static void innerStaticPrivateStringStatic() {
-      TestAnonymousClassConstructor.InnerStaticPrivateString var10001 = new TestAnonymousClassConstructor.InnerStaticPrivateString("text") {
+      new TestAnonymousClassConstructor.InnerStaticPrivateString("text") {
       };
    }
 
    static void innerStaticPrivateStatic() {
-      TestAnonymousClassConstructor.InnerStaticPrivate var10001 = new TestAnonymousClassConstructor.InnerStaticPrivate(3L, 4) {
+      new TestAnonymousClassConstructor.InnerStaticPrivate(3L, 4) {
       };
    }
 
    void innerPublicString() {
-      TestAnonymousClassConstructor.InnerPublicString var10001 = new TestAnonymousClassConstructor.InnerPublicString("text") {
+      new TestAnonymousClassConstructor.InnerPublicString("text") {
       };
    }
 
    void innerPublic() {
-      TestAnonymousClassConstructor.InnerPublic var10001 = new TestAnonymousClassConstructor.InnerPublic(3L, 4) {
+      new TestAnonymousClassConstructor.InnerPublic(3L, 4) {
       };
    }
 
    void innerStaticPublicString() {
-      TestAnonymousClassConstructor.InnerStaticPublicString var10001 = new TestAnonymousClassConstructor.InnerStaticPublicString("text") {
+      new TestAnonymousClassConstructor.InnerStaticPublicString("text") {
       };
    }
 
    void innerStaticPublic() {
-      TestAnonymousClassConstructor.InnerStaticPublic var10001 = new TestAnonymousClassConstructor.InnerStaticPublic(3L, 4) {
+      new TestAnonymousClassConstructor.InnerStaticPublic(3L, 4) {
       };
    }
 
    static void innerStaticPublicStringStatic() {
-      TestAnonymousClassConstructor.InnerStaticPublicString var10001 = new TestAnonymousClassConstructor.InnerStaticPublicString("text") {
+      new TestAnonymousClassConstructor.InnerStaticPublicString("text") {
       };
    }
 
    static void innerStaticPublicStatic() {
-      TestAnonymousClassConstructor.InnerStaticPublic var10001 = new TestAnonymousClassConstructor.InnerStaticPublic(3L, 4) {
+      new TestAnonymousClassConstructor.InnerStaticPublic(3L, 4) {
       };
    }
 
gen_diffs.py pkg/TestAnonymousClassJ16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,6 +1,8 @@
 package pkg;
 
 public class TestAnonymousClassJ16 {
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    public void testNamelessTypeVirtual() {
       <undefinedtype> printer = (<undefinedtype>)(new Object() {
          void println(String s) {
gen_diffs.py pkg/TestAnonymousObject.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,7 +2,7 @@
 
 public class TestAnonymousObject {
    public void test() {
-      Object var10000 = new Object() {
+      new Object() {
          {
             System.out.println("Hi");
          }
gen_diffs.py pkg/TestArrayAssign.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,7 +5,6 @@
       for(int j = 0; j < i; ++j) {
          holder.get()[j] += inc;
       }
-
    }
 
    public void test1(TestArrayAssign.Holder holder, int i, double inc) {
@@ -16,7 +15,6 @@
       for(int j = 0; j < i; ++j) {
          holder.a[j] += inc;
       }
-
    }
 
    public double test3(TestArrayAssign.Holder holder, int i) {
gen_diffs.py pkg/TestArrayAssign2.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -3,7 +3,7 @@
 public class TestArrayAssign2 {
    public Object test(boolean b, Object[] s) {
       if (b) {
-         s = this.method(s);
+         s = (Object[])this.method(s);
       }
 
       return s;
gen_diffs.py pkg/TestArrayCopy.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -9,6 +9,5 @@
       while((i += c[i]) < len) {
          System.arraycopy(c, i, a, len, len - i);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestArrayFieldAccess.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -33,13 +33,11 @@
       if (this.array[this.index]++ == 3) {
          System.out.println(this.array[this.index]);
       }
-
    }
 
    public void test6() {
       if (++this.array[this.index] == 3) {
          System.out.println(this.array[this.index]);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestArrayFieldAccess1.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -33,14 +33,12 @@
       if (this.array[this.index + 5]++ == 3) {
          System.out.println(this.array[this.index + 5]);
       }
-
    }
 
    public void test6() {
       if (++this.array[this.index + 5] == 3) {
          System.out.println(this.array[this.index + 5]);
       }
-
    }
 
    public void test7() {
gen_diffs.py pkg/TestArrayForeach.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -7,6 +7,5 @@
       for(int i : array) {
          System.out.println(i);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestArrayNewAccess.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,15 +2,15 @@
 
 public class TestArrayNewAccess {
    public void test() {
-      (new int[]{0, 1})[2] = 1;
+      new int[]{0, 1}[2] = 1;
    }
 
    public void test1() {
-      System.out.println((new int[]{0, 1})[2]);
+      System.out.println(new int[]{0, 1}[2]);
    }
 
    public void test2() {
-      System.out.println((new int[]{0, 1})[2] = 1);
+      System.out.println(new int[]{0, 1}[2] = 1);
    }
 
    public void test3() {
gen_diffs.py pkg/TestAssertConst.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -3,7 +3,6 @@
 public class TestAssertConst {
    public void test() {
       assert false;
-
    }
 
    public void test1() {
gen_diffs.py pkg/TestAssertJ16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -3,6 +3,5 @@
 public class TestAssertJ16 {
    public void test(int i) {
       assert i == 0;
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestAssertSwitchExpression.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -7,6 +7,5 @@
          case 2 -> "2";
          default -> "Unknown";
       });
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestAssignmentInLoop.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -23,7 +23,6 @@
       for(int j = 0; j < 3; j = get()) {
          System.out.println(j);
       }
-
    }
 
    private static int get() {
gen_diffs.py pkg/TestBooleanSwitchExpression2.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -36,27 +36,27 @@
             }
       }
 
-      label31: {
-         label30: {
+      label30: {
+         label29: {
             switch(var4) {
                case 0:
                   if (y < 0) {
-                     break label30;
+                     break label29;
                   }
                   break;
                case 1:
                   if (y > 0) {
-                     break label30;
+                     break label29;
                   }
                   break;
                default:
                   if (y == 0) {
-                     break label30;
+                     break label29;
                   }
             }
 
             System.out.println("Sad");
-            break label31;
+            break label30;
          }
 
          System.out.println("Nice");
gen_diffs.py pkg/TestBooleanSwitchExpression3.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -33,27 +33,27 @@
             }
       }
 
-      label31: {
-         label30: {
+      label30: {
+         label29: {
             switch(var4) {
                case 0:
                   if (y < 0) {
-                     break label30;
+                     break label29;
                   }
                   break;
                case 1:
                   if (y > 0) {
-                     break label30;
+                     break label29;
                   }
                   break;
                default:
                   if (y == 0) {
-                     break label30;
+                     break label29;
                   }
             }
 
             System.out.println("Sad");
-            break label31;
+            break label30;
          }
 
          System.out.println("Nice");
gen_diffs.py pkg/TestBooleanSwitchExpression4.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,7 +2,7 @@
 
 public class TestBooleanSwitchExpression4 {
    public void test(int x, int y, int z) {
-      label37:
+      label35:
       switch(x) {
          case 0:
             if (y >= 0) {
@@ -12,7 +12,7 @@
          case 1:
             switch(y) {
                case 0:
-                  break label37;
+                  break label35;
                case 1:
                   return;
                case 2:
@@ -25,19 +25,19 @@
                         if (x >= 100) {
                            return;
                         }
-                        break label37;
+                        break label35;
                      }
                   }
 
                   if (z != 0) {
                      return;
                   }
-                  break label37;
+                  break label35;
                default:
                   if (y != z) {
                      return;
                   }
-                  break label37;
+                  break label35;
             }
          default:
             if (y != 0) {
@@ -49,21 +49,21 @@
    }
 
    public void test1(int x, int y, int z) {
-      label41: {
-         label40: {
-            label39:
+      label39: {
+         label38: {
+            label37:
             switch(x) {
                case 0:
                   if (y < 0) {
-                     break label40;
+                     break label38;
                   }
                   break;
                case 1:
                   switch(y) {
                      case 0:
-                        break label40;
+                        break label38;
                      case 1:
-                        break label39;
+                        break label37;
                      case 2:
                         while(z > 0) {
                            int var4;
@@ -72,30 +72,30 @@
                            y += z;
                            if (y % z == 0) {
                               if (x < 100) {
-                                 break label40;
+                                 break label38;
                               }
-                              break label39;
+                              break label37;
                            }
                         }
 
                         if (z == 0) {
-                           break label40;
+                           break label38;
                         }
-                        break label39;
+                        break label37;
                      default:
                         if (y == z) {
-                           break label40;
+                           break label38;
                         }
-                        break label39;
+                        break label37;
                   }
                default:
                   if (y == 0) {
-                     break label40;
+                     break label38;
                   }
             }
 
             System.out.println("Sad");
-            break label41;
+            break label39;
          }
 
          System.out.println("Nice");
gen_diffs.py pkg/TestCastObjectToPrimitive.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -26,6 +26,5 @@
       while(object1) {
          System.out.println("Test3");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestClassSimpleBytecodeMapping.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -27,7 +27,6 @@
       } finally {
          System.out.println("Finally");
       }
-
    }
 
    void run(Runnable r) {
gen_diffs.py pkg/TestClassTypes.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -16,7 +16,6 @@
       if (var7 == 1) {
          System.out.println();
       }
-
    }
 
    public boolean testBit(int var0) {
@@ -35,7 +34,6 @@
          case 65489:
             System.out.println("3");
       }
-
    }
 
    public void testAssignmentType(List list) {
gen_diffs.py pkg/TestClassVar.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -12,10 +12,8 @@
             if (this.field_boolean) {
                System.out.println();
             }
-
          }
       }
-
    }
 
    public Long testFieldSSAU1() {
@@ -36,6 +34,5 @@
             System.out.println();
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestComplexIfElseChain.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -17,7 +17,6 @@
       } else if (result == 8 || result == 9) {
          System.out.println("e");
       }
-
    }
 
    public void testInLoop() {
@@ -37,7 +36,6 @@
             System.out.println("e");
          }
       }
-
    }
 
    public void testInLoop1() {
@@ -92,7 +90,6 @@
             System.out.println("a");
          }
       }
-
    }
 
    public void testInLoop3() {
@@ -130,7 +127,6 @@
             System.out.println("e");
          }
       } while(i > 3);
-
    }
 
    public void testSwitch(int i) {
@@ -216,9 +212,7 @@
          } else if (result == 8 || result == 9) {
             System.out.println("e");
          }
-
-      }
-
+      }
    }
 
    public void testFinally1() {
@@ -239,7 +233,6 @@
          } else if (result == 8 || result == 9) {
             System.out.println("e");
          }
-
       }
 
       if (result == 0 || result == 1) {
@@ -253,7 +246,6 @@
       } else if (result == 8 || result == 9) {
          System.out.println("e");
       }
-
    }
 
    public void testFinally2() {
@@ -294,8 +286,6 @@
                System.out.println("e1");
             }
          }
-
-      }
-
+      }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestCondy.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -10,15 +10,15 @@
    public static final TestCondy selfField = null;
 
    public static String testNull() {
-      return (String)ConstantBootstraps.nullConstant<"null">();
+      return /* $QF: constant dynamic */ null;
    }
 
    public static FakeEnum testEnum() {
-      return (FakeEnum)ConstantBootstraps.enumConstant<"FOO">();
+      return /* $QF: constant dynamic */ FakeEnum.FOO;
    }
 
    public static Class testPrimitiveClass() {
-      return (Class)ConstantBootstraps.primitiveClass<"V">();
+      return /* $QF: constant dynamic */ void.class;
    }
 
    public static Class testWrongPrimitiveClass() {
@@ -26,11 +26,11 @@
    }
 
    public static Class testGetStaticFinal() {
-      return (Integer)ConstantBootstraps.getStaticFinal<"field",TestCondy>();
+      return /* $QF: constant dynamic */ field;
    }
 
    public static Class testGetSelfStaticFinal() {
-      return (TestCondy)ConstantBootstraps.getStaticFinal<"selfField">();
+      return /* $QF: constant dynamic */ selfField;
    }
 
    public static VarHandle testStaticVarHandle() {
gen_diffs.py pkg/TestConstType.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -12,7 +12,6 @@
          case 'w':
             this.lineBreak = '\n';
       }
-
    }
 
    public void init() {
gen_diffs.py pkg/TestDefiniteAssignment.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -8,7 +8,6 @@
       if (v > 0 && (k = System.in.read()) >= 0) {
          System.out.println(k);
       }
-
    }
 
    void testExample16$1$$2(int n) {
@@ -41,9 +40,11 @@
    }
 
    void testAssignments(int n, boolean bool) {
-      int a;
-      if (bool && (n > 0 || (a = -n) > 100)) {
-         System.out.println(a);
+      if (bool) {
+         int a = n;
+         if (n > 0 || (a = -n) > 100) {
+            System.out.println(a);
+         }
       }
 
       int b;
@@ -53,23 +54,13 @@
          System.out.println("b");
       }
 
-      double cFake;
-      label38: {
-         label55: {
-            cFake = 0.01;
-            System.out.println(cFake);
-            if ((double)n < 1.0 - (double)n && (cFake = (double)(n + 5)) > cFake * cFake - cFake / 2.0) {
-               if ((double)n > cFake) {
-                  break label55;
-               }
-            } else if ((double)n < 5.0 - (cFake = (double)n)) {
-               break label55;
-            }
-
-            cFake += 5.0;
-            break label38;
-         }
-
+      double cFake = 0.01;
+      System.out.println(cFake);
+      if ((double)n < 1.0 - (double)n && (cFake = (double)(n + 5)) > cFake * cFake - cFake / 2.0
+         ? !((double)n > cFake)
+         : !((double)n < 5.0 - (cFake = (double)n))) {
+         cFake += 5.0;
+      } else {
          System.out.println(cFake);
          cFake += 2.0;
       }
@@ -79,7 +70,6 @@
       if ((d = (double)n) > 0.0) {
          System.out.println(d);
       }
-
    }
 
    void testBooleanNormalness(int n) {
gen_diffs.py pkg/TestDoublePopAfterJump.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -46,7 +46,6 @@
             var10000 = java/lang/System/out;
          }
       }
-
    }
 
    public static final void fizzBuzzReduced() {
@@ -55,6 +54,5 @@
 
       while(var10001 <= 0) {
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestDoWhileMerge.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -20,16 +20,12 @@
       for(int i = 0; i < j; ++i) {
          System.out.println(1);
 
-         while(true) {
+         do {
             System.out.println(i);
             if (++i == 30) {
                return;
             }
-
-            if (!b || i >= 40) {
-               break;
-            }
-         }
+         } while(!b || i >= 40);
       }
 
       System.out.println("after");
@@ -52,6 +48,5 @@
             System.out.println(j);
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestDoWhileTrue.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -6,6 +6,5 @@
 
       while(++x < 100) {
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestDuplicateSwitchLocals.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -26,6 +26,5 @@
             System.out.println(z);
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestEmptyBlocks.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -20,6 +20,5 @@
 
       if (new Random().nextBoolean()) {
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestEnhancedForLoops.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -9,20 +9,17 @@
       for(int number : numbers) {
          System.out.println(number);
       }
-
    }
 
    public void forItterator() {
       for(String string : new ArrayList()) {
          System.out.println(string);
       }
-
    }
 
    public void forItteratorUnboxing() {
       for(int i : new ArrayList()) {
          System.out.println("Value: " + i);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestEnumArrayStaticInit.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -19,6 +19,5 @@
       for(TestEnumArrayStaticInit e : values) {
          VALUES[e.v] = e;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestEnumStaticField.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,7 +1,7 @@
 package pkg;
 
 public enum TestEnumStaticField {
-   public static Integer field;
    TEST_1,
    TEST_2;
+   public static Integer field;
 }
\ No newline at end of file
gen_diffs.py pkg/TestEnumStaticField2.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,8 +1,7 @@
 package pkg;
 
 public enum TestEnumStaticField2 {
-   TEST_1;
-
+   TEST_1,
+   TEST_2;
    public static Integer field;
-   TEST_2;
 }
\ No newline at end of file
gen_diffs.py pkg/TestEnumSwitchEmpty.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -4,9 +4,34 @@
 
 public class TestEnumSwitchEmpty {
    public void test() {
-      ElementType et = ElementType.TYPE;
-      ElementType et2 = ElementType.TYPE;
-      int var10000 = null.$SwitchMap$java$lang$annotation$ElementType[et.ordinal()];
-      var10000 = null.$SwitchMap$java$lang$annotation$ElementType[et2.ordinal()];
+      // $QF: Couldn't be decompiled
+      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
+      // java.lang.NullPointerException: Cannot invoke "String.contains(java.lang.CharSequence)" because "text" is null
+      //  at org.jetbrains.java.decompiler.util.TextBuffer.addAllClassTokens(TextBuffer.java)
+      //  at org.jetbrains.java.decompiler.util.TextBuffer.appendAllClasses(TextBuffer.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.FieldExprent.toJava(FieldExprent.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.ArrayExprent.toJava(ArrayExprent.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent.toJava(AssignmentExprent.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.listToJava(ExprProcessor.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.BasicBlockStatement.toJava(BasicBlockStatement.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement.toJava(RootStatement.java)
+      //  at org.jetbrains.java.decompiler.main.ClassWriter.methodToJava(ClassWriter.java)
+      //
+      // Bytecode:
+      // 00: getstatic java/lang/annotation/ElementType.TYPE Ljava/lang/annotation/ElementType;
+      // 03: astore 1
+      // 04: getstatic java/lang/annotation/ElementType.TYPE Ljava/lang/annotation/ElementType;
+      // 07: astore 2
+      // 08: getstatic pkg/TestEnumSwitchEmpty$1.$SwitchMap$java$lang$annotation$ElementType [I
+      // 0b: aload 1
+      // 0c: invokevirtual java/lang/annotation/ElementType.ordinal ()I
+      // 0f: iaload
+      // 10: pop
+      // 11: getstatic pkg/TestEnumSwitchEmpty$1.$SwitchMap$java$lang$annotation$ElementType [I
+      // 14: aload 2
+      // 15: invokevirtual java/lang/annotation/ElementType.ordinal ()I
+      // 18: iaload
+      // 19: pop
+      // 1a: return
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestExceptionElse.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -22,6 +22,5 @@
             System.out.println(3);
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestFieldSingleAccess.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -4,11 +4,9 @@
    public Integer field;
 
    public final void test() {
-      Integer var10000 = this.field;
       if (this.field != null) {
-         System.out.println(var10000);
+         System.out.println(this.field);
       }
-
    }
 
    public final void test1() {
gen_diffs.py pkg/TestFinallyBlockVariableUse.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,38 +1,25 @@
 package pkg;
 
 public class TestFinallyBlockVariableUse {
-   // $QF: Could not verify finally blocks. A semaphore variable has been added to preserve control flow.
-   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    public int test(String s, int i, int j) {
       System.out.println("a");
-      boolean var10 = false;
 
       int e;
       try {
-         var10 = true;
          System.out.println("b");
 
          try {
             i = Integer.parseInt(s) - j;
             e = i;
-            var10 = false;
-         } catch (NumberFormatException var11) {
+         } catch (NumberFormatException var10) {
             i = j;
-            throw var11;
+            throw var10;
          }
       } finally {
-         if (var10) {
-            int id = i - j;
-            if (id > 0) {
-               this.accept(new Object[]{id, s, i, j});
-            }
-
+         int id = i - j;
+         if (id > 0) {
+            this.accept(new Object[]{id, s, i, j});
          }
-      }
-
-      int id = i - j;
-      if (id > 0) {
-         this.accept(new Object[]{id, s, i, j});
       }
 
       return e;
gen_diffs.py pkg/TestFinallyThrow.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -6,20 +6,15 @@
          try {
             System.out.println(1);
          } finally {
-            label127: {
-               try {
-                  if (!b) {
-                     break label127;
-                  }
-               } catch (Exception var22) {
-                  throw var22;
-               } finally {
-                  System.out.println(2);
+            try {
+               if (b) {
+                  return;
                }
-
-               return;
+            } catch (Exception var22) {
+               throw var22;
+            } finally {
+               System.out.println(2);
             }
-
          }
       }
    }
gen_diffs.py pkg/TestFloatInvertedIfConditionEarlyExit.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -13,6 +13,5 @@
             System.out.println("Hello " + f);
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestForContinue.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -7,6 +7,5 @@
             System.out.println(i);
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestForCyclicVarDef.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -8,18 +8,16 @@
             var3 = var9 - -15.01F;
             System.out.println("Hi");
          }
-
       }
    }
 
    public void test1() {
       boolean var9 = true;
 
-      for(float var9 = 22.22F; var9 > 133.07F; var9 = var3 * 29.43F) {
-         var3 = var9 - -15.01F;
+      for(float var9x = 22.22F; var9x > 133.07F; var9x = var3 * 29.43F) {
+         var3 = var9x - -15.01F;
          System.out.println("Hi");
       }
-
    }
 
    public void testOk() {
@@ -28,6 +26,5 @@
          var9 -= -15.01F;
          System.out.println("Hi");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestForeachCrash.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,25 +5,20 @@
 public class TestForeachCrash {
    public void test() {
       int[][] vvv1 = new int[0][];
-      int[][] var2 = vvv1;
-      int var3 = vvv1.length;
-      int var4 = 0;
 
-      while(var4 < var3) {
-         int[] vvv2 = var2[var4];
+      for(int[] vvv2 : vvv1) {
          switch(1) {
             case 0:
                try {
                   ElementType vvv8 = ElementType.METHOD;
                } catch (Exception var10) {
-                  int var10002 = vvv1[0][0]++;
                } finally {
                   ;
                }
             default:
+               int var4;
                ++var4;
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestForeachMultiDimensionalArray.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,25 +5,20 @@
 public class TestForeachMultiDimensionalArray {
    public void test() {
       int[][] vvv1 = new int[0][];
-      int[][] var2 = vvv1;
-      int var3 = vvv1.length;
-      int var4 = 0;
 
-      while(var4 < var3) {
-         int[] vvv2 = var2[var4];
+      for(int[] vvv2 : vvv1) {
          switch(1) {
             case 0:
                try {
                   ElementType vvv8 = ElementType.METHOD;
                } catch (Exception var10) {
-                  int var10002 = vvv1[0][0]++;
                } finally {
                   ;
                }
             default:
+               int var4;
                ++var4;
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestForeachMultipleLoops.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -9,41 +9,27 @@
       if (a != null) {
          System.out.println(a);
       } else {
-         Iterator var4 = map.entrySet().iterator();
-
-         while(true) {
-            while(true) {
-               Entry<Integer, String> entry;
-               while(true) {
-                  if (!var4.hasNext()) {
-                     return;
-                  }
-
-                  entry = (Entry)var4.next();
-                  String s = entry.getValue();
-                  if (a == null) {
-                     s = s + s;
-                     break;
-                  }
-
-                  if (s == null) {
-                     s = "hello";
-                     break;
-                  }
+         for(Entry<Integer, String> entry : map.entrySet()) {
+            String s = entry.getValue();
+            if (a == null) {
+               s = s + s;
+            } else {
+               if (s != null) {
+                  continue;
                }
 
-               Object v = entry.getValue();
-               if (v == null) {
-                  if (i == 3) {
-                     continue;
-                  }
+               s = "hello";
+            }
 
-                  System.out.println("if");
-                  break;
+            Object v = entry.getValue();
+            if (v == null) {
+               if (i == 3) {
+                  continue;
                }
 
+               System.out.println("if");
+            } else {
                System.out.println("else");
-               break;
             }
 
             try {
gen_diffs.py pkg/TestForeachVardef.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,12 +1,16 @@
 package pkg;
 
+import java.util.Iterator;
 import java.util.List;
 
 public class TestForeachVardef {
    public String test(List<String> s) {
       String t = null;
       if (s.size() > 10) {
-         for(t : s) {
+         Iterator<String> iterator = s.iterator();
+
+         while(iterator.hasNext()) {
+            t = iterator.next();
             System.out.println(t);
          }
       } else {
@@ -19,7 +23,10 @@
    public int testArray(int[] a) {
       int t = 0;
       if (a.length > 10) {
-         for(t : a) {
+         int l = a.length;
+
+         for(int i = 0; i < l; ++i) {
+            t = a[i];
             System.out.println(t);
          }
       } else {
gen_diffs.py pkg/TestGenericCasts.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -22,7 +22,6 @@
             System.out.println(s);
          }
       }
-
    }
 
    public void test4(Collection<String> c) {
gen_diffs.py pkg/TestGenericMapInput.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -8,6 +8,5 @@
       for(N item : source) {
          map.put(item.toString(), item);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestGenerics.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -33,14 +33,12 @@
       for(String s : field.keySet()) {
          System.out.println(s);
       }
-
    }
 
    public void genericForEachWithCast() {
       for(String s : llstring.get(0)) {
          System.out.println(s);
       }
-
    }
 
    public <T extends Number> void genericSuperUp() {
@@ -49,7 +47,6 @@
       for(Number number : bytes) {
          list.add((T)number);
       }
-
    }
 
    public static class Maps {
gen_diffs.py pkg/TestGenericsHierarchy.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -14,7 +14,7 @@
          list2 = list;
       }
 
-      V v1 = (V)list.get(0);
+      V v1 = list.get(0);
       T v2 = list2.get(0);
       list3.add(list2.get(0));
       this.field = (T)v;
gen_diffs.py pkg/TestGenericSuper.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -7,7 +7,7 @@
 
    public <U extends T> void test(TestGenericSuper<T>.IO<T, U> io, Consumer<U> consumer) {
       consumer.accept((T)null);
-      U u = (U)io.mutate(this.t1);
+      U u = io.mutate(this.t1);
       consumer.accept(u);
    }
 
gen_diffs.py pkg/TestGroovyClass.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -91,9 +91,8 @@
    @Internal
    @Transient
    public MetaClass getMetaClass() {
-      MetaClass var10000 = this.metaClass;
       if (this.metaClass != null) {
-         return var10000;
+         return this.metaClass;
       } else {
          this.metaClass = this.$getStaticMetaClass();
          return this.metaClass;
@@ -231,9 +230,8 @@
       @Internal
       @Transient
       public MetaClass getMetaClass() {
-         MetaClass var10000 = this.metaClass;
          if (this.metaClass != null) {
-            return var10000;
+            return this.metaClass;
          } else {
             this.metaClass = this.$getStaticMetaClass();
             return this.metaClass;
@@ -354,9 +352,8 @@
       @Internal
       @Transient
       public MetaClass getMetaClass() {
-         MetaClass var10000 = this.metaClass;
          if (this.metaClass != null) {
-            return var10000;
+            return this.metaClass;
          } else {
             this.metaClass = this.$getStaticMetaClass();
             return this.metaClass;
gen_diffs.py pkg/TestGroovyTrait$Trait$Helper.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -135,9 +135,8 @@
    @Internal
    @Transient
    public MetaClass getMetaClass() {
-      MetaClass var10000 = this.metaClass;
       if (this.metaClass != null) {
-         return var10000;
+         return this.metaClass;
       } else {
          this.metaClass = this.$getStaticMetaClass();
          return this.metaClass;
gen_diffs.py pkg/TestGroovyTryCatch.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -38,7 +38,6 @@
          } catch (Exception var6) {
             var1[2].call(var1[3].callGetProperty(System.class), "Exception");
          }
-
       } finally {
          ;
       }
@@ -55,7 +54,6 @@
          } catch (Throwable var9) {
             var1[8].call(var1[9].callGetProperty(System.class), "Throwable");
          }
-
       } finally {
          ;
       }
@@ -79,9 +77,8 @@
    @Internal
    @Transient
    public MetaClass getMetaClass() {
-      MetaClass var10000 = this.metaClass;
       if (this.metaClass != null) {
-         return var10000;
+         return this.metaClass;
       } else {
          this.metaClass = this.$getStaticMetaClass();
          return this.metaClass;
gen_diffs.py pkg/TestIfElseTernary1.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,295 +2,96 @@
 
 public class TestIfElseTernary1 {
    public void test0(boolean condition, int a, int b, int c) {
-      label23: {
-         if (condition) {
-            if (a < b) {
-               break label23;
-            }
-         } else if (b > c) {
-            break label23;
-         }
-
+      if (condition ? a >= b : b <= c) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test1(boolean condition, int a, int b, int c) {
-      label28: {
-         if (condition) {
-            if (a < b) {
-               if (a == 0) {
-                  break label28;
-               }
-            } else if (b == 0) {
-               break label28;
-            }
-         } else if (b > c) {
-            break label28;
-         }
-
+      if (condition ? (a < b ? a != 0 : b != 0) : b <= c) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test2(boolean condition, int a, int b, int c) {
-      label28: {
-         if (condition) {
-            if (a < b) {
-               break label28;
-            }
-         } else if (b > c) {
-            if (b == 15) {
-               break label28;
-            }
-         } else if (a == 15) {
-            break label28;
-         }
-
+      if (condition ? a >= b : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test3(boolean condition, int a, int b, int c) {
-      label33: {
-         if (condition) {
-            if (a < b) {
-               if (a == 0) {
-                  break label33;
-               }
-            } else if (b == 0) {
-               break label33;
-            }
-         } else if (b > c) {
-            if (b == 15) {
-               break label33;
-            }
-         } else if (a == 15) {
-            break label33;
-         }
-
+      if (condition ? (a < b ? a != 0 : b != 0) : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test4(boolean condition, int a, int b, int c) {
-      label32: {
-         label24: {
-            label23: {
-               if (condition) {
-                  if (a + c <= b) {
-                     break label23;
-                  }
-               } else if (a >= b + c) {
-                  break label23;
-               }
-
-               if (a < b) {
-                  break label32;
-               }
-               break label24;
-            }
-
-            if (b > c) {
-               break label32;
-            }
-         }
-
+      if ((condition ? a + c > b : a < b + c) ? a >= b : b <= c) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test5(boolean condition, int a, int b, int c) {
-      label37: {
-         label29: {
-            label28: {
-               if (condition) {
-                  if (a + c <= b) {
-                     break label28;
-                  }
-               } else if (a >= b + c) {
-                  break label28;
-               }
-
-               if (a < b) {
-                  if (a == 0) {
-                     break label37;
-                  }
-               } else if (b == 0) {
-                  break label37;
-               }
-               break label29;
-            }
-
-            if (b > c) {
-               break label37;
-            }
-         }
-
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a != 0 : b != 0) : b <= c) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test6(boolean condition, int a, int b, int c) {
-      label37: {
-         label29: {
-            label28: {
-               if (condition) {
-                  if (a + c <= b) {
-                     break label28;
-                  }
-               } else if (a >= b + c) {
-                  break label28;
-               }
-
-               if (a < b) {
-                  break label37;
-               }
-               break label29;
-            }
-
-            if (b > c) {
-               if (b == 15) {
-                  break label37;
-               }
-            } else if (a == 15) {
-               break label37;
-            }
-         }
-
+      if ((condition ? a + c > b : a < b + c) ? a >= b : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test7(boolean condition, int a, int b, int c) {
-      label42: {
-         label34: {
-            label33: {
-               if (condition) {
-                  if (a + c <= b) {
-                     break label33;
-                  }
-               } else if (a >= b + c) {
-                  break label33;
-               }
-
-               if (a < b) {
-                  if (a == 0) {
-                     break label42;
-                  }
-               } else if (b == 0) {
-                  break label42;
-               }
-               break label34;
-            }
-
-            if (b > c) {
-               if (b == 15) {
-                  break label42;
-               }
-            } else if (a == 15) {
-               break label42;
-            }
-         }
-
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a != 0 : b != 0) : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8(boolean condition, int a, int b, int c) {
-      label38: {
-         if (a != b && b != c) {
-            if (a > b && b > c) {
-               if (a < b + c && a > 3 * c) {
-                  break label38;
-               }
-            } else if (condition) {
-               break label38;
-            }
-         } else if (a != b) {
-            break label38;
-         }
-
+      if (a != b && b != c ? (a > b && b > c ? a >= b + c || a <= 3 * c : !condition) : a == b) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8b(boolean condition, int a, int b, int c) {
-      label40: {
-         if (a == b && b == c) {
-            if (!condition) {
-               break label40;
-            }
-         } else if (a > b && b > c) {
-            if (a < b + c && a > 3 * c) {
-               break label40;
-            }
-         } else if (condition) {
-            break label40;
-         }
-
+      if (a == b && b == c ? condition : (a > b && b > c ? a >= b + c || a <= 3 * c : !condition)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void testFuzz1() {
-      int[] vvv2;
-      label97: {
-         int[] vvv3;
-         label103: {
-            int[] vvv1 = new int[0];
-            vvv2 = new int[0];
-            vvv3 = new int[0];
-            if ((vvv1 != null || vvv2 != null) && vvv2 == null) {
-               if (vvv2 == null) {
-                  if (vvv2 != null) {
-                     break label103;
-                  }
-               } else if (vvv3 == null || vvv1 != null) {
-                  break label103;
-               }
-            } else if (vvv3 == null) {
-               break label103;
-            }
-
-            synchronized(this) {
-               vvv2 = vvv3;
-               System.out.println(vvv3);
-               long[][] vvv4 = new long[0][];
-               break label97;
-            }
+      int[] vvv1 = new int[0];
+      int[] vvv2 = new int[0];
+      int[] vvv3 = new int[0];
+      if ((vvv1 != null || vvv2 != null) && vvv2 == null ? (vvv2 == null ? vvv2 == null : vvv3 != null && vvv1 == null) : vvv3 != null) {
+         synchronized(this) {
+            vvv2 = vvv3;
+            System.out.println(vvv3);
+            long[][] vvv4 = new long[0][];
          }
-
+      } else {
          try {
             boolean vvv11 = true;
          } catch (Exception var15) {
gen_diffs.py pkg/TestIfElseTernary1J17.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,295 +2,96 @@
 
 public class TestIfElseTernary1J17 {
    public void test0(boolean condition, int a, int b, int c) {
-      label23: {
-         if (condition) {
-            if (a < b) {
-               break label23;
-            }
-         } else if (b > c) {
-            break label23;
-         }
-
+      if (condition ? a >= b : b <= c) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test1(boolean condition, int a, int b, int c) {
-      label28: {
-         if (condition) {
-            if (a < b) {
-               if (a == 0) {
-                  break label28;
-               }
-            } else if (b == 0) {
-               break label28;
-            }
-         } else if (b > c) {
-            break label28;
-         }
-
+      if (condition ? (a < b ? a != 0 : b != 0) : b <= c) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test2(boolean condition, int a, int b, int c) {
-      label28: {
-         if (condition) {
-            if (a < b) {
-               break label28;
-            }
-         } else if (b > c) {
-            if (b == 15) {
-               break label28;
-            }
-         } else if (a == 15) {
-            break label28;
-         }
-
+      if (condition ? a >= b : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test3(boolean condition, int a, int b, int c) {
-      label33: {
-         if (condition) {
-            if (a < b) {
-               if (a == 0) {
-                  break label33;
-               }
-            } else if (b == 0) {
-               break label33;
-            }
-         } else if (b > c) {
-            if (b == 15) {
-               break label33;
-            }
-         } else if (a == 15) {
-            break label33;
-         }
-
+      if (condition ? (a < b ? a != 0 : b != 0) : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test4(boolean condition, int a, int b, int c) {
-      label32: {
-         label24: {
-            label23: {
-               if (condition) {
-                  if (a + c <= b) {
-                     break label23;
-                  }
-               } else if (a >= b + c) {
-                  break label23;
-               }
-
-               if (a < b) {
-                  break label32;
-               }
-               break label24;
-            }
-
-            if (b > c) {
-               break label32;
-            }
-         }
-
+      if ((condition ? a + c > b : a < b + c) ? a >= b : b <= c) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test5(boolean condition, int a, int b, int c) {
-      label37: {
-         label29: {
-            label28: {
-               if (condition) {
-                  if (a + c <= b) {
-                     break label28;
-                  }
-               } else if (a >= b + c) {
-                  break label28;
-               }
-
-               if (a < b) {
-                  if (a == 0) {
-                     break label37;
-                  }
-               } else if (b == 0) {
-                  break label37;
-               }
-               break label29;
-            }
-
-            if (b > c) {
-               break label37;
-            }
-         }
-
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a != 0 : b != 0) : b <= c) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test6(boolean condition, int a, int b, int c) {
-      label37: {
-         label29: {
-            label28: {
-               if (condition) {
-                  if (a + c <= b) {
-                     break label28;
-                  }
-               } else if (a >= b + c) {
-                  break label28;
-               }
-
-               if (a < b) {
-                  break label37;
-               }
-               break label29;
-            }
-
-            if (b > c) {
-               if (b == 15) {
-                  break label37;
-               }
-            } else if (a == 15) {
-               break label37;
-            }
-         }
-
+      if ((condition ? a + c > b : a < b + c) ? a >= b : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test7(boolean condition, int a, int b, int c) {
-      label42: {
-         label34: {
-            label33: {
-               if (condition) {
-                  if (a + c <= b) {
-                     break label33;
-                  }
-               } else if (a >= b + c) {
-                  break label33;
-               }
-
-               if (a < b) {
-                  if (a == 0) {
-                     break label42;
-                  }
-               } else if (b == 0) {
-                  break label42;
-               }
-               break label34;
-            }
-
-            if (b > c) {
-               if (b == 15) {
-                  break label42;
-               }
-            } else if (a == 15) {
-               break label42;
-            }
-         }
-
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a != 0 : b != 0) : (b > c ? b != 15 : a != 15)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8(boolean condition, int a, int b, int c) {
-      label38: {
-         if (a != b && b != c) {
-            if (a > b && b > c) {
-               if (a < b + c && a > 3 * c) {
-                  break label38;
-               }
-            } else if (condition) {
-               break label38;
-            }
-         } else if (a != b) {
-            break label38;
-         }
-
+      if (a != b && b != c ? (a > b && b > c ? a >= b + c || a <= 3 * c : !condition) : a == b) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8b(boolean condition, int a, int b, int c) {
-      label40: {
-         if (a == b && b == c) {
-            if (!condition) {
-               break label40;
-            }
-         } else if (a > b && b > c) {
-            if (a < b + c && a > 3 * c) {
-               break label40;
-            }
-         } else if (condition) {
-            break label40;
-         }
-
+      if (a == b && b == c ? condition : (a > b && b > c ? a >= b + c || a <= 3 * c : !condition)) {
          System.out.println(2);
-         return;
+      } else {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void testFuzz1() {
-      int[] vvv2;
-      label97: {
-         int[] vvv3;
-         label103: {
-            int[] vvv1 = new int[0];
-            vvv2 = new int[0];
-            vvv3 = new int[0];
-            if ((vvv1 != null || vvv2 != null) && vvv2 == null) {
-               if (vvv2 == null) {
-                  if (vvv2 != null) {
-                     break label103;
-                  }
-               } else if (vvv3 == null || vvv1 != null) {
-                  break label103;
-               }
-            } else if (vvv3 == null) {
-               break label103;
-            }
-
-            synchronized(this) {
-               vvv2 = vvv3;
-               System.out.println(vvv3);
-               long[][] vvv4 = new long[0][];
-               break label97;
-            }
+      int[] vvv1 = new int[0];
+      int[] vvv2 = new int[0];
+      int[] vvv3 = new int[0];
+      if ((vvv1 != null || vvv2 != null) && vvv2 == null ? (vvv2 == null ? vvv2 == null : vvv3 != null && vvv1 == null) : vvv3 != null) {
+         synchronized(this) {
+            vvv2 = vvv3;
+            System.out.println(vvv3);
+            long[][] vvv4 = new long[0][];
          }
-
+      } else {
          try {
             boolean vvv11 = true;
          } catch (Exception var15) {
gen_diffs.py pkg/TestIfLoop.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -7,8 +7,7 @@
    public int testCompoundCondition(int i, int j) {
       while(i > 0 && j < 3) {
          if (j < 0) {
-            --j;
-            if (i > 3 && j == -2) {
+            if (i > 3 && --j == -2) {
                j = 1;
             }
          }
@@ -39,7 +38,6 @@
       for(int var5 = random.nextInt(8) - random.nextInt(8) + b; a >= 0 && a <= 20 && var5 >= 0 && var5 <= 20; var5 -= random.nextInt(4) - random.nextInt(4)) {
          a -= random.nextInt(4) - random.nextInt(4);
       }
-
    }
 
    public int testElseIf(int i) {
gen_diffs.py pkg/TestIfTernary1.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,214 +2,62 @@
 
 public class TestIfTernary1 {
    public void test0(boolean condition, int a, int b, int c) {
-      if (condition) {
-         if (a >= b) {
-            return;
-         }
-      } else if (b <= c) {
-         return;
+      if (condition ? a < b : b > c) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test1(boolean condition, int a, int b, int c) {
-      if (condition) {
-         if (a < b) {
-            if (a != 0) {
-               return;
-            }
-         } else if (b != 0) {
-            return;
-         }
-      } else if (b <= c) {
-         return;
+      if (condition ? (a < b ? a == 0 : b == 0) : b > c) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test2(boolean condition, int a, int b, int c) {
-      if (condition) {
-         if (a >= b) {
-            return;
-         }
-      } else if (b > c) {
-         if (b != 15) {
-            return;
-         }
-      } else if (a != 15) {
-         return;
+      if (condition ? a < b : (b > c ? b == 15 : a == 15)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test3(boolean condition, int a, int b, int c) {
-      if (condition) {
-         if (a < b) {
-            if (a != 0) {
-               return;
-            }
-         } else if (b != 0) {
-            return;
-         }
-      } else if (b > c) {
-         if (b != 15) {
-            return;
-         }
-      } else if (a != 15) {
-         return;
+      if (condition ? (a < b ? a == 0 : b == 0) : (b > c ? b == 15 : a == 15)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test4(boolean condition, int a, int b, int c) {
-      label22: {
-         label21: {
-            if (condition) {
-               if (a + c <= b) {
-                  break label21;
-               }
-            } else if (a >= b + c) {
-               break label21;
-            }
-
-            if (a >= b) {
-               return;
-            }
-            break label22;
-         }
-
-         if (b <= c) {
-            return;
-         }
+      if ((condition ? a + c > b : a < b + c) ? a < b : b > c) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test5(boolean condition, int a, int b, int c) {
-      label27: {
-         label26: {
-            if (condition) {
-               if (a + c <= b) {
-                  break label26;
-               }
-            } else if (a >= b + c) {
-               break label26;
-            }
-
-            if (a < b) {
-               if (a != 0) {
-                  return;
-               }
-            } else if (b != 0) {
-               return;
-            }
-            break label27;
-         }
-
-         if (b <= c) {
-            return;
-         }
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a == 0 : b == 0) : b > c) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test6(boolean condition, int a, int b, int c) {
-      label27: {
-         label26: {
-            if (condition) {
-               if (a + c <= b) {
-                  break label26;
-               }
-            } else if (a >= b + c) {
-               break label26;
-            }
-
-            if (a >= b) {
-               return;
-            }
-            break label27;
-         }
-
-         if (b > c) {
-            if (b != 15) {
-               return;
-            }
-         } else if (a != 15) {
-            return;
-         }
+      if ((condition ? a + c > b : a < b + c) ? a < b : (b > c ? b == 15 : a == 15)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test7(boolean condition, int a, int b, int c) {
-      label32: {
-         label31: {
-            if (condition) {
-               if (a + c <= b) {
-                  break label31;
-               }
-            } else if (a >= b + c) {
-               break label31;
-            }
-
-            if (a < b) {
-               if (a != 0) {
-                  return;
-               }
-            } else if (b != 0) {
-               return;
-            }
-            break label32;
-         }
-
-         if (b > c) {
-            if (b != 15) {
-               return;
-            }
-         } else if (a != 15) {
-            return;
-         }
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a == 0 : b == 0) : (b > c ? b == 15 : a == 15)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8(boolean condition, int a, int b, int c) {
-      if (a != b && b != c) {
-         if (a > b && b > c) {
-            if (a >= b + c || a <= 3 * c) {
-               return;
-            }
-         } else if (!condition) {
-            return;
-         }
-      } else if (a == b) {
-         return;
+      if (a != b && b != c ? (a > b && b > c ? a < b + c && a > 3 * c : condition) : a != b) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8b(boolean condition, int a, int b, int c) {
-      if (a == b && b == c) {
-         if (condition) {
-            return;
-         }
-      } else if (a > b && b > c) {
-         if (a >= b + c || a <= 3 * c) {
-            return;
-         }
-      } else if (!condition) {
-         return;
+      if (a == b && b == c ? !condition : (a > b && b > c ? a < b + c && a > 3 * c : condition)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestIfTernary1J17.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,214 +2,62 @@
 
 public class TestIfTernary1J17 {
    public void test0(boolean condition, int a, int b, int c) {
-      if (condition) {
-         if (a >= b) {
-            return;
-         }
-      } else if (b <= c) {
-         return;
+      if (condition ? a < b : b > c) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test1(boolean condition, int a, int b, int c) {
-      if (condition) {
-         if (a < b) {
-            if (a != 0) {
-               return;
-            }
-         } else if (b != 0) {
-            return;
-         }
-      } else if (b <= c) {
-         return;
+      if (condition ? (a < b ? a == 0 : b == 0) : b > c) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test2(boolean condition, int a, int b, int c) {
-      if (condition) {
-         if (a >= b) {
-            return;
-         }
-      } else if (b > c) {
-         if (b != 15) {
-            return;
-         }
-      } else if (a != 15) {
-         return;
+      if (condition ? a < b : (b > c ? b == 15 : a == 15)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test3(boolean condition, int a, int b, int c) {
-      if (condition) {
-         if (a < b) {
-            if (a != 0) {
-               return;
-            }
-         } else if (b != 0) {
-            return;
-         }
-      } else if (b > c) {
-         if (b != 15) {
-            return;
-         }
-      } else if (a != 15) {
-         return;
+      if (condition ? (a < b ? a == 0 : b == 0) : (b > c ? b == 15 : a == 15)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test4(boolean condition, int a, int b, int c) {
-      label22: {
-         label21: {
-            if (condition) {
-               if (a + c <= b) {
-                  break label21;
-               }
-            } else if (a >= b + c) {
-               break label21;
-            }
-
-            if (a >= b) {
-               return;
-            }
-            break label22;
-         }
-
-         if (b <= c) {
-            return;
-         }
+      if ((condition ? a + c > b : a < b + c) ? a < b : b > c) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test5(boolean condition, int a, int b, int c) {
-      label27: {
-         label26: {
-            if (condition) {
-               if (a + c <= b) {
-                  break label26;
-               }
-            } else if (a >= b + c) {
-               break label26;
-            }
-
-            if (a < b) {
-               if (a != 0) {
-                  return;
-               }
-            } else if (b != 0) {
-               return;
-            }
-            break label27;
-         }
-
-         if (b <= c) {
-            return;
-         }
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a == 0 : b == 0) : b > c) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test6(boolean condition, int a, int b, int c) {
-      label27: {
-         label26: {
-            if (condition) {
-               if (a + c <= b) {
-                  break label26;
-               }
-            } else if (a >= b + c) {
-               break label26;
-            }
-
-            if (a >= b) {
-               return;
-            }
-            break label27;
-         }
-
-         if (b > c) {
-            if (b != 15) {
-               return;
-            }
-         } else if (a != 15) {
-            return;
-         }
+      if ((condition ? a + c > b : a < b + c) ? a < b : (b > c ? b == 15 : a == 15)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test7(boolean condition, int a, int b, int c) {
-      label32: {
-         label31: {
-            if (condition) {
-               if (a + c <= b) {
-                  break label31;
-               }
-            } else if (a >= b + c) {
-               break label31;
-            }
-
-            if (a < b) {
-               if (a != 0) {
-                  return;
-               }
-            } else if (b != 0) {
-               return;
-            }
-            break label32;
-         }
-
-         if (b > c) {
-            if (b != 15) {
-               return;
-            }
-         } else if (a != 15) {
-            return;
-         }
+      if ((condition ? a + c > b : a < b + c) ? (a < b ? a == 0 : b == 0) : (b > c ? b == 15 : a == 15)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8(boolean condition, int a, int b, int c) {
-      if (a != b && b != c) {
-         if (a > b && b > c) {
-            if (a >= b + c || a <= 3 * c) {
-               return;
-            }
-         } else if (!condition) {
-            return;
-         }
-      } else if (a == b) {
-         return;
+      if (a != b && b != c ? (a > b && b > c ? a < b + c && a > 3 * c : condition) : a != b) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 
    public void test8b(boolean condition, int a, int b, int c) {
-      if (a == b && b == c) {
-         if (condition) {
-            return;
-         }
-      } else if (a > b && b > c) {
-         if (a >= b + c || a <= 3 * c) {
-            return;
-         }
-      } else if (!condition) {
-         return;
+      if (a == b && b == c ? !condition : (a > b && b > c ? a < b + c && a > 3 * c : condition)) {
+         System.out.println(1);
       }
-
-      System.out.println(1);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestIfTernary2.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,64 +2,20 @@
 
 public class TestIfTernary2 {
    public boolean test(Object a1, Object a2, Object b1, Object b2) {
-      if (a1 == null) {
-         if (b1 != null) {
-            return false;
-         }
-      } else if (!b2.equals(b1)) {
-         return false;
-      }
-
-      if (a2 == null) {
-         if (b2 == null) {
-            return true;
-         }
-      } else if (b1.equals(a1)) {
-         return true;
-      }
-
-      return false;
+      return (a1 == null ? b1 == null : b2.equals(b1)) && (a2 == null ? b2 == null : b1.equals(a1));
    }
 
    public String test1(Object a1, Object a2, Object b1, Object b2) {
-      if (a1 == null) {
-         if (b1 != null) {
-            return "3";
-         }
-      } else if (b2 != null) {
+      if (a1 == null ? b1 == null : b2 == null) {
+         return (a2 == null ? b2 != null : b1 != null) ? "2" : "1";
+      } else {
          return "3";
       }
-
-      if (a2 == null) {
-         if (b2 == null) {
-            return "1";
-         }
-      } else if (b1 == null) {
-         return "1";
-      }
-
-      return "2";
    }
 
    public void test2(Object a1, Object a2, Object b1, Object b2) {
-      label27: {
-         if (a1 == null) {
-            if (b1 != null) {
-               break label27;
-            }
-         } else if (b2 != null) {
-            break label27;
-         }
-
-         label19: {
-            if (a2 == null) {
-               if (b2 != null) {
-                  break label19;
-               }
-            } else if (b1 != null) {
-               break label19;
-            }
-
+      if (a1 == null ? b1 == null : b2 == null) {
+         if (a2 == null ? b2 == null : b1 == null) {
             System.out.println(1);
          }
 
@@ -70,22 +26,16 @@
    }
 
    public String test3(Object a1, Object a2, Object b1, Object b2) {
-      if (a1 == null) {
-         if (b1 != null) {
-            return "3";
+      if (a1 == null ? b1 == null : b2 == null) {
+         System.out.println(2);
+
+         while(a1 == a2) {
+            a1 = a2.toString();
          }
-      } else if (b2 != null) {
-         return "3";
-      }
 
-      System.out.println(2);
-
-      while(a1 == a2) {
-         a1 = a2.toString();
-      }
-
-      if (b2 == null) {
-         System.out.println("hello");
+         if (b2 == null) {
+            System.out.println("hello");
+         }
       }
 
       return "3";
gen_diffs.py pkg/TestIfTernary3.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,15 +2,7 @@
 
 public class TestIfTernary3 {
    public void test(boolean condition, int a, int b) {
-      label14: {
-         if (condition) {
-            if ("" + a != "1") {
-               break label14;
-            }
-         } else if ("" + b != "4") {
-            break label14;
-         }
-
+      if (condition ? "" + a == "1" : "" + b == "4") {
          System.out.println(1);
       }
 
gen_diffs.py pkg/TestIfTernaryReturn.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,15 +2,7 @@
 
 public class TestIfTernaryReturn {
    public int test(boolean condition, int a, int b) {
-      if (condition) {
-         if (a < b) {
-            return 1;
-         }
-      } else if (b > a) {
-         return 1;
-      }
-
-      return -1;
+      return (condition ? a >= b : b <= a) ? -1 : 1;
    }
 
    public int test1(boolean condition, int a, int b) {
gen_diffs.py pkg/TestIllegalMethodNames.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,20 +1,20 @@
 package pkg;
 
 public class TestIllegalMethodNames {
-   public void _I_V/* $FF was: (I)V*/(int var1) {
+   public void _I_V/* $QF was: (I)V*/(int var1) {
       this.()V();
       System.out.println(this.(I)Z(var1));
    }
 
-   public void __V/* $FF was: ()V*/() {
+   public void __V/* $QF was: ()V*/() {
       System.out.println(this.()I());
    }
 
-   public int __I/* $FF was: ()I*/() {
+   public int __I/* $QF was: ()I*/() {
       return 13;
    }
 
-   public boolean _I_Z/* $FF was: (I)Z*/(int var1) {
+   public boolean _I_Z/* $QF was: (I)Z*/(int var1) {
       return var1 <= this.()I();
    }
 
gen_diffs.py pkg/TestInfiniteLoop.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -59,7 +59,6 @@
          while(true) {
          }
       }
-
    }
 
    public void testSuccessor4(int i) {
gen_diffs.py pkg/TestInlineNoSuccessor.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -16,7 +16,7 @@
             System.out.println(0);
             if (arg.startsWith("--aa")) {
                if (++i >= args.length) {
-                  return new String[0];
+                  break;
                }
 
                System.out.println(1);
gen_diffs.py pkg/TestInlineSwitchExpression1.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -11,7 +11,6 @@
          case WEST -> Direction.EAST;
          case UP -> Direction.DOWN;
          case DOWN -> Direction.UP;
-         default -> throw new IncompatibleClassChangeError();
       });
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestInlineSwitchExpression3.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -7,7 +7,6 @@
       System.out.println(switch(direction) {
          case NORTH, EAST, UP -> -1;
          case SOUTH, WEST, DOWN -> 1;
-         default -> throw new IncompatibleClassChangeError();
       });
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestInlineSwitchExpression6.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -16,6 +16,5 @@
                var10000 = 2;
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestInstanceStaticInvoke.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -13,7 +13,6 @@
    }
 
    public void test2() {
-      TestInstanceStaticInvoke var10000 = this.inst;
       method();
    }
 
gen_diffs.py pkg/TestIntBoolMerge.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -4,7 +4,7 @@
    public void test() {
       int i = 0;
       System.out.println(i);
-      i = 1;
-      System.out.println((boolean)i);
+      boolean ix = true;
+      System.out.println(ix);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestIntBoolMergeNoDebug.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -3,8 +3,8 @@
 public class TestIntBoolMergeNoDebug {
    public void test() {
       byte var1 = 0;
-      System.out.println(var1);
-      var1 = 1;
-      System.out.println((boolean)var1);
+      System.out.println((int)var1);
+      boolean var2 = true;
+      System.out.println(var2);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestIterationOverGenericsWithoutLvt.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -20,7 +20,6 @@
       for(List var3 : var1) {
          this.test2(var3);
       }
-
    }
 
    public <T extends Collection<?>> void test3(Collection<? extends T> var1) {
@@ -29,7 +28,6 @@
             System.out.println(var5);
          }
       }
-
    }
 
    public <T extends Comparable<T>> void test4(Iterable<T> var1) {
gen_diffs.py pkg/TestIterationOverGenericsWithoutLvt1.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -7,6 +7,5 @@
       for(Object var3 : var1) {
          System.out.println(var3.hashCode());
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestItrLoop.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -10,6 +10,5 @@
       for(String s : this.list) {
          System.out.println(s);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestJADNaming.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -15,6 +15,5 @@
       boolean flag4 = false;
       if (flag1 != flag2 && flag3 == flag4) {
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestKotlinConstructorKt.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -28,7 +28,7 @@
             throw new NullPointerException("null cannot be cast to non-null type kotlin.String");
          }
 
-         var10000./* $FF: Unable to resugar constructor */<init>(it);
+         var10000./* $QF: Unable to resugar constructor */<init>(it);
          destination$iv$iv.add(var10000);
       }
 
gen_diffs.py pkg/TestKotlinEnumWhen.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -27,7 +27,6 @@
          case THIRD:
             System.out.println("third!");
       }
-
    }
 
    public final void testExpression() {
@@ -47,7 +46,7 @@
       }
 
       String var1 = var10000;
-      System.out.println(var1);
+      System.out.println((Object)var1);
    }
 
    public final void testAnotherEnum() {
@@ -62,7 +61,6 @@
          case HIDDEN:
             System.out.println("hidden " + level);
       }
-
    }
 
    public final void testConsecutive() {
@@ -87,7 +85,6 @@
          case THIRD:
             System.out.println("third, again!");
       }
-
    }
 
    public final void testConsecutiveMixed() {
@@ -113,14 +110,13 @@
          case THIRD:
             System.out.println("third!");
       }
-
    }
 
    private static final DeprecationLevel testAnotherEnum$getLevel() {
       throw new Exception();
    }
 
-   private static final DeprecationLevel testConsecutiveMixed$getLevel_0/* $FF was: testConsecutiveMixed$getLevel-0*/() {
+   private static final DeprecationLevel testConsecutiveMixed$getLevel_0/* $QF was: testConsecutiveMixed$getLevel-0*/() {
       throw new Exception();
    }
 
gen_diffs.py pkg/TestLabeledBreaks.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,6 @@
       if (a != 1) {
          System.out.println("2");
       }
-
    }
 
    public void test1(int a) {
gen_diffs.py pkg/TestLambdaGenericCall.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -8,7 +8,7 @@
 
    public void test(List<String> list, Map<String, Number[]> map) {
       list.forEach(s -> {
-         Number[] numbers = map.get(s);
+         Number[] numbers = (Number[])map.get(s);
          System.out.println(numbers[0]);
       });
    }
@@ -19,7 +19,7 @@
 
    public void test(List<String> list) {
       list.forEach(s -> {
-         Number[] numbers = this.map.get(s);
+         Number[] numbers = (Number[])this.map.get(s);
          System.out.println(numbers[0]);
       });
    }
gen_diffs.py pkg/TestLocalScopeClash.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -15,8 +15,8 @@
       i *= 2;
       i += 2;
       this.acceptInt(i);
-      i = a & a & b;
-      i ^= i || b;
-      this.acceptBoolean((boolean)i);
+      boolean var10 = a & a & b;
+      var10 ^= var10 || b;
+      this.acceptBoolean(var10);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLocalScopes.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -13,6 +13,5 @@
       for(int j = 0; j < 10; ++j) {
          i += j;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLocalsNames.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -17,6 +17,5 @@
          long elapsed = System.currentTimeMillis() - start;
          System.out.println("took " + elapsed + "ms (" + elapsed / (long)files.length + "ms per dir)");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLocalVariableMerge.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -28,6 +28,5 @@
             System.out.println("z != c");
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLocalVariableMergeSwitch.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -16,6 +16,5 @@
                System.out.println("hi");
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLoopBreak.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,9 +2,12 @@
 
 public class TestLoopBreak {
    public void test(int i) {
-      while(i > 10 && ++i != 15) {
-         System.out.println(0);
+      while(i > 10) {
+         if (++i != 15) {
+            System.out.println(0);
+            continue;
+         }
+         break;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLoopBreak3.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -19,6 +19,5 @@
             }
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLoopBreak4.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -32,6 +32,5 @@
             }
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLoopFinally.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -57,180 +57,65 @@
       System.out.println("after");
    }
 
-   public int test3(int param1) {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot invoke "java.util.List.size()" because the return value of "org.jetbrains.java.decompiler.modules.decompiler.stats.Statement.getExprents()" is null
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.IfStatement.initExprents(IfStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.processStatement(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: iload 1
-      // 01: bipush 1
-      // 02: if_icmpne 11
-      // 05: bipush 1
-      // 06: istore 2
-      // 07: iload 1
-      // 08: bipush 3
-      // 09: if_icmpne 0f
-      // 0c: goto 5e
-      // 0f: iload 2
-      // 10: ireturn
-      // 11: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 14: ldc "Oops"
-      // 16: invokevirtual java/io/PrintStream.println (Ljava/lang/String;)V
-      // 19: iload 1
-      // 1a: bipush 23
-      // 1c: if_icmpne 2b
-      // 1f: bipush 1
-      // 20: istore 2
-      // 21: iload 1
-      // 22: bipush 3
-      // 23: if_icmpne 29
-      // 26: goto 5e
-      // 29: iload 2
-      // 2a: ireturn
-      // 2b: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 2e: ldc "Oops"
-      // 30: invokevirtual java/io/PrintStream.println (Ljava/lang/String;)V
-      // 33: iload 1
-      // 34: bipush 25
-      // 36: if_icmpne 45
-      // 39: bipush 1
-      // 3a: istore 2
-      // 3b: iload 1
-      // 3c: bipush 3
-      // 3d: if_icmpne 43
-      // 40: goto 5e
-      // 43: iload 2
-      // 44: ireturn
-      // 45: iload 1
-      // 46: bipush 3
-      // 47: if_icmpne 58
-      // 4a: goto 5e
-      // 4d: astore 3
-      // 4e: iload 1
-      // 4f: bipush 3
-      // 50: if_icmpne 56
-      // 53: goto 5e
-      // 56: aload 3
-      // 57: athrow
-      // 58: iload 1
-      // 59: bipush 45
-      // 5b: if_icmplt 00
-      // 5e: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 61: bipush 5
-      // 62: invokevirtual java/io/PrintStream.print (I)V
-      // 65: bipush 1
-      // 66: ireturn
+   public int test3(int x) {
+      do {
+         try {
+            if (x == 1) {
+               return 1;
+            }
+
+            System.out.println("Oops");
+            if (x == 23) {
+               return 1;
+            }
+
+            System.out.println("Oops");
+            if (x == 25) {
+               return 1;
+            }
+         } finally {
+            if (x == 3) {
+               break;
+            }
+         }
+      } while(x < 45);
+
+      System.out.print(5);
+      return 1;
    }
 
-   public int test4(int param1) {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot invoke "java.util.List.size()" because the return value of "org.jetbrains.java.decompiler.modules.decompiler.stats.Statement.getExprents()" is null
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.IfStatement.initExprents(IfStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.processStatement(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: iload 1
-      // 01: bipush 25
-      // 03: if_icmpge 12
-      // 06: bipush 5
-      // 07: istore 2
-      // 08: iload 1
-      // 09: bipush 3
-      // 0a: if_icmple 10
-      // 0d: goto 2b
-      // 10: iload 2
-      // 11: ireturn
-      // 12: iload 1
-      // 13: bipush 3
-      // 14: if_icmple 25
-      // 17: goto 2b
-      // 1a: astore 3
-      // 1b: iload 1
-      // 1c: bipush 3
-      // 1d: if_icmple 23
-      // 20: goto 2b
-      // 23: aload 3
-      // 24: athrow
-      // 25: iload 1
-      // 26: bipush 45
-      // 28: if_icmplt 00
-      // 2b: bipush 1
-      // 2c: ireturn
+   public int test4(int x) {
+      do {
+         try {
+            if (x < 25) {
+               return 5;
+            }
+         } finally {
+            if (x > 3) {
+               return 1;
+            }
+         }
+      } while(x < 45);
+
+      return 1;
    }
 
-   public int test5(int param1) {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot invoke "java.util.List.size()" because the return value of "org.jetbrains.java.decompiler.modules.decompiler.stats.Statement.getExprents()" is null
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.IfStatement.initExprents(IfStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.initStatementExprents(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.processStatement(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: iload 1
-      // 01: bipush 25
-      // 03: if_icmpge 12
-      // 06: bipush 5
-      // 07: istore 2
-      // 08: iload 1
-      // 09: istore 3
-      // 0a: iload 1
-      // 0b: bipush 3
-      // 0c: if_icmple 33
-      // 0f: goto 31
-      // 12: iload 1
-      // 13: istore 3
-      // 14: iload 1
-      // 15: bipush 3
-      // 16: if_icmple 2b
-      // 19: goto 31
-      // 1c: astore 4
-      // 1e: iload 1
-      // 1f: istore 3
-      // 20: iload 1
-      // 21: bipush 3
-      // 22: if_icmple 28
-      // 25: goto 31
-      // 28: aload 4
-      // 2a: athrow
-      // 2b: iload 1
-      // 2c: bipush 45
-      // 2e: if_icmplt 00
-      // 31: bipush 1
-      // 32: ireturn
-      // 33: iload 2
-      // 34: iload 3
-      // 35: iadd
-      // 36: ireturn
+   public int test5(int x) {
+      do {
+         try {
+            if (x < 25) {
+               int var2 = 5;
+               byte var3;
+               return var2 + var3;
+            }
+         } finally {
+            if (x > 3) {
+               return 1;
+            }
+         }
+      } while(x < 45);
+
+      return 1;
    }
 
    public void emptyInnerFinally() {
@@ -253,6 +138,8 @@
       }
    }
 
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    public void testConditionalBreakInFinally() {
       int a = 5;
       if (a != 886) {
@@ -273,56 +160,20 @@
    }
 
    public void loopInFinally() {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot invoke "java.lang.Comparable.compareTo(Object)" because the return value of "java.util.function.Function.apply(Object)" is null
-      //   at java.base/java.util.Comparator.lambda$comparing$77a9974f$1(Comparator.java:473)
-      //   at java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)
-      //   at java.base/java.util.TimSort.sort(TimSort.java:220)
-      //   at java.base/java.util.Arrays.sort(Arrays.java:1307)
-      //   at java.base/java.util.ArrayList.sort(ArrayList.java:1721)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.calcPostDominators(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.findGeneralStatement(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.processStatement(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.processStatement(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.parseGraph(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: bipush 1
-      // 01: istore 1
-      // 02: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 05: iload 1
-      // 06: invokevirtual java/io/PrintStream.println (Z)V
-      // 09: sipush 15080
-      // 0c: istore 2
-      // 0d: iload 2
-      // 0e: sipush -14704
-      // 11: if_icmple 19
-      // 14: bipush 0
-      // 15: istore 3
-      // 16: goto 0d
-      // 19: return
-      // 1a: astore 4
-      // 1c: sipush 15080
-      // 1f: istore 5
-      // 21: iload 5
-      // 23: sipush -14704
-      // 26: if_icmple 2f
-      // 29: bipush 0
-      // 2a: istore 6
-      // 2c: goto 21
-      // 2f: return
-      // 30: astore 7
-      // 32: sipush 15080
-      // 35: istore 8
-      // 37: iload 8
-      // 39: sipush -14704
-      // 3c: if_icmple 45
-      // 3f: bipush 0
-      // 40: istore 9
-      // 42: goto 37
-      // 45: aload 7
-      // 47: athrow
+      boolean var1 = true;
+
+      try {
+         try {
+            System.out.println(var1);
+         } finally {
+            return;
+         }
+      } finally {
+         short var18 = 15080;
+
+         while(var18 > -14704) {
+            boolean var9 = false;
+         }
+      }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLoopMerging2.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -12,6 +12,5 @@
       for(int ix = 0; ix < 256; ++ix) {
          System.out.println(array[ix]);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLoopReturn.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -29,14 +29,12 @@
             return;
          }
       }
-
    }
 
    public void test2(boolean b) {
       while(!b) {
          System.out.println(1);
       }
-
    }
 
    public void test2a(boolean b) {
@@ -45,7 +43,6 @@
       while(!b) {
          System.out.println(1);
       }
-
    }
 
    public void test2b(boolean b) {
gen_diffs.py pkg/TestLVT.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -25,7 +25,6 @@
          String spam = scope1a + scope2 + scope2a + i + noise;
          System.out.println(spam);
       }
-
    }
 
    public void methoda() {
gen_diffs.py pkg/TestLVTComplex.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -76,7 +76,6 @@
                }
             }
          }
-
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestLVTScoping.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -19,7 +19,6 @@
          String a = "NAY";
          System.out.println(a);
       }
-
    }
 
    public static void method3() {
@@ -30,6 +29,5 @@
          String a = "NAY";
          System.out.println(a);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestMethodParamsNoLvt.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,13 +2,13 @@
 
 public class TestMethodParamsNoLvt {
    public void foo(int param0, String param1) {
-      System.out.print(var1);
-      System.out.println(var2);
+      System.out.print(param0);
+      System.out.println(param1);
    }
 
    public static void bar(int param0, int param1, String param2, int var3) {
-      System.out.print(var0);
-      System.out.print(var1);
-      System.out.println(var2);
+      System.out.print(param0);
+      System.out.print(param1);
+      System.out.println(param2);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestMissingConstructorCallBad.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -28,6 +28,5 @@
          new TestMissingConstructorCallBad();
       } catch (Throwable var2) {
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestMissingConstructorCallGood.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -14,6 +14,5 @@
          new TestMissingConstructorCallGood();
       } catch (Throwable var2) {
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestMixedCompoundAssignment.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -59,27 +59,23 @@
       for(int j = 0; j < i; ++j) {
          holder[j] = (int)((double)holder[j] + inc);
       }
-
    }
 
    public void testArrayIntLong(int[] holder, int i, long inc) {
       for(int j = 0; j < i; ++j) {
          holder[j] = (int)((long)holder[j] + inc);
       }
-
    }
 
    public void testArrayDoubleInt(double[] holder, int i, int inc) {
       for(int j = 0; j < i; ++j) {
          holder[j] += (double)inc;
       }
-
    }
 
    public void testNestedArrayByteFloatLongDouble(byte[] outer, float[] holder, long[] inner, int i, double inc) {
       for(int j = 0; j < i; ++j) {
          outer[i + ~j] = (byte)((int)((float)outer[i + ~j] + (holder[j] -= (float)(inner[j * 3 % i] = (long)((double)inner[j * 3 % i] + inc)))));
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestMultiBoolean.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -17,6 +17,5 @@
       if (a && a && a || a || a) {
          System.out.println(4);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestMultipleStaticBlocks.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -13,6 +13,5 @@
       if (value > 4) {
          i = 2;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestNamedSuspendFun2Kt.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -25,12 +25,12 @@
    @Nullable
    public static final Object foo2(@NotNull Continuation<? super Integer> var0) {
       Continuation $continuation;
-      label381: {
+      label261: {
          if (var0 instanceof <undefinedtype>) {
             $continuation = (<undefinedtype>)var0;
             if (($continuation.label & -2147483648) != 0) {
                $continuation.label -= Integer.MIN_VALUE;
-               break label381;
+               break label261;
             }
          }
 
@@ -50,9 +50,9 @@
       }
 
       Object var4;
-      label403: {
+      label279: {
          Throwable var10000;
-         label370: {
+         label250: {
             Object $result = $continuation.result;
             var4 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
             switch($continuation.label) {
@@ -66,18 +66,18 @@
                   } catch (Throwable var19) {
                      var10000 = var19;
                      boolean var10001 = false;
-                     break label370;
+                     break label250;
                   }
 
                   try {
                      int x = ((Number)var10000).intValue();
                      if (x == 0) {
-                        break label403;
+                        break label279;
                      }
                   } catch (Throwable var17) {
                      var10000 = var17;
                      boolean var25 = false;
-                     break label370;
+                     break label250;
                   }
 
                   $continuation.label = 3;
@@ -116,7 +116,7 @@
                try {
                   int var22 = ((Number)var10000).intValue();
                   if (var22 == 0) {
-                     break label403;
+                     break label279;
                   }
                } catch (Throwable var20) {
                   var10000 = var20;
gen_diffs.py pkg/TestNestedLoops.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -14,12 +14,9 @@
 
          for(String s : list) {
             for(int j = 0; j < 20; ++j) {
-               while(true) {
+               do {
                   s.substring(j);
-                  if (s.length() >= j) {
-                     break;
-                  }
-               }
+               } while(s.length() >= j);
             }
          }
 
@@ -35,12 +32,9 @@
          if (i < 10) {
             for(String s : list) {
                for(int j = 0; j < 20; ++j) {
-                  while(true) {
+                  do {
                      s.substring(j);
-                     if (s.length() >= j) {
-                        break;
-                     }
-                  }
+                  } while(s.length() >= j);
                }
             }
 
gen_diffs.py pkg/TestNestedTernaryAssign.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -13,7 +13,6 @@
       } else {
          4;
       }
-
    }
 
    public void test2(boolean b1, boolean b2, boolean b3) {
@@ -22,7 +21,6 @@
       } else {
          String var5 = b3 ? "4" : "44";
       }
-
    }
 
    public void test3(boolean b1, boolean b2, int a, int b) {
@@ -31,65 +29,11 @@
    }
 
    public void test4(boolean b1, int a, int b) {
-      byte var10000;
-      label17: {
-         label16: {
-            if (b1) {
-               if (a > b) {
-                  break label16;
-               }
-            } else if (a < b) {
-               break label16;
-            }
-
-            var10000 = 16;
-            break label17;
-         }
-
-         var10000 = 0;
-      }
-
-      accept(var10000);
+      accept((b1 ? a <= b : a >= b) ? 16 : 0);
    }
 
    public void test5(boolean b1, boolean b2, int a, int b) {
-      byte var10000;
-      label31: {
-         label30: {
-            if (b1) {
-               if (a > b) {
-                  break label30;
-               }
-            } else if (a < b) {
-               break label30;
-            }
-
-            var10000 = 16;
-            break label31;
-         }
-
-         var10000 = 0;
-      }
-
-      byte var10001;
-      label23: {
-         label22: {
-            if (b2) {
-               if (a > b) {
-                  break label22;
-               }
-            } else if (a < b) {
-               break label22;
-            }
-
-            var10001 = 16;
-            break label23;
-         }
-
-         var10001 = 0;
-      }
-
-      accept(var10000, var10001);
+      accept((b1 ? a <= b : a >= b) ? 16 : 0, (b2 ? a <= b : a >= b) ? 16 : 0);
    }
 
    private static void accept(int i) {
gen_diffs.py pkg/TestNestedTernaryCondition.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,19 +2,10 @@
 
 public class TestNestedTernaryCondition {
    public void test(boolean bl, int a, int b) {
-      label23: {
-         if (bl) {
-            if (a > b) {
-               break label23;
-            }
-         } else if (a < b) {
-            break label23;
-         }
-
-         boolean var10000 = true;
-         return;
+      if (bl ? a <= b : a >= b) {
+         boolean var5 = true;
+      } else {
+         boolean var10000 = false;
       }
-
-      boolean var5 = false;
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestNoUse.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,9 +5,9 @@
 
    public void test(boolean var1, int var2) {
       int var3 = this.a[0]++;
-      int var10000 = this.a[1]++;
+      this.a[1]++;
       if (var1) {
-         var10000 = this.a[2]++;
+         this.a[2]++;
       }
 
       System.out.println(var3);
@@ -25,9 +25,9 @@
 
    public void testNeg(boolean var1, int var2) {
       int var3 = this.a[0]++;
-      int var10000 = this.a[1]--;
+      this.a[1]--;
       if (var1) {
-         var10000 = this.a[2]--;
+         this.a[2]--;
       }
 
       System.out.println(var3);
@@ -48,7 +48,7 @@
    }
 
    public void testUse(boolean var1, int var2) {
-      int var10000 = this.a[0]++;
+      this.a[0]++;
       int var4 = this.a[1]++;
       if (var1) {
          var4 = this.a[2]++;
gen_diffs.py pkg/TestObjectPhi.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,30 +2,13 @@
 
 public class TestObjectPhi {
    public Object example(boolean bool) {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.RuntimeException: invalid constant type: Ljava/lang/Object;
-      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.ConstExprent.toJava(ConstExprent.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent.toJava(AssignmentExprent.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.listToJava(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.BasicBlockStatement.toJava(BasicBlockStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.IfStatement.toJava(IfStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.jmpWrapper(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.SequenceStatement.toJava(SequenceStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement.toJava(RootStatement.java)
-      //  at org.jetbrains.java.decompiler.main.ClassWriter.methodToJava(ClassWriter.java)
-      //
-      // Bytecode:
-      // 0: ldc ""
-      // 2: astore 2
-      // 3: iload 1
-      // 4: ifeq c
-      // 7: aconst_null
-      // 8: astore 2
-      // 9: goto e
-      // c: aconst_null
-      // d: astore 2
-      // e: aload 2
-      // f: areturn
+      Object value = "";
+      if (bool) {
+         value = null;
+      } else {
+         value = null;
+      }
+
+      return value;
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatching.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,7 +5,6 @@
       if (obj instanceof String str) {
          System.out.println(str.length());
       }
-
    }
 
    public void testInverted(Object obj) {
@@ -14,14 +13,12 @@
       } else {
          System.out.println("Oh no");
       }
-
    }
 
    public void testCompound(Object obj) {
       if (obj instanceof String str && str.contains("hi")) {
          System.out.println(str.length());
       }
-
    }
 
    public void testSimpleLoop(Object obj) {
@@ -30,7 +27,6 @@
          System.out.println(str.length());
          obj = str.intern();
       }
-
    }
 
    public void testSimpleLoopUnused(Object obj) {
@@ -38,7 +34,6 @@
          String str = (String)obj;
          obj = obj.hashCode() + "";
       }
-
    }
 
    public void testInvertedLoop(Object obj) {
@@ -64,7 +59,6 @@
       while(obj instanceof String str && str.contains("hi")) {
          obj = str.substring(1);
       }
-
    }
 
    public boolean testReturn(Object obj) {
@@ -89,7 +83,6 @@
          obj = var4.substring(1);
          System.out.println(var4);
       }
-
    }
 
    public void testSimpleReturn(Object obj) {
@@ -113,6 +106,5 @@
       if (obj instanceof String str) {
          System.out.println(str.length());
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatching17.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,7 +5,6 @@
       if (obj instanceof String str) {
          System.out.println(str.length());
       }
-
    }
 
    public void testInverted(Object obj) {
@@ -14,14 +13,12 @@
       } else {
          System.out.println("Oh no");
       }
-
    }
 
    public void testCompound(Object obj) {
       if (obj instanceof String str && str.contains("hi")) {
          System.out.println(str.length());
       }
-
    }
 
    public void testSimpleLoop(Object obj) {
@@ -30,7 +27,6 @@
          System.out.println(str.length());
          obj = str.intern();
       }
-
    }
 
    public void testSimpleLoopUnused(Object obj) {
@@ -38,7 +34,6 @@
          String str = (String)obj;
          obj = obj.hashCode() + "";
       }
-
    }
 
    public void testInvertedLoop(Object obj) {
@@ -64,7 +59,6 @@
       while(obj instanceof String str && str.contains("hi")) {
          obj = str.substring(1);
       }
-
    }
 
    public boolean testReturn(Object obj) {
@@ -89,7 +83,6 @@
          obj = var3.substring(1);
          System.out.println(var3);
       }
-
    }
 
    public void testSimpleReturn(Object obj) {
@@ -113,6 +106,5 @@
       if (obj instanceof String str) {
          System.out.println(str.length());
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatching17Fake.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -9,21 +9,18 @@
       if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void test1A(Object obj) {
       if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void test1B(Object obj) {
       if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void test2(Object obj) {
@@ -34,7 +31,6 @@
       if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void testClash(Object obj) {
@@ -44,7 +40,6 @@
          int s = 0;
          System.out.println(s);
       }
-
    }
 
    public void test3(Object obj) {
@@ -59,6 +54,5 @@
       if (i != null) {
          System.out.println(i);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatching17FakeLoops.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,6 @@
          String s = (String)o;
          System.out.println(s.length());
       }
-
    }
 
    void test2(Object o) {
@@ -15,7 +14,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3(Object o) {
@@ -23,7 +21,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3B(Object o) {
@@ -104,7 +101,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3BSwap(Object o) {
@@ -134,7 +130,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test4BSwap(Object o) {
@@ -183,6 +178,5 @@
       if (i != null) {
          System.out.println(i);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatching17FakeLoopsInverted.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,6 @@
          String s = (String)o;
          System.out.println(s.length());
       }
-
    }
 
    void test2(Object o) {
@@ -23,7 +22,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3B(Object o) {
@@ -45,24 +43,12 @@
          String x = (String)o;
          break;
       }
-
    }
 
    void test4x(Object o) {
-      while(true) {
-         label14: {
-            if (o.hashCode() >= 0) {
-               if (!(o instanceof String)) {
-                  break label14;
-               }
-
-               String x = (String)o;
-               if (x.isEmpty()) {
-                  break label14;
-               }
-            }
-
-            return;
+      while(o.hashCode() >= 0) {
+         if (o instanceof String x && !x.isEmpty()) {
+            break;
          }
 
          String s = (String)o;
@@ -85,26 +71,16 @@
    }
 
    void test4xB(Object o) {
-      while(true) {
-         label14: {
-            if (o.hashCode() >= 0) {
-               if (!(o instanceof String)) {
-                  break label14;
-               }
-
-               String x = (String)o;
-               if (x.isEmpty()) {
-                  break label14;
-               }
-            }
-
-            System.out.println("bye");
-            return;
-         }
-
-         String s = (String)o;
-         System.out.println(s);
-      }
+      while(o.hashCode() >= 0) {
+         if (o instanceof String x && !x.isEmpty()) {
+            break;
+         }
+
+         String s = (String)o;
+         System.out.println(s);
+      }
+
+      System.out.println("bye");
    }
 
    void test3Swap(Object o) {
@@ -112,7 +88,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3BSwap(Object o) {
@@ -143,7 +118,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test4BSwap(Object o) {
@@ -227,27 +201,17 @@
    }
 
    void test4xA(Object o) {
-      while(true) {
-         label14: {
-            if (o.hashCode() >= 0) {
-               if (!(o instanceof String)) {
-                  break label14;
-               }
-
-               String x = (String)o;
-               if (x.isEmpty()) {
-                  break label14;
-               }
-            }
-
-            String u = (String)o;
-            System.out.println(u.hashCode() + u.length());
-            return;
-         }
-
-         String s = (String)o;
-         System.out.println(s);
-      }
+      while(o.hashCode() >= 0) {
+         if (o instanceof String x && !x.isEmpty()) {
+            break;
+         }
+
+         String s = (String)o;
+         System.out.println(s);
+      }
+
+      String u = (String)o;
+      System.out.println(u.hashCode() + u.length());
    }
 
    void test3ASwap(Object o) {
gen_diffs.py pkg/TestPatternMatching17FakeNew.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,22 +5,19 @@
       if (o instanceof String s) {
          System.out.println(s.length());
       }
-
    }
 
    void test2(Object o) {
-      String x;
-      if (o instanceof String s) {
+      if (o instanceof String x) {
+         String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3(Object o) {
       if (o.hashCode() < 0 || o instanceof String s) {
          System.out.println(s);
       }
-
    }
 
    void test3B(Object o) {
@@ -101,7 +98,6 @@
       if (o instanceof String s || o.hashCode() < 0) {
          System.out.println(s);
       }
-
    }
 
    void test3BSwap(Object o) {
@@ -124,11 +120,10 @@
    }
 
    void test4xSwap(Object o) {
-      String x;
-      if (o instanceof String s && !x.isEmpty() || o.hashCode() < 0) {
+      if (o instanceof String x && !x.isEmpty() || o.hashCode() < 0) {
+         String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test4BSwap(Object o) {
@@ -147,8 +142,8 @@
    }
 
    void test4xBSwap(Object o) {
-      String x;
-      if (o instanceof String s && !x.isEmpty() || o.hashCode() < 0) {
+      if (o instanceof String x && !x.isEmpty() || o.hashCode() < 0) {
+         String s = (String)o;
          System.out.println(s);
       }
 
@@ -162,7 +157,6 @@
          int s = 0;
          System.out.println(s);
       }
-
    }
 
    public void testSet(Object obj) {
gen_diffs.py pkg/TestPatternMatchingAssign.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -6,6 +6,5 @@
          String var4 = "hello";
          System.out.println(var4);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatchingFake.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -9,21 +9,18 @@
       if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void test1A(Object obj) {
       if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void test1B(Object obj) {
       if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void test2(Object obj) {
@@ -34,7 +31,6 @@
       if (obj instanceof Integer i) {
          System.out.println(1 + i);
       }
-
    }
 
    public void testClash(Object obj) {
@@ -44,7 +40,6 @@
          int s = 0;
          System.out.println(s);
       }
-
    }
 
    public void test3(Object obj) {
@@ -59,6 +54,5 @@
       if (i != null) {
          System.out.println(i);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatchingFakeLoops.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,6 @@
          String s = (String)o;
          System.out.println(s.length());
       }
-
    }
 
    void test2(Object o) {
@@ -15,7 +14,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3(Object o) {
@@ -23,7 +21,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3B(Object o) {
@@ -104,7 +101,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3BSwap(Object o) {
@@ -134,7 +130,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test4BSwap(Object o) {
@@ -183,6 +178,5 @@
       if (i != null) {
          System.out.println(i);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatchingFakeLoopsInverted.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,6 @@
          String s = (String)o;
          System.out.println(s.length());
       }
-
    }
 
    void test2(Object o) {
@@ -23,7 +22,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3B(Object o) {
@@ -45,24 +43,12 @@
          String x = (String)o;
          break;
       }
-
    }
 
    void test4x(Object o) {
-      while(true) {
-         label14: {
-            if (o.hashCode() >= 0) {
-               if (!(o instanceof String)) {
-                  break label14;
-               }
-
-               String x = (String)o;
-               if (x.isEmpty()) {
-                  break label14;
-               }
-            }
-
-            return;
+      while(o.hashCode() >= 0) {
+         if (o instanceof String x && !x.isEmpty()) {
+            break;
          }
 
          String s = (String)o;
@@ -85,26 +71,16 @@
    }
 
    void test4xB(Object o) {
-      while(true) {
-         label14: {
-            if (o.hashCode() >= 0) {
-               if (!(o instanceof String)) {
-                  break label14;
-               }
-
-               String x = (String)o;
-               if (x.isEmpty()) {
-                  break label14;
-               }
-            }
-
-            System.out.println("bye");
-            return;
-         }
-
-         String s = (String)o;
-         System.out.println(s);
-      }
+      while(o.hashCode() >= 0) {
+         if (o instanceof String x && !x.isEmpty()) {
+            break;
+         }
+
+         String s = (String)o;
+         System.out.println(s);
+      }
+
+      System.out.println("bye");
    }
 
    void test3Swap(Object o) {
@@ -112,7 +88,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3BSwap(Object o) {
@@ -143,7 +118,6 @@
          String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test4BSwap(Object o) {
@@ -227,27 +201,17 @@
    }
 
    void test4xA(Object o) {
-      while(true) {
-         label14: {
-            if (o.hashCode() >= 0) {
-               if (!(o instanceof String)) {
-                  break label14;
-               }
-
-               String x = (String)o;
-               if (x.isEmpty()) {
-                  break label14;
-               }
-            }
-
-            String u = (String)o;
-            System.out.println(u.hashCode() + u.length());
-            return;
-         }
-
-         String s = (String)o;
-         System.out.println(s);
-      }
+      while(o.hashCode() >= 0) {
+         if (o instanceof String x && !x.isEmpty()) {
+            break;
+         }
+
+         String s = (String)o;
+         System.out.println(s);
+      }
+
+      String u = (String)o;
+      System.out.println(u.hashCode() + u.length());
    }
 
    void test3ASwap(Object o) {
gen_diffs.py pkg/TestPatternMatchingFakeNew.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,22 +5,19 @@
       if (o instanceof String s) {
          System.out.println(s.length());
       }
-
    }
 
    void test2(Object o) {
-      String x;
-      if (o instanceof String s) {
+      if (o instanceof String x) {
+         String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test3(Object o) {
       if (o.hashCode() < 0 || o instanceof String s) {
          System.out.println(s);
       }
-
    }
 
    void test3B(Object o) {
@@ -101,7 +98,6 @@
       if (o instanceof String s || o.hashCode() < 0) {
          System.out.println(s);
       }
-
    }
 
    void test3BSwap(Object o) {
@@ -124,11 +120,10 @@
    }
 
    void test4xSwap(Object o) {
-      String x;
-      if (o instanceof String s && !x.isEmpty() || o.hashCode() < 0) {
+      if (o instanceof String x && !x.isEmpty() || o.hashCode() < 0) {
+         String s = (String)o;
          System.out.println(s);
       }
-
    }
 
    void test4BSwap(Object o) {
@@ -147,8 +142,8 @@
    }
 
    void test4xBSwap(Object o) {
-      String x;
-      if (o instanceof String s && !x.isEmpty() || o.hashCode() < 0) {
+      if (o instanceof String x && !x.isEmpty() || o.hashCode() < 0) {
+         String s = (String)o;
          System.out.println(s);
       }
 
@@ -162,7 +157,6 @@
          int s = 0;
          System.out.println(s);
       }
-
    }
 
    public void testSet(Object obj) {
gen_diffs.py pkg/TestPatternMatchingLocalCapture.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -3,12 +3,11 @@
 public class TestPatternMatchingLocalCapture {
    public void test(Object o) {
       if (o instanceof String s) {
-         Object var10001 = new Object() {
+         new Object() {
             void test() {
                System.out.println(s);
             }
          };
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPatternMatchingMerge.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -6,7 +6,6 @@
       if (obj instanceof String) {
          s = (String)obj;
       }
-
    }
 
    public void testNoInit(Object obj) {
gen_diffs.py pkg/TestPatternMatchingStatic.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,10 +2,9 @@
 
 public class TestPatternMatchingStatic {
    public void test(Object o) {
-      if (o instanceof TestPatternMatchingStatic var10000) {
+      if (o instanceof TestPatternMatchingStatic) {
          method();
       }
-
    }
 
    public static void method() {
gen_diffs.py pkg/TestPiDivision.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,6 +2,6 @@
 
 public class TestPiDivision {
    public double div(double val) {
-      return val / 180.0 / Math.PI;
+      return val / (180.0 / Math.PI);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestPPMMLoop.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,27 +5,23 @@
       while(++a > 0) {
          s = s + "a";
       }
-
    }
 
    public void test1(int a, String s) {
       while(a++ > 0) {
          s = s + "a";
       }
-
    }
 
    public void test2(int a, String s) {
       while(--a > 0) {
          s = s + "a";
       }
-
    }
 
    public void test3(int a, String s) {
       while(a-- > 0) {
          s = s + "a";
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestRecordPattern1.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,4 +1,6 @@
 package pkg;
+
+import java.lang.runtime.SwitchBootstraps;
 
 public class TestRecordPattern1 {
    void test(Object o) {
@@ -9,94 +11,56 @@
          int b = Integer.valueOf(var4);
          System.out.println(a + b);
       }
-
    }
 
    void test2(Object o) {
-      byte var3 = 0;
-
       switch(o) {
-         case null -> System.out.println("null");
-         case 0 -> {
+         case null:
+            System.out.println("null");
+            break;
+         case TestRecordPattern1.Point var8:
             int obj = $proxy$a((TestRecordPattern1.Point)o);
             int a = Integer.valueOf(obj);
             obj = $proxy$b((TestRecordPattern1.Point)o);
             int b = Integer.valueOf(obj);
             System.out.println(a + b);
-         }
-         default -> System.out.println("everything else");
-      };
+            break;
+         default:
+            System.out.println("everything else");
+      }
    }
 
-   int test3(Object param1) {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot read field "type" because "type2" is null
-      //  at org.jetbrains.java.decompiler.struct.gen.VarType.getCommonSupertype(VarType.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.SwitchHeadExprent.checkExprTypeBounds(SwitchHeadExprent.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor.checkTypeExprent(VarTypeProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor.lambda$processVarTypes$1(VarTypeProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.sforms.DirectGraph.iterateExprents(DirectGraph.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor.processVarTypes(VarTypeProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor.calculateVarTypes(VarTypeProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionsProcessor.setVarVersions(VarVersionsProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarProcessor.setVarVersions(VarProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: aload 1
-      // 01: astore 2
-      // 02: bipush 0
-      // 03: istore 3
-      // 04: aload 2
-      // 05: iload 3
-      // 06: invokedynamic typeSwitch (Ljava/lang/Object;I)I bsm=java/lang/runtime/SwitchBootstraps.typeSwitch (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; args=[ pkg/TestRecordPattern1$Point, pkg/TestRecordPattern1$Point, java/lang/Object ]
-      // 0b: tableswitch 106 -1 1 25 29 90
-      // 24: bipush -1
-      // 25: goto 82
-      // 28: aload 2
-      // 29: checkcast pkg/TestRecordPattern1$Point
-      // 2c: invokestatic pkg/TestRecordPattern1.$proxy$a (Lpkg/TestRecordPattern1$Point;)I
-      // 2f: istore 6
-      // 31: iload 6
-      // 33: invokestatic java/lang/Integer.valueOf (I)Ljava/lang/Integer;
-      // 36: invokevirtual java/lang/Integer.intValue ()I
-      // 39: istore 4
-      // 3b: aload 2
-      // 3c: checkcast pkg/TestRecordPattern1$Point
-      // 3f: invokestatic pkg/TestRecordPattern1.$proxy$b (Lpkg/TestRecordPattern1$Point;)I
-      // 42: istore 6
-      // 44: iload 6
-      // 46: invokestatic java/lang/Integer.valueOf (I)Ljava/lang/Integer;
-      // 49: invokevirtual java/lang/Integer.intValue ()I
-      // 4c: istore 5
-      // 4e: iload 4
-      // 50: ifle 58
-      // 53: iload 5
-      // 55: ifgt 5d
-      // 58: bipush 1
-      // 59: istore 3
-      // 5a: goto 04
-      // 5d: iload 4
-      // 5f: iload 5
-      // 61: iadd
-      // 62: goto 82
-      // 65: aload 2
-      // 66: checkcast pkg/TestRecordPattern1$Point
-      // 69: astore 6
-      // 6b: new java/lang/IllegalArgumentException
-      // 6e: dup
-      // 6f: ldc "Negative point not allowed"
-      // 71: invokespecial java/lang/IllegalArgumentException.<init> (Ljava/lang/String;)V
-      // 74: athrow
-      // 75: aload 2
-      // 76: astore 7
-      // 78: new java/lang/IllegalArgumentException
-      // 7b: dup
-      // 7c: ldc "Only points or null allowed"
-      // 7e: invokespecial java/lang/IllegalArgumentException.<init> (Ljava/lang/String;)V
-      // 81: athrow
-      // 82: ireturn
+   int test3(Object o) {
+      Object var2 = o;
+      byte var3 = 0;
+
+      while(true) {
+         int var10000;
+         switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestRecordPattern1.Point,TestRecordPattern1.Point,Object>(var2, var3)) {
+            case -1:
+               var10000 = -1;
+               break;
+            case 0:
+               int var8 = $proxy$a((TestRecordPattern1.Point)var2);
+               int a = Integer.valueOf(var8);
+               var8 = $proxy$b((TestRecordPattern1.Point)var2);
+               int b = Integer.valueOf(var8);
+               if (a <= 0 || b <= 0) {
+                  var3 = 1;
+                  continue;
+               }
+
+               var10000 = a + b;
+               break;
+            case 1:
+               TestRecordPattern1.Point p = (TestRecordPattern1.Point)var2;
+               throw new IllegalArgumentException("Negative point not allowed");
+            default:
+               throw new IllegalArgumentException("Only points or null allowed");
+         }
+
+         return var10000;
+      }
    }
 
    // $QF: synthetic method
gen_diffs.py pkg/TestRecordPattern2.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,4 +1,6 @@
 package pkg;
+
+import java.lang.runtime.SwitchBootstraps;
 
 public class TestRecordPattern2 {
    void test(TestRecordPattern2.Pair<?, ?> p) {
@@ -53,188 +55,74 @@
       System.out.println("Unconditional");
    }
 
-   Object test3(TestRecordPattern2.Pair<?, ?> param1) {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot read field "type" because "val" is null
-      //  at org.jetbrains.java.decompiler.struct.gen.VarType.isStrictSuperset(VarType.java)
-      //  at org.jetbrains.java.decompiler.struct.gen.VarType.isSuperset(VarType.java)
-      //  at org.jetbrains.java.decompiler.struct.gen.VarType.getCommonSupertype(VarType.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.SwitchHeadExprent.checkExprTypeBounds(SwitchHeadExprent.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor.checkTypeExprent(VarTypeProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor.lambda$processVarTypes$1(VarTypeProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.sforms.DirectGraph.iterateExprents(DirectGraph.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor.processVarTypes(VarTypeProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor.calculateVarTypes(VarTypeProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionsProcessor.setVarVersions(VarVersionsProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarProcessor.setVarVersions(VarProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 000: aload 1
-      // 001: astore 2
-      // 002: bipush 0
-      // 003: istore 3
-      // 004: aload 2
-      // 005: iload 3
-      // 006: invokedynamic typeSwitch (Ljava/lang/Object;I)I bsm=java/lang/runtime/SwitchBootstraps.typeSwitch (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; args=[ pkg/TestRecordPattern2$Pair, pkg/TestRecordPattern2$Pair, pkg/TestRecordPattern2$Pair, pkg/TestRecordPattern2$Pair, pkg/TestRecordPattern2$Pair ]
-      // 00b: tableswitch 37 -1 4 47 54 124 200 249 347
-      // 030: new java/lang/MatchException
-      // 033: dup
-      // 034: aconst_null
-      // 035: aconst_null
-      // 036: invokespecial java/lang/MatchException.<init> (Ljava/lang/String;Ljava/lang/Throwable;)V
-      // 039: athrow
-      // 03a: bipush -1
-      // 03b: invokestatic java/lang/Integer.valueOf (I)Ljava/lang/Integer;
-      // 03e: goto 185
-      // 041: aload 2
-      // 042: invokestatic pkg/TestRecordPattern2.$proxy$a (Lpkg/TestRecordPattern2$Pair;)Ljava/lang/Object;
-      // 045: astore 7
-      // 047: aload 7
-      // 049: instanceof java/lang/Long
-      // 04c: ifeq 071
-      // 04f: aload 7
-      // 051: checkcast java/lang/Long
-      // 054: astore 4
-      // 056: aload 2
-      // 057: invokestatic pkg/TestRecordPattern2.$proxy$b (Lpkg/TestRecordPattern2$Pair;)Ljava/lang/Object;
-      // 05a: astore 7
-      // 05c: aload 7
-      // 05e: instanceof java/lang/Long
-      // 061: ifeq 071
-      // 064: aload 7
-      // 066: checkcast java/lang/Long
-      // 069: astore 5
-      // 06b: aload 2
-      // 06c: astore 6
-      // 06e: goto 076
-      // 071: bipush 1
-      // 072: istore 3
-      // 073: goto 004
-      // 076: aload 4
-      // 078: invokevirtual java/lang/Long.longValue ()J
-      // 07b: aload 5
-      // 07d: invokevirtual java/lang/Long.longValue ()J
-      // 080: ladd
-      // 081: invokestatic java/lang/Long.valueOf (J)Ljava/lang/Long;
-      // 084: goto 185
-      // 087: aload 2
-      // 088: invokestatic pkg/TestRecordPattern2.$proxy$a (Lpkg/TestRecordPattern2$Pair;)Ljava/lang/Object;
-      // 08b: astore 10
-      // 08d: aload 10
-      // 08f: instanceof java/lang/Integer
-      // 092: ifeq 0b7
-      // 095: aload 10
-      // 097: checkcast java/lang/Integer
-      // 09a: astore 7
-      // 09c: aload 2
-      // 09d: invokestatic pkg/TestRecordPattern2.$proxy$b (Lpkg/TestRecordPattern2$Pair;)Ljava/lang/Object;
-      // 0a0: astore 10
-      // 0a2: aload 10
-      // 0a4: instanceof java/lang/Integer
-      // 0a7: ifeq 0b7
-      // 0aa: aload 10
-      // 0ac: checkcast java/lang/Integer
-      // 0af: astore 8
-      // 0b1: aload 2
-      // 0b2: astore 9
-      // 0b4: goto 0bc
-      // 0b7: bipush 2
-      // 0b8: istore 3
-      // 0b9: goto 004
-      // 0bc: aload 7
-      // 0be: invokevirtual java/lang/Integer.intValue ()I
-      // 0c1: aload 8
-      // 0c3: invokevirtual java/lang/Integer.intValue ()I
-      // 0c6: ishl
-      // 0c7: aload 9
-      // 0c9: invokevirtual pkg/TestRecordPattern2$Pair.hashCode ()I
-      // 0cc: imul
-      // 0cd: invokestatic java/lang/Integer.valueOf (I)Ljava/lang/Integer;
-      // 0d0: goto 185
-      // 0d3: aload 2
-      // 0d4: invokestatic pkg/TestRecordPattern2.$proxy$a (Lpkg/TestRecordPattern2$Pair;)Ljava/lang/Object;
-      // 0d7: astore 12
-      // 0d9: aload 12
-      // 0db: astore 10
-      // 0dd: aload 2
-      // 0de: invokestatic pkg/TestRecordPattern2.$proxy$b (Lpkg/TestRecordPattern2$Pair;)Ljava/lang/Object;
-      // 0e1: astore 12
-      // 0e3: aload 12
-      // 0e5: instanceof java/lang/Void
-      // 0e8: ifeq 0f5
-      // 0eb: aload 12
-      // 0ed: checkcast java/lang/Void
-      // 0f0: astore 11
-      // 0f2: goto 0fa
-      // 0f5: bipush 3
-      // 0f6: istore 3
-      // 0f7: goto 004
-      // 0fa: new java/lang/IllegalArgumentException
-      // 0fd: dup
-      // 0fe: ldc "how"
-      // 100: invokespecial java/lang/IllegalArgumentException.<init> (Ljava/lang/String;)V
-      // 103: athrow
-      // 104: aload 2
-      // 105: invokestatic pkg/TestRecordPattern2.$proxy$a (Lpkg/TestRecordPattern2$Pair;)Ljava/lang/Object;
-      // 108: astore 14
-      // 10a: aload 14
-      // 10c: instanceof java/lang/String
-      // 10f: ifeq 150
-      // 112: aload 14
-      // 114: checkcast java/lang/String
-      // 117: astore 12
-      // 119: aload 2
-      // 11a: invokestatic pkg/TestRecordPattern2.$proxy$b (Lpkg/TestRecordPattern2$Pair;)Ljava/lang/Object;
-      // 11d: astore 14
-      // 11f: aload 14
-      // 121: instanceof java/lang/String
-      // 124: ifeq 150
-      // 127: aload 14
-      // 129: checkcast java/lang/String
-      // 12c: astore 13
-      // 12e: aload 12
-      // 130: invokevirtual java/lang/String.length ()I
-      // 133: bipush 3
-      // 134: if_icmple 150
-      // 137: aload 13
-      // 139: invokevirtual java/lang/String.length ()I
-      // 13c: bipush 3
-      // 13d: if_icmple 150
-      // 140: aload 12
-      // 142: invokevirtual java/lang/String.length ()I
-      // 145: aload 13
-      // 147: invokevirtual java/lang/String.length ()I
-      // 14a: iadd
-      // 14b: bipush 23
-      // 14d: if_icmplt 155
-      // 150: bipush 4
-      // 151: istore 3
-      // 152: goto 004
-      // 155: aload 12
-      // 157: invokevirtual java/lang/String.length ()I
-      // 15a: aload 13
-      // 15c: invokevirtual java/lang/String.length ()I
-      // 15f: iadd
-      // 160: invokestatic java/lang/Integer.valueOf (I)Ljava/lang/Integer;
-      // 163: goto 185
-      // 166: aload 2
-      // 167: invokestatic pkg/TestRecordPattern2.$proxy$a (Lpkg/TestRecordPattern2$Pair;)Ljava/lang/Object;
-      // 16a: astore 17
-      // 16c: aload 17
-      // 16e: astore 14
-      // 170: aload 2
-      // 171: invokestatic pkg/TestRecordPattern2.$proxy$b (Lpkg/TestRecordPattern2$Pair;)Ljava/lang/Object;
-      // 174: astore 17
-      // 176: aload 17
-      // 178: astore 15
-      // 17a: aload 2
-      // 17b: astore 16
-      // 17d: bipush -2
-      // 17f: invokestatic java/lang/Integer.valueOf (I)Ljava/lang/Integer;
-      // 182: goto 185
-      // 185: areturn
+   Object test3(TestRecordPattern2.Pair<?, ?> p) {
+      TestRecordPattern2.Pair var2 = p;
+      byte var3 = 0;
+
+      while(true) {
+         Object var10000;
+         switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestRecordPattern2.Pair,TestRecordPattern2.Pair,TestRecordPattern2.Pair,TestRecordPattern2.Pair,TestRecordPattern2.Pair>(
+            var2, var3
+         )) {
+            case -1:
+               var10000 = -1;
+               break;
+            case 0:
+               Object var18 = $proxy$a(var2);
+               if (var18 instanceof Long l) {
+                  var18 = $proxy$b(var2);
+                  if (var18 instanceof Long r) {
+                     var10000 = l + r;
+                     break;
+                  }
+               }
+
+               var3 = 1;
+               continue;
+            case 1:
+               Object lx = $proxy$a(var2);
+               if (lx instanceof Integer l) {
+                  lx = $proxy$b(var2);
+                  if (lx instanceof Integer r) {
+                     var10000 = (l << r) * var2.hashCode();
+                     break;
+                  }
+               }
+
+               var3 = 2;
+               continue;
+            case 2:
+               Object var21 = $proxy$a(var2);
+               var21 = $proxy$b(var2);
+               if (var21 instanceof Void r) {
+                  throw new IllegalArgumentException("how");
+               }
+
+               var3 = 3;
+               continue;
+            case 3:
+               Object lx = $proxy$a(var2);
+               if (lx instanceof String l) {
+                  lx = $proxy$b(var2);
+                  if (lx instanceof String r && l.length() > 3 && r.length() > 3 && l.length() + r.length() < 23) {
+                     var10000 = l.length() + r.length();
+                     break;
+                  }
+               }
+
+               var3 = 4;
+               continue;
+            case 4:
+               Object var17 = $proxy$a(var2);
+               var17 = $proxy$b(var2);
+               var10000 = -2;
+               break;
+            default:
+               throw new MatchException(null, null);
+         }
+
+         return var10000;
+      }
    }
 
    // $QF: synthetic method
gen_diffs.py pkg/TestRecordPattern3.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -32,7 +32,6 @@
             System.out.println(a + var21 + var22 + ((double)((long)(i1 + i2 + i3 + i4) + l1 + l2 + (long)c1 + (long)c2 + (long)bb) + dd) + bool);
          }
       }
-
    }
 
    // $QF: synthetic method
gen_diffs.py pkg/TestRecordPattern4.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -33,7 +33,6 @@
             }
          }
       }
-
    }
 
    void test2(Object m) {
@@ -64,7 +63,7 @@
                         if (var22 instanceof TestRecordPattern4.Many i2) {
                            TestRecordPattern4.Many i = (TestRecordPattern4.Many)var21;
                            TestRecordPattern4.Many mm = (TestRecordPattern4.Many)m;
-                           System.out.println(b + String.valueOf(var21) + e + h + h2 + String.valueOf(i2) + i.hashCode() + mm.hashCode());
+                           System.out.println(b + var21 + e + h + h2 + i2 + i.hashCode() + mm.hashCode());
                         }
                      }
                   }
@@ -72,7 +71,6 @@
             }
          }
       }
-
    }
 
    // $QF: synthetic method
gen_diffs.py pkg/TestRecursiveLambda.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -4,4 +4,4 @@
 //  at org.jetbrains.java.decompiler.main.rels.LambdaProcessor.processClass(LambdaProcessor.java)
 //  at org.jetbrains.java.decompiler.main.ClassesProcessor.writeClass(ClassesProcessor.java)
 //  at org.jetbrains.java.decompiler.main.Fernflower.getClassContent(Fernflower.java)
-//  at org.jetbrains.java.decompiler.struct.ContextUnit.lambda$save$0(ContextUnit.java)+//  at org.jetbrains.java.decompiler.struct.ContextUnit.lambda$save$2(ContextUnit.java)
\ No newline at end of file
gen_diffs.py pkg/TestRunSuspend.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -21,7 +21,7 @@
    }
 
    @Nullable
-   public final Result<Unit> getResult_xLWZpok/* $FF was: getResult-xLWZpok*/() {
+   public final Result<Unit> getResult_xLWZpok/* $QF was: getResult-xLWZpok*/() {
       return this.result;
    }
 
gen_diffs.py pkg/TestSealedFinal.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,4 +1,4 @@
 package pkg;
 
-public final non-sealed class TestSealedFinal implements SealedInterface {
+public final class TestSealedFinal implements SealedInterface {
 }
\ No newline at end of file
gen_diffs.py pkg/TestSealedRecord.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,4 +1,4 @@
 package pkg;
 
-public non-sealed record TestSealedRecord(int i) implements SealedInterface {
+public record TestSealedRecord(int i) implements SealedInterface {
 }
\ No newline at end of file
gen_diffs.py pkg/TestSharedVarIndex.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,22 +2,7 @@
 
 public class TestSharedVarIndex {
    public void StringArrayVsString() {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.RuntimeException: invalid constant type: [Ljava/lang/String;
-      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.ConstExprent.toJava(ConstExprent.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent.toJava(AssignmentExprent.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor.listToJava(ExprProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.BasicBlockStatement.toJava(BasicBlockStatement.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement.toJava(RootStatement.java)
-      //  at org.jetbrains.java.decompiler.main.ClassWriter.methodToJava(ClassWriter.java)
-      //
-      // Bytecode:
-      // 0: bipush 0
-      // 1: anewarray 2
-      // 4: astore 1
-      // 5: ldc "lol"
-      // 7: astore 1
-      // 8: return
+      String[] b = new String[0];
+      String bx = "lol";
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestShiftLoop.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,7 +5,7 @@
       long x = l[0];
 
       for(int i = 1; i < 2; ++i) {
-         x <<= 3L;
+         x <<= 3;
       }
 
       x = l[4];
gen_diffs.py pkg/TestSimpleIf.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,7 +5,6 @@
       if (i > 0) {
          System.out.println("Hello");
       }
-
    }
 
    public void test2(int i) {
@@ -14,6 +13,5 @@
       } else {
          System.out.println("Bye");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSimpleWhile.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -6,6 +6,5 @@
          System.out.println(i);
          ++i;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestStaticIterator.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -15,35 +15,16 @@
    }
 
    public static void test() {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot read field "bytecode" because the return value of "org.jetbrains.java.decompiler.modules.decompiler.exps.InvocationExprent.getInstance()" is null
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.matchForEach(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoop(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoopsRec(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoopsRec(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoopsRec(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.MergeHelper.enhanceLoops(MergeHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: invokestatic pkg/TestStaticIterator.iterator ()Ljava/util/Iterator;
-      // 03: astore 0
-      // 04: aload 0
-      // 05: invokeinterface java/util/Iterator.hasNext ()Z 1
-      // 0a: ifeq 1a
-      // 0d: aload 0
-      // 0e: invokeinterface java/util/Iterator.next ()Ljava/lang/Object; 1
-      // 13: checkcast pkg/TestStaticIterator
-      // 16: astore 1
-      // 17: goto 04
-      // 1a: return
+      Iterator iter = iterator();
+
+      while(iter.hasNext()) {
+         TestStaticIterator var1 = (TestStaticIterator)iter.next();
+      }
    }
 
    public static void test1() {
       for(Object o : iterable()) {
          System.out.println(o);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestStringLiteral.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -10,7 +10,6 @@
       if ("".equals("")) {
          System.out.println("Hi");
       }
-
    }
 
    public void testReplace() {
gen_diffs.py pkg/TestSwitchDefaultBefore.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -13,7 +13,6 @@
          default:
             System.out.println(3);
       }
-
    }
 
    public void test2(int i) {
@@ -28,6 +27,5 @@
          default:
             System.out.println(3);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchFinally.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -13,7 +13,6 @@
 
          System.out.println("b");
       }
-
    }
 
    public void test1(int i) {
@@ -31,7 +30,6 @@
 
          System.out.println("b");
       }
-
    }
 
    public void test2(int i) {
@@ -45,7 +43,6 @@
                System.out.println("b");
          }
       }
-
    }
 
    public int test3(int i) {
gen_diffs.py pkg/TestSwitchLoop.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -21,7 +21,6 @@
                }
          }
       }
-
    }
 
    public int test2(int i) {
@@ -104,7 +103,7 @@
       int a = 0;
 
       while(true) {
-         label42: {
+         label40: {
             if (i > a) {
                --i;
                label22:
@@ -115,7 +114,7 @@
 
                      while(true) {
                         if (i1 >= 5) {
-                           break label42;
+                           break label40;
                         }
 
                         switch(i1) {
@@ -134,7 +133,7 @@
                   case 1:
                      System.out.println("1");
                   default:
-                     break label42;
+                     break label40;
                }
             }
 
@@ -242,15 +241,15 @@
    }
 
    public void test10(int i) {
-      label33: {
-         label32: {
+      label31: {
+         label30: {
             switch(i) {
                case 0:
                   int j = 0;
 
                   while(true) {
                      if (j >= 10) {
-                        break label32;
+                        break label30;
                      }
 
                      if (j == 3) {
@@ -259,7 +258,7 @@
                      }
 
                      if (j == 9) {
-                        break label32;
+                        break label30;
                      }
 
                      ++j;
@@ -267,11 +266,11 @@
                case 1:
                   break;
                default:
-                  break label33;
+                  break label31;
             }
 
             System.out.println(1);
-            break label33;
+            break label31;
          }
 
          System.out.println(0);
@@ -281,8 +280,8 @@
    }
 
    public void test10b(int i) {
-      label34: {
-         label33: {
+      label32: {
+         label31: {
             label28:
             switch(i) {
                case 0:
@@ -290,7 +289,7 @@
 
                   while(true) {
                      if (j >= 10) {
-                        break label33;
+                        break label31;
                      }
 
                      if (j == 3) {
@@ -299,22 +298,22 @@
                      }
 
                      if (j == 9) {
-                        break label33;
+                        break label31;
                      }
 
                      ++j;
                   }
                case 1:
                   System.out.println(1);
-                  break label34;
+                  break label32;
                case 2:
                   break;
                default:
-                  break label34;
+                  break label32;
             }
 
             System.out.println(2);
-            break label34;
+            break label32;
          }
 
          System.out.println(0);
gen_diffs.py pkg/TestSwitchOnEnum.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -33,7 +33,6 @@
             case B2:
                System.out.println("B2");
          }
-
       }
 
       static enum A {
gen_diffs.py pkg/TestSwitchPatternMatching1.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,12 +5,15 @@
 public class TestSwitchPatternMatching1 {
    public void test(Object o) {
       Objects.requireNonNull(o);
-      byte var3 = 0;
-
       switch(o) {
-         case o instanceof Integer i -> System.out.println(i);
-         case o instanceof String s -> System.out.println(s);
-         default -> System.out.println("Default");
-      };
+         case Integer i:
+            System.out.println(i);
+            break;
+         case String s:
+            System.out.println(s);
+            break;
+         default:
+            System.out.println("Default");
+      }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching10.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,34 +2,16 @@
 
 public class TestSwitchPatternMatching10 {
    static void test(String s) {
-      byte var2 = -1;
-      if (s != null) {
-         switch(s.hashCode()) {
-            case 3329:
-               if (s.equals("hi")) {
-                  var2 = 0;
-               }
-               break;
-            case 98030:
-               if (s.equals("bye")) {
-                  var2 = 1;
-               }
-         }
-      } else {
-         var2 = 2;
-      }
-
-      switch(var2) {
-         case 0:
+      switch(s) {
+         case "hi":
             System.out.println("hi");
             break;
-         case 1:
+         case "bye":
             System.out.println("bye");
             break;
-         case 2:
+         case null:
          default:
             System.out.println("oh");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching11.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,27 +2,10 @@
 
 public class TestSwitchPatternMatching11 {
    static String test(String s) {
-      byte var2 = -1;
-      if (s != null) {
-         switch(s.hashCode()) {
-            case 3329:
-               if (s.equals("hi")) {
-                  var2 = 0;
-               }
-               break;
-            case 98030:
-               if (s.equals("bye")) {
-                  var2 = 1;
-               }
-         }
-      } else {
-         var2 = 2;
-      }
-
-      return switch(var2) {
-         case 0 -> "hi";
-         case 1 -> "bye";
-         case 2 -> String;
+      return switch(s) {
+         case "hi" -> "hi";
+         case "bye" -> "bye";
+         case null -> null;
          default -> "oh";
       };
    }
gen_diffs.py pkg/TestSwitchPatternMatching12.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -6,10 +6,10 @@
    static int testTriangle(boolean a, Direction l, Direction r) {
       Direction var3 = a ? l : r;
 
-      return switch(var3 != null ? null.$SwitchMap$ext$Direction[var3.ordinal()] : -1) {
-         default -> -1;
-         case 1, 2, 3 -> 0;
-         case 4, 5 -> 1;
+      return switch(var3) {
+         case null, default -> -1;
+         case NORTH, SOUTH, WEST -> 0;
+         case EAST, UP -> 1;
       };
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching13.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,70 +1,39 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatching13 {
    static void test(TestSwitchPatternMatching13.Shape s) {
-      TestSwitchPatternMatching13.Shape var1 = s;
-      byte var2 = 0;
+      switch(s) {
+         case null:
+            if (Math.random() > 0.0) {
+               System.out.println("Lucky null");
+            }
+            break;
+         case TestSwitchPatternMatching13.Triangle t when t.calculateArea() > 150.0:
+            if (t.hashCode() > 0) {
+               System.out.println("Larger positive-hash triangle");
+            }
 
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestSwitchPatternMatching13.Triangle,TestSwitchPatternMatching13.Triangle,TestSwitchPatternMatching13.Triangle,TestSwitchPatternMatching13.Triangle>(
-            var1, var2
-         )) {
-            case -1:
-               if (Math.random() > 0.0) {
-                  System.out.println("Lucky null");
-               }
+            System.out.println("Larger triangle: " + t);
+            break;
+         case TestSwitchPatternMatching13.Triangle tx when tx.calculateArea() > 50.0:
+            System.out.println("Smaller triangle");
+            break;
+         case TestSwitchPatternMatching13.Triangle txx when txx.calculateArea() > 100.0:
+            System.out.println("Large triangle");
 
-               return;
-            case 0:
-               TestSwitchPatternMatching13.Triangle t = (TestSwitchPatternMatching13.Triangle)var1;
-               if (!(t.calculateArea() > 150.0)) {
-                  var2 = 1;
-                  break;
-               }
+            while(Math.random() > 0.5) {
+               System.out.println("Keep going");
+            }
+            break;
+         case TestSwitchPatternMatching13.Triangle txxx:
+            if (txxx.hashCode() > 0) {
+               System.out.println("Small positive-hash triangle");
+            }
 
-               if (t.hashCode() > 0) {
-                  System.out.println("Larger positive-hash triangle");
-               }
-
-               System.out.println("Larger triangle: " + t);
-               return;
-            case 1:
-               TestSwitchPatternMatching13.Triangle t = (TestSwitchPatternMatching13.Triangle)var1;
-               if (!(t.calculateArea() > 50.0)) {
-                  var2 = 2;
-                  break;
-               }
-
-               System.out.println("Smaller triangle");
-               return;
-            case 2:
-               TestSwitchPatternMatching13.Triangle t = (TestSwitchPatternMatching13.Triangle)var1;
-               if (!(t.calculateArea() > 100.0)) {
-                  var2 = 3;
-                  break;
-               }
-
-               System.out.println("Large triangle");
-
-               while(Math.random() > 0.5) {
-                  System.out.println("Keep going");
-               }
-
-               return;
-            case 3:
-               TestSwitchPatternMatching13.Triangle t = (TestSwitchPatternMatching13.Triangle)var1;
-               if (t.hashCode() > 0) {
-                  System.out.println("Small positive-hash triangle");
-               }
-
-               System.out.println("Small triangle");
-               return;
-            default:
-               System.out.println("Non-triangle");
-               return;
-         }
+            System.out.println("Small triangle");
+            break;
+         default:
+            System.out.println("Non-triangle");
       }
    }
 
gen_diffs.py pkg/TestSwitchPatternMatching14.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,25 +2,22 @@
 
 public class TestSwitchPatternMatching14 {
    static void test(TestSwitchPatternMatching14.Shape s) {
-      byte var2 = 0;
-
       switch(s) {
-         case -1 -> {
+         case null:
             if (Math.random() > 0.0) {
                System.out.println("Lucky null");
             }
-         }
-         case 0 -> {
-            TestSwitchPatternMatching14.Triangle t = (TestSwitchPatternMatching14.Triangle)s;
+            break;
+         case TestSwitchPatternMatching14.Triangle t:
             if (t.hashCode() > 0) {
                System.out.println("Larger positive-hash triangle");
             }
 
             System.out.println("Larger triangle: " + t);
             break;
-         }
-         default -> System.out.println("Non-triangle");
-      };
+         default:
+            System.out.println("Non-triangle");
+      }
    }
 
    private abstract class Shape {
gen_diffs.py pkg/TestSwitchPatternMatching15.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,49 +1,23 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatching15 {
    static void test(Object s) {
       Objects.requireNonNull(s);
-      Object var1 = s;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Integer,Number,Integer,Number>(var1, var2)) {
-            case 0: {
-               Integer i = (Integer)var1;
-               if (i <= 0) {
-                  var2 = 1;
-                  break;
-               }
-
-               System.out.println("positive integer: " + i);
-               return;
-            }
-            case 1: {
-               Number n = (Number)var1;
-               if (n.hashCode() == 0) {
-                  var2 = 2;
-                  break;
-               }
-
-               System.out.println("Normal number: " + n);
-               return;
-            }
-            case 2: {
-               Integer i = (Integer)var1;
-               System.out.println(i);
-               return;
-            }
-            case 3: {
-               Number n = (Number)var1;
-               System.out.println("Number: " + n);
-               return;
-            }
-            default:
-               return;
-         }
+      switch(s) {
+         case Integer i when i > 0:
+            System.out.println("positive integer: " + i);
+            break;
+         case Number n when n.hashCode() != 0:
+            System.out.println("Normal number: " + n);
+            break;
+         case Integer ix:
+            System.out.println(ix);
+            break;
+         case Number nx:
+            System.out.println("Number: " + nx);
+            break;
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,54 +1,30 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatching16 {
    static void test3(Object s) {
       Objects.requireNonNull(s);
-      Object oh = s;
-      int hello = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Integer,Number,Integer,Number>(oh, hello)) {
-            case 0:
-               Integer i = (Integer)oh;
-               if (i <= 0) {
-                  hello = 1;
-                  break;
-               }
-
-               System.out.println("positive integer: " + i);
-               return;
-            case 1: {
-               Number n = (Number)oh;
-               if (n.hashCode() == 0) {
-                  hello = 2;
-                  break;
-               }
-
-               System.out.println("Normal number: " + n);
-               return;
+      switch(s) {
+         case Integer i when i > 0:
+            System.out.println("positive integer: " + i);
+            break;
+         case Number n when n.hashCode() != 0:
+            System.out.println("Normal number: " + n);
+            break;
+         case Integer ix:
+            if (Math.random() < 0.5) {
+               int oh = 0;
+               int hello = 3;
+            } else {
+               System.out.println("hello");
             }
-            case 2:
-               Integer i = (Integer)oh;
-               if (Math.random() < 0.5) {
-                  int oh = 0;
-                  hello = 3;
-               } else {
-                  System.out.println("hello");
-               }
-
-               return;
-            case 3: {
-               Number n = (Number)oh;
-               System.out.println("Number: " + n);
-               return;
-            }
-            default:
-               System.out.println("default");
-               return;
-         }
+            break;
+         case Number nx:
+            System.out.println("Number: " + nx);
+            break;
+         default:
+            System.out.println("default");
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching17.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,56 +1,33 @@
 package pkg;
 
+import java.lang.runtime.SwitchBootstraps;
+import java.util.Objects;
+
 public class TestSwitchPatternMatching17 {
-   static void test4(Object param0) {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot read field "typeFamily" because "newType" is null
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor.changeVarExprentType(VarTypeProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor.changeExprentType(VarTypeProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor.checkTypeExprent(VarTypeProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor.lambda$processVarTypes$1(VarTypeProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.sforms.DirectGraph.iterateExprents(DirectGraph.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor.processVarTypes(VarTypeProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor.calculateVarTypes(VarTypeProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionsProcessor.setVarVersions(VarVersionsProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.vars.VarProcessor.setVarVersions(VarProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: aload 0
-      // 01: dup
-      // 02: invokestatic java/util/Objects.requireNonNull (Ljava/lang/Object;)Ljava/lang/Object;
-      // 05: pop
-      // 06: astore 1
-      // 07: bipush 0
-      // 08: istore 2
-      // 09: aload 1
-      // 0a: iload 2
-      // 0b: invokedynamic typeSwitch (Ljava/lang/Object;I)I bsm=java/lang/runtime/SwitchBootstraps.typeSwitch (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite; args=[ java/lang/String ]
-      // 10: lookupswitch 82 1 0 20
-      // 24: aload 1
-      // 25: checkcast java/lang/String
-      // 28: astore 3
-      // 29: aload 3
-      // 2a: bipush 0
-      // 2b: invokevirtual java/lang/String.charAt (I)C
-      // 2e: lookupswitch 40 2 97 26 98 29
-      // 48: goto 5b
-      // 4b: aload 3
-      // 4c: invokevirtual java/lang/String.length ()I
-      // 4f: bipush 5
-      // 50: if_icmple 56
-      // 53: goto 5b
-      // 56: bipush 1
-      // 57: istore 2
-      // 58: goto 09
-      // 5b: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 5e: aload 3
-      // 5f: invokevirtual java/io/PrintStream.println (Ljava/lang/String;)V
-      // 62: new java/lang/IllegalArgumentException
-      // 65: dup
-      // 66: ldc "no"
-      // 68: invokespecial java/lang/IllegalArgumentException.<init> (Ljava/lang/String;)V
-      // 6b: athrow
+   static void test4(Object o) {
+      Objects.requireNonNull(o);
+      Object var1 = o;
+      byte var2 = 0;
+
+      while(true) {
+         switch(SwitchBootstraps.typeSwitch<"typeSwitch",String>(var1, var2)) {
+            case 0:
+               String s = (String)var1;
+               switch(s.charAt(0)) {
+                  case 'b':
+                     if (s.length() <= 5) {
+                        break;
+                     }
+                  case 'a':
+                     System.out.println(s);
+                     throw new IllegalArgumentException("no");
+               }
+
+               var2 = 1;
+               break;
+            default:
+               throw new IllegalArgumentException("no");
+         }
+      }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching18.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,95 +1,65 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatching18 {
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    static void test(Integer o) {
       Objects.requireNonNull(o);
-      Integer var1 = o;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",42,Integer,Integer>(var1, var2)) {
-            case 0:
-               System.out.println("42");
-               return;
-            case 1:
-               if (var1 >= 50) {
-                  var2 = 2;
-                  break;
-               }
-
-               System.out.println("small");
-               return;
-            case 2:
-               if (var1.compareTo(17) <= 0) {
-                  var2 = 3;
-                  break;
-               }
-
-               System.out.println("comparable");
-               return;
-            default:
-               System.out.println("default");
-               return;
-         }
+      <unknown> var1;
+      switch(o) {
+         case 42:
+            System.out.println("42");
+            break;
+         case Integer var5 when var1 < 50:
+            System.out.println("small");
+            break;
+         case Integer var6 when var1.compareTo(17) > 0:
+            System.out.println("comparable");
+            break;
+         default:
+            System.out.println("default");
       }
    }
 
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    static void test2(Integer o) {
-      Integer var1 = o;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",42,16,Integer>(var1, var2)) {
-            case -1:
-            case 1:
-               System.out.println("maybe 16?");
-               return;
-            case 0:
-               System.out.println("42");
-               return;
-            case 2:
-               if (var1 >= 50) {
-                  var2 = 3;
-                  break;
-               }
-
-               System.out.println("small");
-               return;
-            default:
-               System.out.println("default");
-               return;
-         }
+      <unknown> var1;
+      switch(o) {
+         case 16:
+         case null:
+            System.out.println("maybe 16?");
+            break;
+         case 42:
+            System.out.println("42");
+            break;
+         case Integer var4 when var1 < 50:
+            System.out.println("small");
+            break;
+         default:
+            System.out.println("default");
       }
    }
 
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    static void test3(Integer o) {
-      Integer var1 = o;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",42,Integer,16>(var1, var2)) {
-            case -1:
-            case 2:
-               System.out.println("definitely null");
-               return;
-            case 0:
-               System.out.println("42");
-               return;
-            case 1:
-               if (var1 >= 50) {
-                  var2 = 2;
-                  break;
-               }
-
-               System.out.println("small");
-               return;
-            default:
-               System.out.println("default");
-               return;
-         }
+      <unknown> var1;
+      switch(o) {
+         case 16:
+         case null:
+            System.out.println("definitely null");
+            break;
+         case 42:
+            System.out.println("42");
+            break;
+         case Integer var4 when var1 < 50:
+            System.out.println("small");
+            break;
+         default:
+            System.out.println("default");
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching19.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,78 +1,45 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
-
 public class TestSwitchPatternMatching19 {
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    static void test(TestSwitchPatternMatching19.XXX s) {
-      TestSwitchPatternMatching19.XXX var1 = s;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.enumSwitch<"enumSwitch","X1",TestSwitchPatternMatching19.XXX,TestSwitchPatternMatching19.XXX,TestSwitchPatternMatching19.XXX,TestSwitchPatternMatching19.XXX,TestSwitchPatternMatching19.XXX>(
-            var1, var2
-         )) {
-            case -1:
-            default:
-               System.out.println("f");
-               return;
-            case 0:
-               System.out.println("x1");
-               return;
-            case 1:
-               if (var1 == TestSwitchPatternMatching19.XXX.X1) {
-                  var2 = 2;
-                  break;
-               }
-
-               System.out.println("a");
-               return;
-            case 2:
-               if (!(var1 instanceof TestSwitchPatternMatching19.C)) {
-                  var2 = 3;
-                  break;
-               }
-
-               System.out.println("b");
-               return;
-            case 3:
-               if (var1 != var1) {
-                  var2 = 4;
-                  break;
-               }
-
-               System.out.println("d");
-               return;
-            case 4:
-               var2 = 5;
-         }
+      <unknown> var1;
+      switch(s) {
+         case null:
+         default:
+            System.out.println("f");
+            break;
+         case X1:
+            System.out.println("x1");
+            break;
+         case TestSwitchPatternMatching19.XXX var8 when var1 != TestSwitchPatternMatching19.XXX.X1:
+            System.out.println("a");
+            break;
+         case TestSwitchPatternMatching19.XXX var9 when var1 instanceof TestSwitchPatternMatching19.C:
+            System.out.println("b");
+            break;
+         case TestSwitchPatternMatching19.XXX var10 when var1 == var1:
+            System.out.println("d");
+            break;
+         case TestSwitchPatternMatching19.XXX var11 when false:
       }
    }
 
    static void test2(TestSwitchPatternMatching19.XXX s) {
-      TestSwitchPatternMatching19.XXX var1 = s;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.enumSwitch<"enumSwitch","X1","X2",TestSwitchPatternMatching19.XXX>(var1, var2)) {
-            case -1:
-            case 1:
-               System.out.println("maybe x2?");
-               return;
-            case 0:
-               System.out.println("x1");
-               return;
-            case 2:
-               if (!(Math.random() > 0.0)) {
-                  var2 = 3;
-                  break;
-               }
-
-               System.out.println("just making sure!");
-               return;
-            default:
-               System.out.println("default");
-               return;
-         }
+      switch(s) {
+         case X2:
+         case null:
+            System.out.println("maybe x2?");
+            break;
+         case X1:
+            System.out.println("x1");
+            break;
+         case TestSwitchPatternMatching19.XXX var4 when Math.random() > 0.0:
+            System.out.println("just making sure!");
+            break;
+         default:
+            System.out.println("default");
       }
    }
 
gen_diffs.py pkg/TestSwitchPatternMatching2.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,36 +1,19 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatching2 {
    static void testTriangle(TestSwitchPatternMatching2.Shape s) {
-      TestSwitchPatternMatching2.Shape var1 = s;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestSwitchPatternMatching2.Triangle,TestSwitchPatternMatching2.Triangle>(var1, var2)) {
-            case -1:
-               System.out.println("null");
-               return;
-            case 0: {
-               TestSwitchPatternMatching2.Triangle t = (TestSwitchPatternMatching2.Triangle)var1;
-               if (!(t.calculateArea() > 100.0)) {
-                  var2 = 1;
-                  break;
-               }
-
-               System.out.println("Large triangle");
-               return;
-            }
-            case 1: {
-               TestSwitchPatternMatching2.Triangle t = (TestSwitchPatternMatching2.Triangle)var1;
-               System.out.println("Small triangle");
-               return;
-            }
-            default:
-               System.out.println("Non-triangle");
-               return;
-         }
+      switch(s) {
+         case null:
+            System.out.println("null");
+            break;
+         case TestSwitchPatternMatching2.Triangle t when t.calculateArea() > 100.0:
+            System.out.println("Large triangle");
+            break;
+         case TestSwitchPatternMatching2.Triangle tx:
+            System.out.println("Small triangle");
+            break;
+         default:
+            System.out.println("Non-triangle");
       }
    }
 
gen_diffs.py pkg/TestSwitchPatternMatching20.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,28 +1,18 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatching20 {
    public void test(Object o) {
       Objects.requireNonNull(o);
-      Object var2 = o;
-      byte var3 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Integer,String>(var2, var3)) {
-            case 0:
-               Integer i = (Integer)var2;
-               var3 = 1;
-               break;
-            case 1:
-               String s = (String)var2;
-               System.out.println(s);
-               return;
-            default:
-               System.out.println("Default");
-               return;
-         }
+      switch(o) {
+         case Integer var6 when false:
+            break;
+         case String s:
+            System.out.println(s);
+            break;
+         default:
+            System.out.println("Default");
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching21.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,113 +1,68 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatching21 {
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    public void test1(String it) {
       Objects.requireNonNull(it);
-      String var2 = it;
-      byte var3 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch","","hi",String,String,String>(var2, var3)) {
-            case 0:
-               System.out.println("nothing");
-               return;
-            case 1:
-               System.out.println("hello");
-               return;
-            case 2:
-               if (!(Math.random() > 0.0)) {
-                  var3 = 3;
-                  break;
-               }
-
-               System.out.println(var2 + "!");
-               return;
-            case 3:
-               if (!(Math.random() > 0.0)) {
-                  var3 = 4;
-                  break;
-               }
-
-               System.out.println(var2 + "!!");
-               return;
-            case 4:
-               if (!var2.startsWith("?")) {
-                  var3 = 5;
-                  break;
-               }
-
-               System.out.println(var2 + "?");
-               return;
-            default:
-               System.out.println("Default");
-               return;
-         }
+      <unknown> var2;
+      switch(it) {
+         case "":
+            System.out.println("nothing");
+            break;
+         case "hi":
+            System.out.println("hello");
+            break;
+         case String var7 when Math.random() > 0.0:
+            System.out.println(it + "!");
+            break;
+         case String var8 when Math.random() > 0.0:
+            System.out.println(it + "!!");
+            break;
+         case String var9 when var2.startsWith("?"):
+            System.out.println(it + "?");
+            break;
+         default:
+            System.out.println("Default");
       }
    }
 
    public void test2(String it) {
-      String var2 = it;
-      byte var3 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch","","hi",String,String,String>(var2, var3)) {
-            case -1:
-            default:
-               System.out.println(var2 + "?");
-               return;
-            case 0:
-               System.out.println("nothing");
-               return;
-            case 1:
-               System.out.println("hello");
-               return;
-            case 2:
-               if (!(Math.random() > 0.0)) {
-                  var3 = 3;
-                  break;
-               }
-
-               System.out.println(var2 + "!");
-               return;
-            case 3:
-               if (Math.random() > 0.0) {
-                  System.out.println(var2 + "!!");
-                  return;
-               }
-
-               var3 = 4;
-         }
+      switch(it) {
+         case null:
+         default:
+            System.out.println(it + "?");
+            break;
+         case "":
+            System.out.println("nothing");
+            break;
+         case "hi":
+            System.out.println("hello");
+            break;
+         case String var7 when Math.random() > 0.0:
+            System.out.println(it + "!");
+            break;
+         case String var8 when Math.random() > 0.0:
+            System.out.println(it + "!!");
       }
    }
 
    public void test3(String it) {
-      String var2 = it;
-      byte var3 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch","","hi",String>(var2, var3)) {
-            case -1:
-            case 0:
-               System.out.println("nothing");
-               return;
-            case 1:
-               System.out.println("hello");
-               return;
-            case 2:
-               if (!(Math.random() > 0.0)) {
-                  var3 = 3;
-                  break;
-               }
-
-               System.out.println(var2 + "!");
-               return;
-            default:
-               System.out.println("Default");
-               return;
-         }
+      switch(it) {
+         case "":
+         case null:
+            System.out.println("nothing");
+            break;
+         case "hi":
+            System.out.println("hello");
+            break;
+         case String var5 when Math.random() > 0.0:
+            System.out.println(it + "!");
+            break;
+         default:
+            System.out.println("Default");
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching22.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,6 +1,4 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatching22 {
    public void test1() {
@@ -8,11 +6,9 @@
          System.out.println("hello");
       } catch (Exception var8) {
          Object var2 = new Object();
-         byte var3 = 0;
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Short>(var2, var3)) {
-            case int:
-            case 0:
-               Short var4 = (Short)var2;
+         switch(var2) {
+            case Short var4:
+            case null:
                break;
             default:
                System.out.println("Not a short");
@@ -21,7 +17,6 @@
       } finally {
          System.out.println("world");
       }
-
    }
 
    public void test2() {
@@ -29,11 +24,9 @@
          System.out.println("hello");
       } catch (Exception var8) {
          Object var2 = new Object();
-         byte var3 = 0;
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Short>(var2, var3)) {
-            case int:
-            case 0:
-               Short var4 = (Short)var2;
+         switch(var2) {
+            case Short var4:
+            case null:
             default:
                System.out.println("Not a short");
                throw new RuntimeException();
@@ -48,11 +41,9 @@
          System.out.println("hello");
       } catch (Exception var8) {
          Object var2 = new Object();
-         byte var3 = 0;
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Short>(var2, var3)) {
-            case int:
-            case 0:
-               Short var4 = (Short)var2;
+         switch(var2) {
+            case Short var4:
+            case null:
                break;
             default:
                System.out.println("Not a short");
@@ -61,7 +52,6 @@
       } finally {
          System.out.println("world");
       }
-
    }
 
    public void test2Null() {
@@ -69,11 +59,9 @@
          System.out.println("hello");
       } catch (Exception var8) {
          Object var2 = new Object();
-         byte var3 = 0;
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Short>(var2, var3)) {
-            case int:
-            case 0:
-               Short var4 = (Short)var2;
+         switch(var2) {
+            case Short var4:
+            case null:
             default:
                System.out.println("Not a short");
                throw new RuntimeException();
gen_diffs.py pkg/TestSwitchPatternMatching3.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,11 +2,12 @@
 
 public class TestSwitchPatternMatching3 {
    static void test(Object s) {
-      byte var2 = 0;
-
       switch(s) {
-         case null -> System.out.println("null");
-         default -> System.out.println("default");
-      };
+         case null:
+            System.out.println("null");
+            break;
+         default:
+            System.out.println("default");
+      }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching4.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,13 +1,11 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatching4 {
    static void test(Object s) {
       Objects.requireNonNull(s);
-      byte var2 = 0;
-      switch(SwitchBootstraps.typeSwitch<"typeSwitch">(s, var2)) {
+      switch(s) {
          default:
             System.out.println("default");
       }
gen_diffs.py pkg/TestSwitchPatternMatching5.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,58 +1,25 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatching5 {
    static void test(TestSwitchPatternMatching5.Shape s) {
-      TestSwitchPatternMatching5.Shape var1 = s;
-      byte var2 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestSwitchPatternMatching5.Triangle,TestSwitchPatternMatching5.Triangle,TestSwitchPatternMatching5.Triangle,TestSwitchPatternMatching5.Triangle>(
-            var1, var2
-         )) {
-            case -1:
-               System.out.println("null");
-               return;
-            case 0: {
-               TestSwitchPatternMatching5.Triangle t = (TestSwitchPatternMatching5.Triangle)var1;
-               if (!(t.calculateArea() > 150.0)) {
-                  var2 = 1;
-                  break;
-               }
-
-               System.out.println("Larger triangle");
-               return;
-            }
-            case 1: {
-               TestSwitchPatternMatching5.Triangle t = (TestSwitchPatternMatching5.Triangle)var1;
-               if (!(t.calculateArea() > 50.0)) {
-                  var2 = 2;
-                  break;
-               }
-
-               System.out.println("Smaller triangle");
-               return;
-            }
-            case 2: {
-               TestSwitchPatternMatching5.Triangle t = (TestSwitchPatternMatching5.Triangle)var1;
-               if (!(t.calculateArea() > 100.0)) {
-                  var2 = 3;
-                  break;
-               }
-
-               System.out.println("Large triangle");
-               return;
-            }
-            case 3: {
-               TestSwitchPatternMatching5.Triangle t = (TestSwitchPatternMatching5.Triangle)var1;
-               System.out.println("Small triangle");
-               return;
-            }
-            default:
-               System.out.println("Non-triangle");
-               return;
-         }
+      switch(s) {
+         case null:
+            System.out.println("null");
+            break;
+         case TestSwitchPatternMatching5.Triangle t when t.calculateArea() > 150.0:
+            System.out.println("Larger triangle");
+            break;
+         case TestSwitchPatternMatching5.Triangle tx when tx.calculateArea() > 50.0:
+            System.out.println("Smaller triangle");
+            break;
+         case TestSwitchPatternMatching5.Triangle txx when txx.calculateArea() > 100.0:
+            System.out.println("Large triangle");
+            break;
+         case TestSwitchPatternMatching5.Triangle txxx:
+            System.out.println("Small triangle");
+            break;
+         default:
+            System.out.println("Non-triangle");
       }
    }
 
gen_diffs.py pkg/TestSwitchPatternMatching6.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -4,10 +4,10 @@
 
 public class TestSwitchPatternMatching6 {
    static int testTriangle(Direction d) {
-      return switch(d != null ? null.$SwitchMap$ext$Direction[d.ordinal()] : -1) {
-         default -> -1;
-         case 1, 2, 3 -> 0;
-         case 4, 5 -> 1;
+      return switch(d) {
+         case null, default -> -1;
+         case NORTH, SOUTH, WEST -> 0;
+         case EAST, UP -> 1;
       };
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching7.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,12 +1,9 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatching7 {
    static String test(Object s) {
-      byte var2 = 0;
-      switch(SwitchBootstraps.typeSwitch<"typeSwitch">(s, var2)) {
-         case int:
+      switch(s) {
+         case null:
          default:
             return "everything";
       }
gen_diffs.py pkg/TestSwitchPatternMatching8.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,27 +2,10 @@
 
 public class TestSwitchPatternMatching8 {
    static String test(String s) {
-      byte var2 = -1;
-      if (s != null) {
-         switch(s.hashCode()) {
-            case 3329:
-               if (s.equals("hi")) {
-                  var2 = 0;
-               }
-               break;
-            case 98030:
-               if (s.equals("bye")) {
-                  var2 = 1;
-               }
-         }
-      } else {
-         var2 = 2;
-      }
-
-      return switch(var2) {
-         case 0 -> "hi";
-         case 1 -> "bye";
-         default -> "oh";
+      return switch(s) {
+         case "hi" -> "hi";
+         case "bye" -> "bye";
+         case null, default -> "oh";
       };
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatching9.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,32 +2,10 @@
 
 public class TestSwitchPatternMatching9 {
    static String test(String s) {
-      byte var2 = -1;
-      if (s != null) {
-         switch(s.hashCode()) {
-            case 3329:
-               if (s.equals("hi")) {
-                  var2 = 0;
-               }
-               break;
-            case 98030:
-               if (s.equals("bye")) {
-                  var2 = 1;
-               }
-               break;
-            case 3392903:
-               if (s.equals("null")) {
-                  var2 = 2;
-               }
-         }
-      } else {
-         var2 = 3;
-      }
-
-      return switch(var2) {
-         case 0 -> "hi";
-         case 1 -> "bye";
-         case 2, 3 -> "null";
+      return switch(s) {
+         case "hi" -> "hi";
+         case "bye" -> "bye";
+         case "null", null -> "null";
          default -> "oh";
       };
    }
gen_diffs.py pkg/TestSwitchPatternMatchingConstructor1.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,6 +1,4 @@
 package pkg;
-
-import java.lang.runtime.SwitchBootstraps;
 
 public class TestSwitchPatternMatchingConstructor1 {
    private TestSwitchPatternMatchingConstructor1(String s) {
@@ -8,40 +6,12 @@
    }
 
    private TestSwitchPatternMatchingConstructor1(TestSwitchPatternMatchingConstructor1.Shape s) {
-      TestSwitchPatternMatchingConstructor1.Shape var2 = s;
-      byte var3 = 0;
-
-      String var10001;
-      label17:
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",TestSwitchPatternMatchingConstructor1.Triangle,TestSwitchPatternMatchingConstructor1.Triangle>(
-            var2, var3
-         )) {
-            case -1:
-               var10001 = "null";
-               break label17;
-            case 0: {
-               TestSwitchPatternMatchingConstructor1.Triangle t = (TestSwitchPatternMatchingConstructor1.Triangle)var2;
-               if (!(t.calculateArea() > 100.0)) {
-                  var3 = 1;
-                  break;
-               }
-
-               var10001 = "Large triangle";
-               break label17;
-            }
-            case 1: {
-               TestSwitchPatternMatchingConstructor1.Triangle t = (TestSwitchPatternMatchingConstructor1.Triangle)var2;
-               var10001 = "Small triangle";
-               break label17;
-            }
-            default:
-               var10001 = "Non-triangle";
-               break label17;
-         }
-      }
-
-      this(var10001);
+      this(switch(s) {
+         case null -> "null";
+         case TestSwitchPatternMatchingConstructor1.Triangle t when t.calculateArea() > 100.0 -> "Large triangle";
+         case TestSwitchPatternMatchingConstructor1.Triangle tx -> "Small triangle";
+         default -> "Non-triangle";
+      });
    }
 
    private abstract static class Shape {
gen_diffs.py pkg/TestSwitchPatternMatchingConstructor2.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,6 +1,5 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatchingConstructor2 {
@@ -9,20 +8,15 @@
    }
 
    private TestSwitchPatternMatchingConstructor2(Object s) {
-      byte var3 = 0;
-      String var10001;
-
-      switch(s) {
-         case null -> var10001 = "null";
-         default -> var10001 = "Non-triangle";
-      };
-      this(var10001);
+      this(switch(s) {
+         case null -> "null";
+         default -> "Non-triangle";
+      });
    }
 
    private TestSwitchPatternMatchingConstructor2(Object s, boolean unused) {
       Objects.requireNonNull(s);
-      byte var4 = 0;
-      switch(SwitchBootstraps.typeSwitch<"typeSwitch">(s, var4)) {
+      switch(s) {
          default:
             this("Non-triangle");
       }
gen_diffs.py pkg/TestSwitchPatternMatchingFuzz1.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,35 +2,30 @@
 
 class TestSwitchPatternMatchingFuzz1 {
    public void test() {
-      Object var1;
-      label55: {
-         var1 = new Object();
-         byte var2 = 0;
+      Object var1 = new Object();
+      switch(var1) {
+         case Double var14:
+         case null:
+            Double l = (Double)var1;
+            long[] var4 = new long[0];
+            int var5 = var4.length;
+            byte var6 = 0;
+            if (var6 < var5) {
+               long none = var4[var6];
+               throw new RuntimeException();
+            } else {
+               try {
+                  System.out.println("Hi");
+                  return;
+               } catch (Exception var12) {
+               } finally {
+                  ;
+               }
 
-         switch(var1) {
-            case null, 0 -> {
+               throw new RuntimeException();
             }
-            default -> throw new RuntimeException();
-         };
-      }
-
-      Double l = (Double)var1;
-      long[] var4 = new long[0];
-      int var5 = var4.length;
-      byte var6 = 0;
-      if (var6 < var5) {
-         long none = var4[var6];
-         throw new RuntimeException();
-      } else {
-         try {
-            System.out.println("Hi");
-            return;
-         } catch (Exception var12) {
-         } finally {
-            ;
-         }
-
-         throw new RuntimeException();
+         default:
+            throw new RuntimeException();
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatchingInstanceof1.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,39 +1,22 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatchingInstanceof1 {
    public void test(Object o) {
       Objects.requireNonNull(o);
-      Object var2 = o;
-      byte var3 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",String,Integer,String>(var2, var3)) {
-            case 0: {
-               String s = (String)var2;
-               if (o instanceof Integer a) {
-                  System.out.println(s);
-                  return;
-               }
-
-               var3 = 1;
-               break;
-            }
-            case 1:
-               Integer i = (Integer)var2;
-               System.out.println(i);
-               return;
-            case 2: {
-               String s = (String)var2;
-               System.out.println(s);
-               return;
-            }
-            default:
-               System.out.println("Default");
-               return;
-         }
+      switch(o) {
+         case String s when o instanceof Integer a:
+            System.out.println(s);
+            break;
+         case Integer i:
+            System.out.println(i);
+            break;
+         case String sx:
+            System.out.println(sx);
+            break;
+         default:
+            System.out.println("Default");
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatchingInstanceof2.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,39 +1,22 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatchingInstanceof2 {
    public void test(Object o) {
       Objects.requireNonNull(o);
-      Object var2 = o;
-      byte var3 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Number,Number,String>(var2, var3)) {
-            case 0: {
-               Number n = (Number)var2;
-               if (n instanceof Integer i) {
-                  System.out.println(i);
-                  return;
-               }
-
-               var3 = 1;
-               break;
-            }
-            case 1: {
-               Number n = (Number)var2;
-               System.out.println(n);
-               return;
-            }
-            case 2:
-               String s = (String)var2;
-               System.out.println(s);
-               return;
-            default:
-               System.out.println("Default");
-               return;
-         }
+      switch(o) {
+         case Number n when n instanceof Integer i:
+            System.out.println(i);
+            break;
+         case Number nx:
+            System.out.println(nx);
+            break;
+         case String s:
+            System.out.println(s);
+            break;
+         default:
+            System.out.println("Default");
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatchingInstanceof3.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,39 +1,22 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatchingInstanceof3 {
    public void test(Object o) {
       Objects.requireNonNull(o);
-      Object var2 = o;
-      byte var3 = 0;
-
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Number,Number,String>(var2, var3)) {
-            case 0: {
-               Number n = (Number)var2;
-               if (n instanceof Integer i && i > 0) {
-                  System.out.println(i);
-                  return;
-               }
-
-               var3 = 1;
-               break;
-            }
-            case 1: {
-               Number n = (Number)var2;
-               System.out.println(n);
-               return;
-            }
-            case 2:
-               String s = (String)var2;
-               System.out.println(s);
-               return;
-            default:
-               System.out.println("Default");
-               return;
-         }
+      switch(o) {
+         case Number n when n instanceof Integer i && i > 0:
+            System.out.println(i);
+            break;
+         case Number nx:
+            System.out.println(nx);
+            break;
+         case String s:
+            System.out.println(s);
+            break;
+         default:
+            System.out.println("Default");
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatchingLoop.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,20 +1,16 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatchingLoop {
    public void test(Object o) {
       while(true) {
          Objects.requireNonNull(o);
-         byte var3 = 0;
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Integer,String>(o, var3)) {
-            case 0:
-               Integer i = (Integer)o;
+         switch(o) {
+            case Integer i:
                System.out.println(i);
                break;
-            case 1:
-               String s = (String)o;
+            case String s:
                System.out.println(s);
                break;
             default:
gen_diffs.py pkg/TestSwitchPatternMatchingReturn1.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,14 +5,11 @@
 public class TestSwitchPatternMatchingReturn1 {
    public int test(Object o) {
       Objects.requireNonNull(o);
-      byte var3 = 0;
-      int var10000;
 
-      switch(o) {
-         case o instanceof Integer i -> var10000 = i;
-         case o instanceof String s -> var10000 = s.length();
-         default -> var10000 = 0;
+      return switch(o) {
+         case Integer i -> i;
+         case String s -> s.length();
+         default -> 0;
       };
-      return var10000;
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatchingReturn2.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,35 +1,16 @@
 package pkg;
 
-import java.lang.runtime.SwitchBootstraps;
 import java.util.Objects;
 
 public class TestSwitchPatternMatchingReturn2 {
    public int test(Object o) {
       Objects.requireNonNull(o);
-      Object var2 = o;
-      byte var3 = 0;
 
-      while(true) {
-         switch(SwitchBootstraps.typeSwitch<"typeSwitch",Integer,Integer,String>(var2, var3)) {
-            case 0: {
-               Integer i = (Integer)var2;
-               if (i <= 100) {
-                  var3 = 1;
-                  break;
-               }
-
-               return -i;
-            }
-            case 1: {
-               Integer i = (Integer)var2;
-               return i;
-            }
-            case 2:
-               String s = (String)var2;
-               return s.length();
-            default:
-               return 0;
-         }
-      }
+      return switch(o) {
+         case Integer i when i > 100 -> -i;
+         case Integer ix -> ix;
+         case String s -> s.length();
+         default -> 0;
+      };
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchPatternMatchingWithNull.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,22 +2,30 @@
 
 public class TestSwitchPatternMatchingWithNull {
    public void test(Object o) {
-      byte var3 = 0;
-
       switch(o) {
-         case o instanceof Integer i, 0 -> System.out.println(i);
-         case o instanceof String s -> System.out.println(s);
-         default -> System.out.println("Default");
-      };
+         case Integer i:
+         case null:
+            System.out.println(i);
+            break;
+         case String s:
+            System.out.println(s);
+            break;
+         default:
+            System.out.println("Default");
+      }
    }
 
    public void test2(Object o) {
-      byte var3 = 0;
-
       switch(o) {
-         case o instanceof Integer i, 0 -> System.out.println(i);
-         case o instanceof String s -> System.out.println(s);
-         default -> System.out.println("Default");
-      };
+         case Integer i:
+         case null:
+            System.out.println(i);
+            break;
+         case String s:
+            System.out.println(s);
+            break;
+         default:
+            System.out.println("Default");
+      }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSwitchTernary.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -11,7 +11,6 @@
          default:
             System.out.println("no");
       }
-
    }
 
    public void testString(String i, String j, boolean b) {
@@ -25,7 +24,6 @@
          default:
             System.out.println("no");
       }
-
    }
 
    public void testEnum(TestSwitchTernary.TestEnum i, TestSwitchTernary.TestEnum j, boolean b) {
@@ -38,7 +36,6 @@
          default:
             System.out.println("no");
       }
-
    }
 
    public static enum TestEnum {
gen_diffs.py pkg/TestSynchronized.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -101,7 +101,6 @@
          default:
             System.out.println(0);
       }
-
    }
 
    public void test13() {
gen_diffs.py pkg/TestSynchronizedLoop.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -32,13 +32,12 @@
          while(i > 0) {
             System.out.println(--i);
          }
-
       }
    }
 
    public void test12(int i) {
       synchronized(this) {
-         label94: {
+         label79: {
             System.out.println(1);
 
             while(i > 0) {
@@ -50,9 +49,8 @@
                } finally {
                   System.out.println(1.7);
                   if (i > 5) {
-                     break label94;
+                     break label79;
                   }
-
                }
             }
 
@@ -66,65 +64,27 @@
       if (i > 2) {
          System.out.println("Hello!");
       }
-
    }
 
    public void testLoop(double var1) {
       if (var1 >= 88.29) {
-         synchronized(this){}
-
-         try {
+         synchronized(this) {
             while(true) {
                long var12 = 399L;
                var1 /= 97.81;
             }
-         } finally {
-            ;
          }
       }
    }
 
    public void testFlatten() {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1
-      //   at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100)
-      //   at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106)
-      //   at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302)
-      //   at java.base/java.util.Objects.checkIndex(Objects.java:385)
-      //   at java.base/java.util.ArrayList.get(ArrayList.java:427)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.sforms.FlattenStatementsHelper.flattenStatement(FlattenStatementsHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.sforms.FlattenStatementsHelper.buildDirectGraph(FlattenStatementsHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.sforms.SSAConstructorSparseEx.splitVariables(SSAConstructorSparseEx.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.StackVarsProcessor.simplifyStackVars(StackVarsProcessor.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: ldc2_w -151
-      // 03: lstore 1
-      // 04: ldc2_w -384
-      // 07: lstore 3
-      // 08: lload 1
-      // 09: ldc2_w 5
-      // 0c: lcmp
-      // 0d: ifne 2c
-      // 10: aload 0
-      // 11: dup
-      // 12: astore 5
-      // 14: monitorenter
-      // 15: lload 3
-      // 16: ldc2_w -714
-      // 19: lsub
-      // 1a: lstore 3
-      // 1b: aload 5
-      // 1d: monitorexit
-      // 1e: goto 29
-      // 21: astore 6
-      // 23: aload 5
-      // 25: monitorexit
-      // 26: aload 6
-      // 28: athrow
-      // 29: goto 08
-      // 2c: return
+      long var2 = -151L;
+      long var3 = -384L;
+
+      while(var2 == 5L) {
+         synchronized(this) {
+            var3 -= -714L;
+         }
+      }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSynchronizedThrow.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,24 +2,16 @@
 
 public class TestSynchronizedThrow {
    public void test() {
-      synchronized(this){}
-
-      try {
+      synchronized(this) {
          throw new RuntimeException();
-      } finally {
-         ;
       }
    }
 
    public void test1() {
       System.out.println("Hi");
-      synchronized(this){}
-
-      try {
+      synchronized(this) {
          System.out.println("Hello");
          throw new RuntimeException();
-      } finally {
-         ;
       }
    }
 
@@ -46,23 +38,17 @@
    }
 
    public void testLoopThrow(boolean b) {
-      synchronized(this){}
-
-      try {
+      synchronized(this) {
          while(b) {
             System.out.println("oh");
          }
 
          throw new RuntimeException();
-      } finally {
-         ;
       }
    }
 
    public void testInfiniteLoopOrThrow(boolean b) {
-      synchronized(this){}
-
-      try {
+      synchronized(this) {
          if (b) {
             while(true) {
                System.out.println("looooooooooop");
@@ -70,8 +56,6 @@
          }
 
          throw new RuntimeException();
-      } finally {
-         ;
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestSynchronizedTry.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -11,7 +11,6 @@
             this.notifyAll();
          }
       }
-
    }
 
    public void test2(int i) {
@@ -36,7 +35,6 @@
       if (i > 2) {
          System.out.println("Hello!");
       }
-
    }
 
    public void test3(int i) {
@@ -61,24 +59,25 @@
       if (i > 2) {
          System.out.println("Hello!");
       }
-
    }
 
    public void testLabel() {
       String var1 = "Hi!";
       Object var8 = null;
       synchronized(this) {
-         String var9 = "Hi!";
+         label36: {
+            String var9 = "Hi!";
 
-         try {
-            if (var1 == null) {
-               return;
+            try {
+               if (var1 == null) {
+                  return;
+               }
+            } catch (Exception var7) {
+               break label36;
             }
-         } catch (Exception var7) {
-            break label6;
+
+            return;
          }
-
-         return;
       }
 
       System.out.println(var8);
gen_diffs.py pkg/TestSynchronizedTrySharing.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -12,12 +12,11 @@
       InputStream is = null;
 
       try {
-         new FileInputStream(name);
+         is = new FileInputStream(name);
          name = name.substring(50);
       } catch (Exception var4) {
          is.close();
       }
-
    }
 
    public void test2(String name) throws Exception {
@@ -28,7 +27,7 @@
       InputStream is = null;
 
       try {
-         new FileInputStream(name);
+         is = new FileInputStream(name);
          synchronized(name) {
             System.out.println(name);
             name = name.substring(50);
@@ -36,6 +35,5 @@
       } catch (Exception var6) {
          is.close();
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTernaryCall.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,49 +1,13 @@
 package pkg;
-
-import java.io.PrintStream;
 
 public class TestTernaryCall {
    public void test(boolean a, boolean b, boolean c) {
-      PrintStream var10000;
-      boolean var10001;
-      label25: {
-         label27: {
-            var10000 = System.out;
-            if (b) {
-               if (c) {
-                  break label27;
-               }
-            } else if (a) {
-               break label27;
-            }
-
-            if (c) {
-               if (a) {
-                  break label27;
-               }
-            } else if (b) {
-               break label27;
-            }
-
-            var10001 = false;
-            break label25;
-         }
-
-         var10001 = true;
-      }
-
-      var10000.println(var10001);
+      System.out.println((b ? c : a) || (c ? a : b));
    }
 
    public void test2(boolean a, boolean b, boolean c) {
-      if (b) {
-         if (!c) {
-            return;
-         }
-      } else if (!a) {
-         return;
+      if (b ? c : a) {
+         System.out.println(c);
       }
-
-      System.out.println(c);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTernaryReturn.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -9,23 +9,7 @@
          return false;
       } else {
          TestTernaryReturn p = (TestTernaryReturn)o;
-         if (this.a == null) {
-            if (p.a != null) {
-               return false;
-            }
-         } else if (!this.a.equals(p.a)) {
-            return false;
-         }
-
-         if (this.b == null) {
-            if (p.b == null) {
-               return true;
-            }
-         } else if (this.b.equals(p.b)) {
-            return true;
-         }
-
-         return false;
+         return (this.a == null ? p.a == null : this.a.equals(p.a)) && (this.b == null ? p.b == null : this.b.equals(p.b));
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestThrowLoop.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -17,6 +17,5 @@
             throw new IllegalArgumentException();
          }
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryCatchFinally.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -12,7 +12,6 @@
       } finally {
          System.out.println("finally");
       }
-
    }
 
    int foo(int a) throws Exception {
gen_diffs.py pkg/TestTryCatchNested.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -11,6 +11,5 @@
       } catch (Exception var4) {
          System.out.println(var1);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryFinally.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,21 +1,11 @@
 package pkg;
 
 public class TestTryFinally {
-   // $QF: Could not verify finally blocks. A semaphore variable has been added to preserve control flow.
-   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    public void test0() {
-      boolean var7 = false;
-
       try {
-         var7 = true;
          System.out.println("Hello");
-         var7 = false;
       } finally {
-         if (var7) {
-            long var4 = 5L;
-         }
+         long var4 = 5L;
       }
-
-      long var1 = 5L;
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryLoop.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -12,17 +12,12 @@
    private boolean field;
 
    public void test(File file) {
-      while(true) {
-         try {
-            if (this.field) {
-               new Scanner(file);
-               continue;
-            }
-         } catch (FileNotFoundException var3) {
-            var3.printStackTrace();
+      try {
+         while(this.field) {
+            new Scanner(file);
          }
-
-         return;
+      } catch (FileNotFoundException var3) {
+         var3.printStackTrace();
       }
    }
 
gen_diffs.py pkg/TestTryLoopNoCatch.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -8,6 +8,7 @@
          try {
             b = this.method(s[i]);
             break;
+         } catch (Exception var5) {
          }
       }
 
gen_diffs.py pkg/TestTryLoopReturnFinally.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -8,25 +8,18 @@
    private boolean field;
 
    public void test(File file) {
-      while(true) {
-         try {
-            if (!this.field) {
-               break;
+      try {
+         while(this.field) {
+            if (file == null) {
+               return;
             }
 
-            if (file != null) {
-               new Scanner(file);
-               continue;
-            }
-         } catch (FileNotFoundException var6) {
-            var6.printStackTrace();
-            break;
-         } finally {
-            System.out.println("Finally");
+            new Scanner(file);
          }
-
-         return;
+      } catch (FileNotFoundException var6) {
+         var6.printStackTrace();
+      } finally {
+         System.out.println("Finally");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryLoopSimpleFinally.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -10,41 +10,30 @@
    private boolean field;
 
    public void test(File file) {
-      while(true) {
-         try {
-            if (this.field) {
-               new Scanner(file);
-               continue;
-            }
-         } catch (FileNotFoundException var6) {
-            var6.printStackTrace();
-         } finally {
-            System.out.println("Finally");
+      try {
+         while(this.field) {
+            new Scanner(file);
          }
-
-         return;
+      } catch (FileNotFoundException var6) {
+         var6.printStackTrace();
+      } finally {
+         System.out.println("Finally");
       }
    }
 
    public void test2(int x, Path file) throws IOException {
-      while(true) {
-         try {
-            if (x < 0) {
-               return;
-            }
-
+      try {
+         while(x >= 0) {
             Scanner scanner = new Scanner(file);
             if (x % 11 != 0) {
                x -= scanner.nextInt();
-               continue;
+            } else {
+               System.out.println("nice");
+               return;
             }
-
-            System.out.println("nice");
-         } finally {
-            System.out.println("Finally");
          }
-
-         return;
+      } finally {
+         System.out.println("Finally");
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryReturn.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -1,5 +1,6 @@
 package pkg;
 
+import java.util.Random;
 import java.util.function.Supplier;
 
 public class TestTryReturn {
@@ -25,10 +26,10 @@
    public void testFinally1(Supplier<Boolean> supplier) {
       System.out.println("pred");
 
-      label32: {
+      label27: {
          try {
             if (!supplier.get()) {
-               break label32;
+               break label27;
             }
          } finally {
             System.out.println("Finally");
@@ -54,15 +55,15 @@
    public boolean testFinally3(boolean b, boolean c, int a, Supplier<Boolean> supplier) {
       boolean var5;
       try {
-         if (!b) {
-            if (a > 0) {
-               return a == 1;
-            }
-
+         if (b) {
+            return c && supplier.get();
+         }
+
+         if (a <= 0) {
             return supplier.get();
          }
 
-         var5 = c && supplier.get();
+         var5 = a == 1;
       } finally {
          System.out.println("Finally");
       }
@@ -135,8 +136,8 @@
       // $QF: Couldn't be decompiled
       // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
       // java.lang.RuntimeException: parsing failure!
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.parseGraph(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java)
+      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java)
       //
       // Bytecode:
       // 00: bipush 116
@@ -173,90 +174,35 @@
    }
 
    public void testPostdomFailure() {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot invoke "org.jetbrains.java.decompiler.util.FastFixedSetFactory$FastFixedSet.contains(Object)" because "predset" is null
-      //  at org.jetbrains.java.decompiler.modules.decompiler.decompose.FastExtendedPostdominanceHelper.lambda$removeErroneousNodes$0(FastExtendedPostdominanceHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.decompose.FastExtendedPostdominanceHelper.iterateReachability(FastExtendedPostdominanceHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.decompose.FastExtendedPostdominanceHelper.removeErroneousNodes(FastExtendedPostdominanceHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.decompose.FastExtendedPostdominanceHelper.getExtendedPostdominators(FastExtendedPostdominanceHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.findGeneralStatement(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.processStatement(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.processStatement(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.parseGraph(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 03: bipush 1
-      // 04: invokevirtual java/io/PrintStream.println (I)V
-      // 07: new java/util/Random
-      // 0a: dup
-      // 0b: invokespecial java/util/Random.<init> ()V
-      // 0e: invokevirtual java/util/Random.nextBoolean ()Z
-      // 11: ifeq 41
-      // 14: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 17: bipush 2
-      // 18: invokevirtual java/io/PrintStream.println (I)V
-      // 1b: bipush 28
-      // 1d: istore 2
-      // 1e: goto 07
-      // 21: astore 2
-      // 22: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 25: bipush 3
-      // 26: invokevirtual java/io/PrintStream.println (I)V
-      // 29: bipush 28
-      // 2b: istore 3
-      // 2c: goto 07
-      // 2f: astore 4
-      // 31: bipush 28
-      // 33: istore 5
-      // 35: goto 07
-      // 38: astore 6
-      // 3a: bipush 28
-      // 3c: istore 7
-      // 3e: aload 6
-      // 40: athrow
-      // 41: return
-   }
-
-   // $QF: Could not verify finally blocks. A semaphore variable has been added to preserve control flow.
-   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
+      System.out.println(1);
+
+      while(new Random().nextBoolean()) {
+         try {
+            try {
+               System.out.println(2);
+            } catch (Exception var14) {
+               System.out.println(3);
+            } finally {
+               continue;
+            }
+         } finally {
+            boolean var7 = true;
+         }
+      }
+   }
+
    public void testVarWrong() {
-      boolean var8 = false;
-
-      label49: {
-         label48: {
-            try {
-               try {
-                  var8 = true;
-                  System.out.println("Hi");
-                  var8 = false;
-                  break label49;
-               } catch (Exception var9) {
-                  if (var9 != null) {
-                     var8 = false;
-                     break label48;
-                  }
-               }
-
-               System.out.println(var9);
-               var8 = false;
-            } finally {
-               if (var8) {
-                  float var5 = 9.18F;
-               }
-            }
-
-            float var3 = 9.18F;
+      try {
+         System.out.println("Hi");
+         return;
+      } catch (Exception var8) {
+         if (var8 == null) {
+            System.out.println(var8);
             return;
          }
-
-         float var11 = 9.18F;
-         return;
-      }
-
-      float var2 = 9.18F;
+      } finally {
+         float var5 = 9.18F;
+      }
    }
 
    public void testInvalidUse() {
@@ -282,6 +228,5 @@
       } finally {
          System.out.println(var3);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryReturnNoDebug.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -16,16 +16,16 @@
    }
 
    public String test2(Supplier<Boolean> var1) {
-      Object var2 = null;
+      String var2 = null;
 
       try {
-         var5 = var1.toString();
-         System.out.println("Try: " + var5);
+         var2 = var1.toString();
+         System.out.println("Try: " + var2);
       } catch (Exception var4) {
          throw new RuntimeException("Catch: " + var2);
       }
 
-      return this.process(var5);
+      return this.process(var2);
    }
 
    private String process(String var1) {
gen_diffs.py pkg/TestTrySynchronized.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -14,11 +14,10 @@
       InputStream stream = null;
 
       try {
-         new FileInputStream("nul");
+         stream = new FileInputStream("nul");
       } catch (Throwable var2) {
          stream.close();
       }
-
    }
 
    public static void case02() throws Exception {
@@ -36,7 +35,6 @@
       } catch (Throwable var4) {
          stream.close();
       }
-
    }
 
    private static InputStream getInputStream() {
gen_diffs.py pkg/TestTryVar.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -18,8 +18,7 @@
       for(int i = 0; i < 10; ++i) {
          try {
             x = y + i;
-            int var7;
-            x = (var7 = x + (5000 - i / (7 - i))) / y;
+            x = (x += 5000 - i / (7 - i)) / y;
          } catch (Throwable var5) {
          }
       }
gen_diffs.py pkg/TestTryVarNoDebug.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -18,8 +18,7 @@
       for(int var3 = 0; var3 < 10; ++var3) {
          try {
             var1 = var2 + var3;
-            int var7;
-            var1 = (var7 = var1 + (5000 - var3 / (7 - var3))) / var2;
+            var1 = (var1 += 5000 - var3 / (7 - var3)) / var2;
          } catch (Throwable var5) {
          }
       }
gen_diffs.py pkg/TestTryWithResources.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -13,7 +13,6 @@
          fileSystem.getPath("PATH", "TO", "FILE");
       } catch (IOException | URISyntaxException var13) {
       }
-
    }
 
    public static void test2() {
@@ -24,7 +23,6 @@
          stream.read();
       } catch (IOException | URISyntaxException var32) {
       }
-
    }
 
    public static void test3() {
@@ -36,6 +34,5 @@
          }
       } catch (IOException | URISyntaxException var38) {
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesAfterSwitch.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -13,14 +13,13 @@
          switch(vvv25) {
             case "HYxSY":
             default:
-               ElementType vvv25 = ElementType.METHOD;
+               ElementType vvv25x = ElementType.METHOD;
 
                try (Scanner vvv26 = new Scanner(System.in)) {
                   System.out.println("hi");
                } finally {
                   System.out.println("f");
                }
-
          }
       }
    }
@@ -34,12 +33,11 @@
          switch(vvv26) {
             case "HYxSY":
             default:
-               try (Scanner vvv26 = new Scanner(System.in)) {
+               try (Scanner vvv26x = new Scanner(System.in)) {
                   System.out.println("hi");
                } finally {
                   System.out.println("f");
                }
-
          }
       }
    }
gen_diffs.py pkg/TestTryWithResourcesCatchFinallyJ16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -13,7 +13,6 @@
       } finally {
          System.out.println("Hello");
       }
-
    }
 
    public void testFunc(File file) {
@@ -24,7 +23,6 @@
       } finally {
          System.out.println("Hello");
       }
-
    }
 
    private Scanner create(File file) throws FileNotFoundException {
gen_diffs.py pkg/TestTryWithResourcesCatchJ16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -11,7 +11,6 @@
       } catch (FileNotFoundException var7) {
          var7.printStackTrace();
       }
-
    }
 
    public void testFunc(File file) {
@@ -20,7 +19,6 @@
       } catch (FileNotFoundException var7) {
          var7.printStackTrace();
       }
-
    }
 
    public int test1(File file) {
gen_diffs.py pkg/TestTryWithResourcesFakeTrigger.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,83 +2,71 @@
 
 import java.io.File;
 import java.io.FileNotFoundException;
+import java.util.NoSuchElementException;
 import java.util.Scanner;
 
 public class TestTryWithResourcesFakeTrigger {
    public void testTrigger1() {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
-      //   at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100)
-      //   at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106)
-      //   at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302)
-      //   at java.base/java.util.Objects.checkIndex(Objects.java:385)
-      //   at java.base/java.util.ArrayList.get(ArrayList.java:427)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryWithResourcesProcessor.makeTryWithResourceJ11(TryWithResourcesProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.makeTryWithResourceRec(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.makeTryWithResourceRec(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.makeTryWithResourceRec(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.enhanceTryStats(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: ldc "Hi!"
-      // 02: astore 2
-      // 03: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 06: ldc "Hi"
-      // 08: invokevirtual java/io/PrintStream.println (Ljava/lang/String;)V
-      // 0b: goto 0f
-      // 0e: astore 3
-      // 0f: return
-      // 10: astore 3
-      // 11: aload 2
-      // 12: astore 1
-      // 13: goto 18
-      // 16: astore 4
-      // 18: return
+      String b = "Hi!";
+
+      try {
+         try {
+            System.out.println("Hi");
+         } catch (Exception var6) {
+         }
+      } catch (Exception var7) {
+         try {
+            ;
+         } catch (Exception var5) {
+         }
+      }
    }
 
    public void testTrigger2() {
-      // $QF: Couldn't be decompiled
-      // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
-      // java.lang.NullPointerException: Cannot read field "type" because "inner" is null
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryWithResourcesProcessor.makeTryWithResourceJ11(TryWithResourcesProcessor.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.makeTryWithResourceRec(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.makeTryWithResourceRec(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.makeTryWithResourceRec(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.makeTryWithResourceRec(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.modules.decompiler.TryHelper.enhanceTryStats(TryHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
-      //
-      // Bytecode:
-      // 00: aconst_null
-      // 01: astore 1
-      // 02: aload 1
-      // 03: ifnonnull 23
-      // 06: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 09: ldc "Hi"
-      // 0b: invokevirtual java/io/PrintStream.println (Ljava/lang/String;)V
-      // 0e: goto 02
-      // 11: astore 2
-      // 12: aload 1
-      // 13: ifnull 19
-      // 16: goto 23
-      // 19: getstatic java/lang/System.out Ljava/io/PrintStream;
-      // 1c: aload 1
-      // 1d: invokevirtual java/io/PrintStream.println (Ljava/lang/Object;)V
-      // 20: goto 02
-      // 23: return
+      Object var1 = null;
+
+      while(var1 == null) {
+         try {
+            System.out.println("Hi");
+         } catch (Exception var3) {
+            if (var1 != null) {
+               break;
+            }
+
+            System.out.println(var1);
+         }
+      }
    }
 
    public void testTrigger3(File file) throws FileNotFoundException {
-      try (Scanner scanner = new Scanner(file)) {
+      Scanner scanner = new Scanner(file);
+
+      try {
          scanner.next();
+      } catch (NoSuchElementException var6) {
+         try {
+            scanner.close();
+         } catch (IllegalStateException var5) {
+            var6.addSuppressed(var5);
+         }
+
+         throw var6;
       }
    }
 
    public void testTrigger4(File file) throws FileNotFoundException {
-      try (Scanner scanner = new Scanner(file)) {
+      Scanner scanner = new Scanner(file);
+
+      try {
          scanner.next();
+      } catch (Throwable var6) {
+         try {
+            scanner.close();
+         } catch (Throwable var5) {
+            var6.addSuppressed(var5);
+         }
+
+         throw var6;
       }
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesFinallyJ16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -11,7 +11,6 @@
       } finally {
          System.out.println("Hello");
       }
-
    }
 
    public void testFunc(File file) throws FileNotFoundException {
@@ -20,7 +19,6 @@
       } finally {
          System.out.println("Hello");
       }
-
    }
 
    private Scanner create(File file) throws FileNotFoundException {
gen_diffs.py pkg/TestTryWithResourcesJ16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -9,14 +9,12 @@
       try (Scanner scanner = new Scanner(file)) {
          scanner.next();
       }
-
    }
 
    public void testFunc(File file) throws FileNotFoundException {
       try (Scanner scanner = this.create(file)) {
          scanner.next();
       }
-
    }
 
    private Scanner create(File file) throws FileNotFoundException {
gen_diffs.py pkg/TestTryWithResourcesLoopJ16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -28,7 +28,6 @@
             break;
          }
       }
-
    }
 
    public void test2(File f) throws FileNotFoundException {
@@ -44,7 +43,6 @@
             s.next();
          }
       }
-
    }
 
    public void test3(File f) throws FileNotFoundException {
@@ -65,7 +63,6 @@
 
          return;
       }
-
    }
 
    public void test4(File f) throws FileNotFoundException {
@@ -79,7 +76,6 @@
             }
          }
       }
-
    }
 
    private Scanner create(File file) throws FileNotFoundException {
gen_diffs.py pkg/TestTryWithResourcesManyJ16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -19,6 +19,5 @@
          System.out.println(s4.nextLine());
          System.out.println(s5.nextLine());
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesManyJ9.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -61,7 +61,6 @@
       } finally {
          $closeResource(var3, s1);
       }
-
    }
 
    // $QF: synthetic method
@@ -75,6 +74,5 @@
       } else {
          x1.close();
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesMultiJ16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -14,6 +14,5 @@
          scanner.next();
          writer.write("hello");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesNestedJ16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -14,7 +14,6 @@
       ) {
          scanner.next();
       }
-
    }
 
    public void testNestedFinally(File file) throws IOException {
@@ -35,6 +34,5 @@
       } finally {
          System.out.println(1);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesNullJ16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -9,7 +9,6 @@
       try (Scanner scanner = null) {
          scanner.next();
       }
-
    }
 
    public void testNested(File file) {
@@ -20,7 +19,6 @@
             scanner2.next();
          }
       }
-
    }
 
    public void testMulti(File file) {
@@ -31,6 +29,5 @@
          scanner.next();
          scanner2.next();
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestTryWithResourcesOuterJ16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -28,7 +28,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testFunc(File file) throws FileNotFoundException {
@@ -52,7 +51,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testMulti(File file) throws IOException {
@@ -96,7 +94,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testNested1(File file) throws IOException {
@@ -140,7 +137,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testNested2(File file) throws IOException {
@@ -184,7 +180,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testSame1(File file) throws FileNotFoundException {
@@ -227,7 +222,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testSame2(File file) throws FileNotFoundException {
@@ -269,7 +263,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testSame3(File file) throws FileNotFoundException {
@@ -313,7 +306,6 @@
       if (scanner != null) {
          scanner.close();
       }
-
    }
 
    public void testSame4(File file) throws FileNotFoundException {
@@ -338,7 +330,6 @@
             scanner.close();
          }
       }
-
    }
 
    private Scanner create(File file) throws FileNotFoundException {
gen_diffs.py pkg/TestTryWithResourcesReturnJ16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -39,8 +39,8 @@
       // $QF: Couldn't be decompiled
       // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
       // java.lang.RuntimeException: parsing failure!
-      //  at org.jetbrains.java.decompiler.modules.decompiler.DomHelper.parseGraph(DomHelper.java)
-      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable.codeToJava(MethodProcessorRunnable.java)
+      //  at org.jetbrains.java.decompiler.modules.decompiler.decompose.DomHelper.parseGraph(DomHelper.java)
+      //  at org.jetbrains.java.decompiler.main.rels.MethodProcessor.codeToJava(MethodProcessor.java)
       //
       // Bytecode:
       // 00: new java/util/Scanner
gen_diffs.py pkg/TestTryWithResourcesSwitchJ16.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -18,19 +18,18 @@
                System.out.println("default");
          }
       }
-
    }
 
    public void test1(File f) throws FileNotFoundException {
       try (Scanner s = this.create(f)) {
-         label56: {
+         label54: {
             switch(s.nextInt()) {
                case 1:
                   System.out.println("1");
                   break;
                case 2:
                   System.out.println("2");
-                  break label56;
+                  break label54;
                default:
                   System.out.println("default");
             }
@@ -43,19 +42,18 @@
       if (f.exists()) {
          System.out.println("exists");
       }
-
    }
 
    public int test2(File f) throws FileNotFoundException {
       try (Scanner s = this.create(f)) {
-         label69: {
+         label66: {
             switch(s.nextInt()) {
                case 1:
                   System.out.println("1");
                   break;
                case 2:
                   System.out.println("2");
-                  break label69;
+                  break label66;
                case 3:
                   System.out.println("3");
                   return 1;
gen_diffs.py pkg/TestUnionTypeAssign.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -20,10 +20,10 @@
    }
 
    default <E extends Enum<E> & TestUnionTypeAssign> void test4(Supplier<Enum[]> supplier) {
-      E[] array = supplier.get();
+      E[] array = (Enum[])supplier.get();
    }
 
    default <E extends Enum<E> & TestUnionTypeAssign> void test5(Supplier<TestUnionTypeAssign[]> supplier) {
-      E[] array = supplier.get();
+      E[] array = (Enum[])supplier.get();
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestUnknownCast.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -20,6 +20,5 @@
       for(Object vvv34 = null; vvv34 != null; vvv1 = vvv1) {
          System.out.println(vvv34);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestUnknownCastJ17.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,41 +2,20 @@
 
 import java.lang.annotation.ElementType;
 import java.util.Objects;
-import java.util.Scanner;
 
 public class TestUnknownCastJ17 {
+   // $QF: Could not properly define all variable types!
+   // Please report this to the Quiltflower issue tracker, at https://github.com/QuiltMC/quiltflower/issues with a copy of the class file (if you have the rights to distribute it!)
    public void test() {
       ElementType vvv1 = ElementType.METHOD;
       synchronized(this) {
-         label110: {
+         label92: {
             System.out.println(vvv1);
-            Object var10000 = new Object();
-            Objects.requireNonNull(var10000);
-            Object vvv5 = var10000;
-            int vvv6 = 0;
+            Object var23;
+            Objects.requireNonNull(var23);
+            Object vvv5 = var23;
 
-            switch(vvv5) {
-               default -> {
-                  label111: {
-                     ElementType var5 = ElementType.METHOD;
-
-                     try (Scanner vvv3 = new Scanner(System.in)) {
-                        String var21 = "Hi!";
-                     } finally {
-                        System.out.println(vvv1);
-                     }
-
-                     int var19 = 140;
-
-                     while(--var19 <= 395) {
-                        vvv6 = -91;
-                        System.out.println(vvv1);
-                        var19 -= 6;
-                     }
-                     break label111;
-                  }
-               }
-            };
+            <unknown> var10000_1 = (<unknown>)(new Object());
          }
       }
 
@@ -49,28 +28,23 @@
    public void test2() {
       ElementType vvv1 = ElementType.METHOD;
       synchronized(this) {
-         int vvv5;
-         label34: {
-            System.out.println(vvv1);
-            System.out.println(vvv1);
-            Object var10000 = new Object();
-            Objects.requireNonNull(var10000);
-            Object vvv5 = var10000;
-            byte vvv6 = 0;
+         System.out.println(vvv1);
+         System.out.println(vvv1);
+         Object var10000;
+         Objects.requireNonNull(var10000);
+         Object vvv5 = var10000;
 
-            switch(vvv5) {
-               default -> {
-                  ElementType var5 = ElementType.METHOD;
-                  System.out.println(vvv1);
-                  vvv5 = 140;
-               }
-            };
-         }
+         new Object();
 
-         while(--vvv5 <= 395) {
+         for(int var9 = switch(vvv5) {
+            default -> {
+               ElementType var5 = ElementType.METHOD;
+               System.out.println(vvv1);
+               yield 140;
+            }
+         }; --var9 <= 395; var9 -= 6) {
             int vvv6 = -91;
             System.out.println(vvv1);
-            vvv5 -= 6;
          }
       }
 
gen_diffs.py pkg/TestVarIndex.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -3,25 +3,25 @@
 public class TestVarIndex {
    public void test() {
       byte var1 = 1;
-      this.consume(var1);
+      this.consume((int)var1);
       var1 = 1;
-      this.consume(var1);
+      this.consume((short)var1);
       var1 = 1;
       this.consume(var1);
    }
 
    public void test2() {
       byte var1 = 1;
-      this.consume(var1);
+      this.consume((int)var1);
       var1 = 1;
-      this.consume(var1);
+      this.consume((short)var1);
       var1 = 1;
       this.consume((byte)var1);
    }
 
    public void test3() {
       byte var1 = 1;
-      this.consume(var1);
+      this.consume((int)var1);
       var1 = 1;
       this.consume((short)var1);
       var1 = 1;
@@ -30,7 +30,7 @@
 
    public void test4() {
       byte var1 = 1;
-      this.consume(var1);
+      this.consume((int)var1);
       var1 = 1;
       this.consume((short)var1);
       var1 = 1;
gen_diffs.py pkg/TestVarIndex2.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -11,7 +11,7 @@
       var1 = "1";
       this.consume((Serializable)var1);
       var1 = "1";
-      this.consume(var1);
+      this.consume((Object)var1);
    }
 
    public void test2() {
gen_diffs.py pkg/TestWhile1.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -15,6 +15,5 @@
       while(d <= 0.0) {
          d += 2.0;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileCondition.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -7,7 +7,6 @@
       for(int j = 10; i < 0 && j > 0 || i * j > 3; --j) {
          ++i;
       }
-
    }
 
    public void test2() {
@@ -18,6 +17,5 @@
          ++i;
          --j;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileConditionTernary.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -3,17 +3,10 @@
 public class TestWhileConditionTernary {
    public void test1() {
       if (this.blackBox()) {
-         for(; !this.blackBox(); System.out.println("text")) {
-            if (this.blackBox()) {
-               if (!this.blackBox3().equals("a")) {
-                  break;
-               }
-            } else if (!this.blackBox2()) {
-               break;
-            }
+         while(!this.blackBox() && (this.blackBox() ? this.blackBox3().equals("a") : this.blackBox2())) {
+            System.out.println("text");
          }
       }
-
    }
 
    public boolean blackBox() {
gen_diffs.py pkg/TestWhileTernary1.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,15 +5,7 @@
       if (a <= 0) {
          return 0;
       } else {
-         while(true) {
-            if (condition) {
-               if (a >= b) {
-                  break;
-               }
-            } else if (b <= a) {
-               break;
-            }
-
+         while(condition ? a < b : b > a) {
             System.out.println(a * b);
             ++a;
          }
gen_diffs.py pkg/TestWhileTernary10.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -5,25 +5,14 @@
 public class TestWhileTernary10 {
    public double test(boolean condition, int n, Stream<Double> doubles) {
       double[] ds = new double[]{(double)n};
-      int i = 0;
 
-      while(true) {
-         if (condition) {
-            if (i < n) {
-               break;
-            }
-         } else if (n < i) {
-            break;
-         }
-
+      for(int i = 0; condition ? i >= n : n >= i; ++i) {
          for(int j = 0; j < n; ++j) {
             System.out.println(1);
             if (j > i) {
                ++j;
             }
          }
-
-         ++i;
       }
 
       doubles.forEach(d -> ds[0] -= d);
@@ -32,19 +21,9 @@
 
    public double test1(boolean condition, int n, Stream<Double> doubles) {
       double[] ds = new double[]{(double)n};
-      int i = 0;
 
-      while(true) {
-         if (condition) {
-            if (i < n) {
-               break;
-            }
-         } else if (n < i) {
-            break;
-         }
-
+      for(int i = 0; condition ? i >= n : n >= i; ++i) {
          ds[0] += (double)i;
-         ++i;
       }
 
       doubles.forEach(d -> ds[0] -= d);
@@ -53,17 +32,8 @@
 
    public double test2(boolean condition, int n, Stream<Double> doubles) {
       double[] ds = new double[]{(double)n};
-      int i = 0;
 
-      while(true) {
-         if (condition) {
-            if (i < n) {
-               break;
-            }
-         } else if (n < i) {
-            break;
-         }
-
+      for(int i = 0; condition ? i >= n : n >= i; ++i) {
          for(int j = 0; j < n; ++j) {
             for(int k = 0; k < i; ++k) {
                System.out.println(1);
@@ -72,8 +42,6 @@
                }
             }
          }
-
-         ++i;
       }
 
       doubles.forEach(d -> ds[0] -= d);
gen_diffs.py pkg/TestWhileTernary2.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,19 +2,7 @@
 
 public class TestWhileTernary2 {
    public void test(boolean condition, int a, int b) {
-      while(true) {
-         label14: {
-            if (condition) {
-               if (a < b) {
-                  break label14;
-               }
-            } else if (b > a) {
-               break label14;
-            }
-
-            return;
-         }
-
+      while(condition ? a < b : b > a) {
          System.out.println(a * b);
          ++a;
       }
gen_diffs.py pkg/TestWhileTernary3.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,22 +2,11 @@
 
 public class TestWhileTernary3 {
    public void test(boolean condition, int a, int b) {
-      while(true) {
-         label14: {
-            if (condition) {
-               if (a < b) {
-                  break label14;
-               }
-            } else if (b > a) {
-               break label14;
-            }
-
-            System.out.println(1);
-            return;
-         }
-
+      while(condition ? a < b : b > a) {
          System.out.println(a * b);
          ++a;
       }
+
+      System.out.println(1);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileTernary4.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,17 +2,9 @@
 
 public class TestWhileTernary4 {
    public void test(boolean condition, int a, int b) {
-      while(true) {
-         if (condition) {
-            if (a < b) {
-               continue;
-            }
-         } else if (b > a) {
-            continue;
-         }
+      while(condition ? a < b : b > a) {
+      }
 
-         System.out.println(1);
-         return;
-      }
+      System.out.println(1);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileTernary5.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,23 +2,16 @@
 
 public class TestWhileTernary5 {
    public void test(boolean condition, int a, int b, int c) {
-      for(; c > 3; System.out.println(1)) {
+      while(c > 3) {
          --c;
          System.out.println(2);
 
-         while(true) {
-            if (condition) {
-               if (a >= b) {
-                  break;
-               }
-            } else if (b <= a) {
-               break;
-            }
-
+         while(condition ? a < b : b > a) {
             System.out.println(a * b);
             ++a;
          }
+
+         System.out.println(1);
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileTernary6.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,22 +2,12 @@
 
 public class TestWhileTernary6 {
    public void test(boolean condition, int a, int b) {
-      while(true) {
+      do {
          System.out.println(a);
          ++b;
          if (a > 3) {
             --a;
          }
-
-         if (condition) {
-            if (a < b) {
-               continue;
-            }
-         } else if (b > a) {
-            continue;
-         }
-
-         return;
-      }
+      } while(condition ? a < b : b > a);
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileTernary7.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,20 +2,8 @@
 
 public class TestWhileTernary7 {
    public void test(boolean condition, int a, int b) {
-      int i = 0;
-
-      while(true) {
-         if (condition) {
-            if (a >= i) {
-               break;
-            }
-         } else if (b >= i) {
-            break;
-         }
-
+      for(int i = 0; condition ? a < i : b < i; ++i) {
          System.out.println("Test");
-         ++i;
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileTernary8.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,23 +2,7 @@
 
 public class TestWhileTernary8 {
    public void test(boolean condition, int a, int b) {
-      while(true) {
-         label19: {
-            if (condition) {
-               if (a < b) {
-                  if (a == 3) {
-                     break label19;
-                  }
-               } else if (b == 4) {
-                  break label19;
-               }
-            } else if (b > a) {
-               break label19;
-            }
-
-            return;
-         }
-
+      while(condition ? (a < b ? a == 3 : b == 4) : b > a) {
          System.out.println(a * b);
          ++a;
       }
gen_diffs.py pkg/TestWhileTernary9.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -4,51 +4,36 @@
    public void test(boolean condition, boolean a, boolean b) {
       int i = 0;
 
-      do {
-         if (condition) {
-            if (!a) {
-               break;
-            }
-         } else if (!b) {
+      while(condition ? a : b) {
+         if (++i == 8) {
             break;
          }
-      } while(++i != 8);
-
+      }
    }
 
    public void test1(boolean condition, boolean a, boolean b) {
       if (Math.random() > 0.5) {
          int i = 0;
 
-         do {
-            if (condition) {
-               if (!a) {
-                  break;
-               }
-            } else if (!b) {
+         while(condition ? a : b) {
+            if (++i == 8) {
                break;
             }
-         } while(++i != 8);
+         }
       }
-
    }
 
    public void test2(boolean condition, boolean a, boolean b) {
       if (Math.random() > 0.5) {
          int i = 0;
 
-         do {
-            if (condition) {
-               if (!a) {
-                  break;
-               }
-            } else if (!b) {
+         while(condition ? a : b) {
+            if (++i == 8) {
                break;
             }
-         } while(++i != 8);
+         }
 
          System.out.println("Successor");
       }
-
    }
 }
\ No newline at end of file
gen_diffs.py pkg/TestWhileTernaryFake.java 1.8.1 1.10.0-20221220.042610-29
--- 1.8.1
+++ 1.10.0-20221220.042610-29
@@ -2,19 +2,7 @@
 
 public class TestWhileTernaryFake {
    public void test2(boolean condition, int a, int b) {
-      while(true) {
-         label15: {
-            if (condition) {
-               if (a < b) {
-                  break label15;
-               }
-            } else if (b > a) {
-               break label15;
-            }
-
-            return;
-         }
-
+      while(condition ? a < b : b > a) {
          System.out.println(a * b);
          ++a;
       }
